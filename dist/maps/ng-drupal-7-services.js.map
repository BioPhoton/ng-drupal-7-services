{"version":3,"sources":["ng-drupal-7-services.js","commons/commons.baseChannel.js","commons/commons.baseResource.js","commons/commons.bundle.js","commons/commons.drupalApiConfig.js","commons/commons.helperService.js","resources/resources.bundle.js","commons/authentication/authentication.bundle.js","commons/authentication/authentication.channel.js","commons/authentication/authentication.channelConstant.js","commons/authentication/authentication.httpIntercepter.js","commons/authentication/authentication.service.js","commons/authentication/authentication.serviceConstant.js","commons/directives/directives.bundle.js","commons/directives/directives.toggleByAccessLevel.js","commons/http/http.bundle.js","commons/http/http.configurations.js","commons/http/http.requestAcceptIntercepter.js","resources/comment/comment.bundle.js","resources/comment/comment.channel.js","resources/comment/comment.channelConstant.js","resources/comment/comment.resource.js","resources/comment/comment.resourceConstant.js","resources/file/file.bundle.js","resources/file/file.channel.js","resources/file/file.channelConstant.js","resources/file/file.resource.js","resources/file/file.resourceConstant.js","resources/menu/menu.bundle.js","resources/menu/menu.channel.js","resources/menu/menu.channelConstant.js","resources/menu/menu.resource.js","resources/menu/menu.resourceConstant.js","resources/geocoder/geocoder.bundle.js","resources/geocoder/geocoder.channel.js","resources/geocoder/geocoder.channelConstant.js","resources/geocoder/geocoder.helperConstants.js","resources/geocoder/geocoder.resource.js","resources/geocoder/geocoder.resourceConstant.js","resources/definition/definition.bundle.js","resources/definition/definition.channel.js","resources/definition/definition.channelConstant.js","resources/definition/definition.resource.js","resources/definition/definition.resourceConstant.js","resources/taxonomy_vocabulary/taxonomy_vocabulary.bundle.js","resources/taxonomy_vocabulary/taxonomy_vocabulary.channel.js","resources/taxonomy_vocabulary/taxonomy_vocabulary.channelConstant.js","resources/taxonomy_vocabulary/taxonomy_vocabulary.resource.js","resources/taxonomy_vocabulary/taxonomy_vocabulary.resourceConstant.js","resources/user/user.bundle.js","resources/user/user.channel.js","resources/user/user.channelConstant.js","resources/user/user.resource.js","resources/user/user.resourceConstant.js","resources/views/views.bundle.js","resources/views/views.channel.js","resources/views/views.channelConstant.js","resources/views/views.operatorsConstant.js","resources/views/views.resource.js","resources/views/views.resourceConstant.js","resources/taxonomy_term/taxonomy_term.bundle.js","resources/taxonomy_term/taxonomy_term.channel.js","resources/taxonomy_term/taxonomy_term.channelConstant.js","resources/taxonomy_term/taxonomy_term.resource.js","resources/taxonomy_term/taxonomy_term.resourceConstant.js","resources/system/system.bundle.js","resources/system/system.channel.js","resources/system/system.channelConstant.js","resources/system/system.resource.js","resources/system/system.resourceConstant.js","resources/node/node.bundle.js","resources/node/node.channel.js","resources/node/node.channelConstant.js","resources/node/node.resource.js","resources/node/node.resourceConstant.js"],"names":["angular","module","BaseChannel","$rootScope","subRootEmit","eventName","_Scope","scopeHandler","mapArgs","unsubScopeHandler","$on","event","args","pubRootEmit","$emit","baseChannelService","factory","$inject","BaseResource","$http","$q","request","requestConfig","pubSuccess","pubError","errors","length","reject","success","responseData","status","headers","config","error","responseError","retrieve","retrievePath","url","method","create","data","createPath","update","updatePath","_delete","deletePath","index","indexPath","options","page","pagesize","Object","keys","parameters","fields","prepareIndexGetParams","type","getParamsString","prepaeredParams","forEach","value","key","prepareGetParams","preparePostData","values","format","postData","undefined","formats","array_of_keys","array_of_values","arrayValues","k","this","push","getParams","array","array_keys","array_key_value","json","NaN","parseInt","join","BaseResourceService","delete","DrupalApiConstant","drupal_instance","api_endpoint","responseFormat","session_expiration_time","session_expiration_unite","publicFilePath","privateFilePath","filesPath","imageStylesPath","imageStyles","large","medium","thumbnail","LANGUAGE_NONE","constant","DrupalHelperService","getApiPath","getDrupalPath","getPathToImgByStyle","style","isPrivate","structureField","label","language","prepatedData","isObject","drupalHelperService","AuthenticationChannel","AuthenticationChannelConstant","pubLoginConfirmed","loginConfirmed","subLoginConfirmed","prepArgs","pubLoginFailed","loginFailed","subLoginFailed","pubLogoutConfirmed","logoutConfirmed","subLogoutConfirmed","pubLogoutFailed","logoutFailed","subLogoutFailed","pubRefreshConnectionConfirmed","refreshConnectionConfirmed","subRefreshConnectionConfirmed","pubRefreshConnectionFailed","refreshConnectionFailed","subRefreshConnectionFailed","pubTryConnectConfirmed","tryConnectConfirmed","subTryConnectConfirmed","pubTryConnectFailed","tryConnectFailed","subTryConnectFailed","pubConnectionStateUpdated","connectionStateUpdated","subConnectionStateUpdated","pubCurrentUserUpdated","currentUserUpdated","subCurrentUserUpdated","authenticationChannelService","AuthenticationHttpInterceptor","$injector","doRequestCongiguration","tokenHeaders","invoke","AuthenticationService","getAuthenticationHeaders","extend","withCredentials","intercepter","AuthenticationServiceConstant","SystemResource","UserResource","$cookies","isUser","userOrUid","currentUser","getCurrentUser","uid","isAuthorized","accessLevelRoles","userRoles","roles","isArray","i","prop","login","loginData","setAuthenticationHeaders","token","setLastConnectTime","Date","now","setConnectionState","user","setCookies","sessid","session_name","setCurrentUser","logout","delAuthenticationHeaders","delCookies","anonymousUser","refreshConnection","defer","refreshTokenFromServer","then","response","tryConnect","resolve","console","log","promise","connect","newUser","getConnectionState","newState","userIsConected","authenticationHeaders","newToken","newData","Authorization","X-CSRF-TOKEN","newSessid","newSession_name","put","sessionCookieOptions","remove","path","getLastConnectTime","lastConnectTime","newTimeInMs","domain","authenticationService","anonymous_user","id","role","authenticated_user","administrator","publicLevel","anonLevel","userLevel","adminLevel","cache","timestamp","accessLevels","public","anon","admin","toggleByAccesslevel","restrict","link","$scope","element","attrs","updateCSS","accessLevel","toggleAction","css","prevDisp","currentUserUpdatedHandler","$observe","al","$eval","directive","hTTPConfigurations","$httpProvider","interceptors","RequestIntercepterAccept","FileResourceConstant","resourcePath","CommentChannel","CommentChannelConstant","pubRetrieveConfirmed","retrieveConfirmed","subRetrieveConfirmed","pubRetrieveFailed","retrieveFailed","subRetrieveFailed","pubCreateConfirmed","createConfirmed","subCreateConfirmed","pubCreateFailed","createFailed","subCreateFailed","pubUpdateConfirmed","updateConfirmed","subUpdateConfirmed","pubUpdateFailed","updateFailed","subUpdateFailed","pubDeleteConfirmed","deleteConfirmed","subDeleteConfirmed","pubDeleteFailed","deleteFailed","subDeleteFailed","pubIndexConfirmed","indexConfirmed","subIndexConfirmed","pubIndexFailed","indexFailed","subIndexFailed","pubCountAllConfirmed","countAllConfirmed","subCountAllConfirmed","pubCountAllFailed","countAllFailed","subCountAllFailed","pubCountNewConfirmed","countNewConfirmed","subCountNewConfirmed","pubCountNewFailed","countNewFailed","subCountNewFailed","commentChannelService","CommentResource","CommentResourceConstant","cid","createData","comment","updateData","countAll","pathTocountAll","actions","countNew","pathTocountNew","commentResourceService","FileChannel","FileChannelConstant","pubCreateRawConfirmed","createRawConfirmed","subCreateRawConfirmed","pubCreateRawFailed","createRawFailed","subCreateRawFailed","fileChannelService","filesConfirmed","filesFailed","FileResource","fid","file_contents","image_styles","formData","FormData","filename","append","file","filesize","image_file_name","transformRequest","identity","Content-Type","createRaw","createRawPath","fileResourceService","MenuChannel","MenuChannelConstant","menuChannelService","MenuResource","MenuResourceConstant","menu_name","menuResourceService","GeocoderChannel","GeocoderChannelConstant","geocoderChannelService","GeocoderHelperConstant","handlers","exif","yahoo","mapquest_nominatim","latlon","openstreetmap_nominatim","wkt","google","kml","yandex","gpx","bing","output_formats","ewkt","wkb","ewkb","georss","google_geocode","geohash","GeocoderResource","GeocoderResourceConstant","handler","geocoderResourceService","DefinitionChannel","DefinitionChannelConstant","definitionChannelService","DefinitionResource","DefinitionResourceConstant","definitionResourceService","TaxonomyVocabularyChannel","TaxonomyVocabularyChannelConstant","pubGetTreeConfirmed","getTreeConfirmed","subGetTreeConfirmed","pubGetTreeFailed","getTreeFailed","subGetTreeFailed","unsubsSopeHandler","subRetrieveByMachineNameConfirmed","retrieveByMachineNameConfirmed","subRetrieveByMachineNameFailed","retrieveByMachineNameFailed","taxonomy_vocabularyChannelService","pubRetrieveByMachineNameConfirmed","pubRetrieveByMachineNameFailed","TaxonomyVocabularyResource","TaxonomyVocabularyResourceConstant","vid","vocabulary","tid","getTree","pathToGetTree","retrieveByMachineName","pathToRetrieveByMachineName","taxonomy_vocabularyResourceService","UserChannel","UserChannelConstant","pubTokenConfirmed","tokenConfirmed","subTokenConfirmed","pubTokenFailed","tokenFailed","subTokenFailed","pubRegisterConfirmed","registerConfirmed","subRegisterConfirmed","pubRegisterFailed","registerFailed","subRegisterFailed","pubResendWelcomeEmailConfirmed","resend_welcome_emailConfirmed","subResendWelcomeEmailConfirmed","pubResendWelcomeEmailFailed","resend_welcome_emailFailed","subResendWelcomeEmailFailed","pubCancelConfirmed","cancelConfirmed","subCancelConfirmed","pubCancelFailed","cancelFailed","subCancelFailed","pubPasswordResetConfirmed","password_resetConfirmed","subPasswordResetConfirmed","pubPasswordResetFailed","password_resetFailed","subPasswordResetFailed","pubRequestNewPasswordConfirmed","requestNewPasswordConfirmed","subRequestNewPasswordConfirmed","pubRequestNewPasswordFailed","requestNewPasswordFailed","subRequestNewPasswordFailed","userChannelService","passwordResetConfirmed","passwordResetFailed","resendWelcomeEmailConfirmed","resendWelcomeEmailFailed","UserResourceConstant","createdata","name","pass","mail","notify","register","registerPath","resendWelcomeEmail","resendWelcomeEmailPath","resend_welcome_email","cancel","cancelPath","passwordReset","passwordResetPath","password_reset","requestNewPassword","requestNewPasswordPath","request_new_password","pathToLogin","pathToLogout","pathToToken","userResourceService","ViewsChannel","ViewsChannelConstant","viewsChannelService","ViewsOperatorsConstant","sort_operators","asc","desc","filter_operators","is_less_than","is_less_than_or_equal_to","is_equal_to","is_not_equal_to","is_greater_than_or_equal_to","is_greater_than","is_between","is_not_between","regular_expression","ViewsResource","ViewsResourceConstant","_data","merge","view_name","preparedParams","preparedParamsArray","exposedFiltersFieldsWithOperators","exposed_filters","fieldName","substr","split","shift","indexOf","viewsResourceService","TaxonomyTermChannel","TaxonomyTermChannelConstant","pubSelectNodesConfirmed","selectNodesConfirmed","subSelectNodesConfirmed","pubSelectNodesFailed","selectNodesFailed","subSelectNodesFailed","taxonomy_termChannelService","TaxonomyTermResource","TaxonomyTermResourceConstant","term","selectNodes","pathToSelectNodes","taxonomy_termResourceService","SystemChannel","SystemChannelConstant","pubConnectConfirmed","connectConfirmed","subConnectConfirmed","pubConnectFailed","connectFailed","subConnectFailed","pubGetVariableConfirmed","getVariableConfirmed","subGetVariableConfirmed","pubGetVariableFailed","getVariableFailed","subGetVariableFailed","pubSetVariableConfirmed","setVariableConfirmed","subSetVariableConfirmed","pubSetVariableFailed","setVariableFailed","subSetVariableFailed","pubDelVariableConfirmed","delVariableConfirmed","subDelVariableConfirmed","pubDelVariableFailed","delVariableFailed","subDelVariableFailed","systemChannelService","SystemResourceConstant","connectPath","get_variable","getVariablePath","set_variable","setVariablePath","del_variable","delVariablePath","systemResourceService","NodeChannel","NodeChannelConstant","pubFilesConfirmed","subFilesConfirmed","pubFilesFailed","subFilesFailed","pubCommentsConfirmed","commentsConfirmed","subCommentsConfirmed","pubCommentsFailed","commentsFailed","subCommentsFailed","pubAttachFileConfirmed","attachFileConfirmed","subAttachFileConfirmed","pubAttachFileFailed","attachFileFailed","subAttachFileFailed","nodeChannelService","NodeResource","NodeResourceConstant","nid","node","files","comments","commentsPath","count","offset","attachFile","attachFilePath","field_name","attach","field_values","nodeResourceService","attach_file"],"mappings":"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","file":"ng-drupal-7-services.js","sourcesContent":[";(function () {\n  'use strict';\n\n  /**\n   * @ngdoc object\n   * @name d7-services:D7Services\n   * @description\n   * This Module bundles all ng-drupal-7-services modules\n   * @requires d7-services.commons:Commons\n   * @requires d7-services.resources:Resources\n   */\n  angular\n    .module('d7-services', [\n      'd7-services.commons',\n      'd7-services.resources'\n    ]);\n})();",";(function () {\n\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name d7-services.commons.baseChannel:BaseChannel\n   * @description\n   * An abstract notification channel.\n   * This service enables you to publish and subscribe data over events in a very fast and efficient way.\n   * @see {@link http://slides.com/michael_hladky/event-channel#/|Reacting to changes in AngularJS}\n   */\n  angular.module('d7-services.commons.baseChannel', [])\n    .factory('BaseChannel', BaseChannel);\n\n  BaseChannel.$inject = ['$rootScope'];\n\n  /** @ngInject */\n  function BaseChannel($rootScope) {\n\n    var baseChannelService = {\n      pubRootEmit: pubRootEmit,\n      subRootEmit: subRootEmit\n    };\n\n    return baseChannelService;\n\n    ////////////\n\n    /**\n     * @ngdoc method\n     * @name subRootEmit\n     * @methodOf d7-services.commons.baseChannel:BaseChannel\n     * @description\n     * subscribe for an event published over $rootScope.$emit(event, args)\n     *\n     * @param  {String} eventName - The events name\n     * @param  {Object} _Scope - The scope that calls the channels subscribe function\n     * @param  {function} scopeHandler - The callback handler normally defined in the $scopes controller or directive or service\n     * @param  {function} mapArgs - A mapper function to customize the given event arguments\n     *\n     * @return  {function} The unsubscribe function from the $rootScope.on() call\n     *\n     * @example\n     *\n     * subscribe to an event\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.commons.d7-services.commons.baseChannel'])\n     *  .controller('myController',function ($scope,BaseChannel) {\n     *    var unsubscribeHandler = BaseChannel.subRootEmit('MY_EVENT', $scope, function(args) {...}, function(args){return args;});\n     * }\n     * </pre>\n     *\n     */\n    function subRootEmit(eventName, _Scope, scopeHandler, mapArgs) {\n\n      //subscribe with rootScope to event and cache unsubscribe function\n      var unsubScopeHandler = $rootScope.$on(eventName, function (event, args) {\n        if (typeof mapArgs === 'function') {\n          scopeHandler(mapArgs(args));\n        } else {\n          scopeHandler(args);\n        }\n\n      });\n\n      //unsubscribe rootScope listener after scope destruction\n      _Scope.$on('$destroy', function () {\n        unsubScopeHandler();\n      });\n\n      //return he unsubscribe function from the $rootScope.on() call\n      return unsubScopeHandler;\n    }\n\n    /**\n     * @ngdoc method\n     * @name pubRootEmit\n     * @methodOf d7-services.commons.baseChannel:BaseChannel\n     * @description\n     * publish an event only to $rootScope using $rootScope.$emit\n     *\n     * @param  {String} eventName The events name\n     * @param  {object} args The events arguments\n     *\n     * @example\n     *\n     * publish data with event\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.commons.d7-services.commons.baseChannel'])\n     *  .controller('myController', function ($scope,BaseChannel) {\n     *    BaseChannel.pubRootEmit('MY_EVENT', {my:'args'});\n     * }\n     * </pre>\n     *\n     */\n    function pubRootEmit(eventName, args) {\n      $rootScope.$emit(eventName, args);\n    }\n\n  }\n\n})();",";\n(function () {\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name d7-services.commons.baseResource:BaseResource\n   * @description\n   * An abstract resource providing retrieve, create, update, delete and index functions.\n   * This service is used to handle the resources basic get put pust delete operations.\n   * @requires d7-services.commons.configurations:DrupalApiConstant\n   */\n  angular.module('d7-services.commons.baseResource', ['d7-services.commons.configurations'])\n    .factory('BaseResource', BaseResource);\n\n  BaseResource.$inject = ['$http', '$q'];\n\n  /** @ngInject */\n  function BaseResource($http, $q) {\n\n    var BaseResourceService = {\n      prepareGetParams: prepareGetParams,\n      preparePostData: preparePostData,\n      //base\n      request: request,\n      retrieve: retrieve,\n      create: create,\n      update: update,\n      delete: _delete,\n      index: index\n    };\n\n    return BaseResourceService;\n\n    ////////////\n\n    /**\n     * @ngdoc method\n     * @name request\n     * @methodOf d7-services.commons.baseResource:BaseResource\n     * @description\n     * Generic function for http requests that emits events on success and on error\n     *\n     * @param {Object} requestConfig - The requests url\n     * @param {Function} [pubSuccess] - The requests success publish function\n     * @param {Function} [pubError] - The requests error publish function\n     *\n     * @return {Promise} Promise of the retrieve request\n     *\n     * @example\n     * Fire a request with the request function\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.commons'])\n     *  .controller('myController',function ($scope,BaseResource) {\n     *    var requestConfig = {\n     *    \turl \t: 'path/to/resource?param=test',\n     *\t\t\tmethod \t:'GET'\n     *    };\n     *    var pubSuccess = function(success){...};\n     *    var pubError = function(error){...};\n     *\n     *    BaseResource.request().then(function(success){...}, function(error){...});\n     * }\n     * </pre>\n     */\n    function request(requestConfig, pubSuccess, pubError) {\n\n      var errors = [];\n\n      if (errors.length != 0) {\n        pubError(errors);\n        return $q.reject(errors);\n      }\n\n\n      return $http(requestConfig)\n        .success(function (responseData, status, headers, config) {\n          if (typeof pubSuccess === 'function') {\n            pubSuccess(responseData);\n          }\n\n        })\n        .error(function (responseError, status, headers, config) {\n          if (typeof pubError === 'function') {\n            pubError(responseError);\n          }\n        });\n\n    }\n\n    /**\n     * @ngdoc method\n     * @name retrieve\n     * @methodOf d7-services.commons.baseResource:BaseResource\n     * @description\n     * Generic function for drupals retrieve request. The request will use the GET operator\n     *\n     * @param {String} retrievePath - The requests url\n     * @param {Function} [pubSuccess] - The requests success publish function\n     * @param {Function} [pubError] - The requests error publish function\n     *\n     * @return {Promise} Promise of the retrieve request\n     *\n     * @example\n     * Fire a request with the retrieve function.\n     *\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.commons'])\n     *  .controller('myController',function ($scope,BaseResource) {\n     *    var requestConfig = {\n     *    \turl \t: 'path/to/resource?param=test',\n     *\t\t\tmethod \t:'GET'\n     *    };\n     *    var pubSuccess = function(success){...};\n     *    var pubError = function(error){...};\n     *\n     *    BaseResource.retrieve().then(function(success){...}, function(error){...});\n     * }\n     * </pre>\n     *\n     */\n    function retrieve(retrievePath, pubSuccess, pubError) {\n\n      var requestConfig = {\n        url: retrievePath,\n        method: 'GET'\n      };\n\n      return request(requestConfig, pubSuccess, pubError);\n\n    }\n\n    /**\n     * @ngdoc method\n     * @name create\n     * @methodOf d7-services.commons.baseResource:BaseResource\n     * @description\n     * Generic function for drupals create request. The request will use the POST operator\n     *\n     * @param {Object} data - The requests data\n     * @param {String} createPath - The requests url\n     * @param {Function} [pubSuccess] - The requests success publish function\n     * @param {Function} [pubError] - The requests error publish function\n     *\n     * @return {Promise} Promise of the create request\n     *\n     * @example\n     * Fire a request with the create function.\n     *\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.commons'])\n     *  .controller('myController',function ($scope,BaseResource) {\n     *    var data \t= {...},\n     *    \t\tpath = 'path/to/resource',\n     *    \t  pubSuccess = function(success){...},\n     *    \t  pubError = function(error){...};\n     *\n     *    BaseResource.create(data, path, pubSuccess, pubError).then(function(success){...}, function(error){...});\n     * }\n     * </pre>\n     *\n     */\n    function create(data, createPath, pubSuccess, pubError) {\n\n      var requestConfig = {\n        url: createPath,\n        method: 'POST',\n        data: data\n      };\n\n      return request(requestConfig, pubSuccess, pubError);\n    }\n\n    /**\n     * @ngdoc method\n     * @name update\n     * @methodOf d7-services.commons.baseResource:BaseResource\n     * @description\n     * Generic function for drupals update request. The request will use the PUT operator.\n     *\n     * @param {Object} data - The requests data\n     * @param {String} updatePath - The requests url\n     * @param {Function} [pubSuccess] - The requests success publish function\n     * @param {Function} [pubError] - The requests error publish function\n     *\n     * @return {Promise} Promise of the update request\n     *\n     * @example\n     * Fire a request with the update function.\n     *\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.commons'])\n     *  .controller('myController',function ($scope,BaseResource) {\n     *    var data \t= {...},\n     *    \t\tpath = 'path/to/resource',\n     *    \t  pubSuccess = function(success){...},\n     *    \t  pubError = function(error){...};\n     *\n     *    BaseResource.update(data, path, pubSuccess, pubError).then(function(success){...}, function(error){...});\n     * }\n     * </pre>\n     */\n    function update(data, updatePath, pubSuccess, pubError) {\n\n      var requestConfig = {\n        url: updatePath,\n        method: 'PUT',\n        data: data\n      };\n\n      return request(requestConfig, pubSuccess, pubError);\n    }\n\n    /**\n     * @ngdoc method\n     * @name delete\n     * @methodOf d7-services.commons.baseResource:BaseResource\n     * @description\n     * Generic function for drupals delete request. The request will use the DELETE operator.\n     *\n     * @param {String} deletePath - The requests url\n     * @param {Function} [pubSuccess] - The requests success publish function\n     * @param {Function} [pubError] - The requests error publish function\n     *\n     * @return {Promise} Promise of the delete request\n     *\n     * @example\n     * Fire a request with the delete function.\n     *\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.commons'])\n     *  .controller('myController',function ($scope,BaseResource) {\n     *    var path = 'path/to/resource',\n     *    \t  pubSuccess = function(success){...},\n     *    \t  pubError = function(error){...};\n     *\n     *    BaseResource.delete(path, pubSuccess, pubError).then(function(success){...}, function(error){...});\n     * }\n     * </pre>\n     */\n    function _delete(deletePath, pubSuccess, pubError) {\n\n      var requestConfig = {\n        url: deletePath,\n        method: 'DELETE'\n      };\n\n      return request(requestConfig, pubSuccess, pubError);\n    }\n\n\n    /**\n     * @ngdoc method\n     * @name index\n     * @methodOf d7-services.commons.baseResource:BaseResource\n     * @description\n     * Generic function for drupals delete request.\n     * The request will use the GET operator. It also formats all params for drupals index function\n     *\n     * @param {Object} data - The index retrieve data\n     * @param {String} indexPath - The requests url\n     * @param {Function} [pubSuccess] - The requests success publish function\n     * @param {Function} [pubError] - The requests error publish function\n     *\n     * @return {Promise} Promise of the delete request\n     *\n     * @example\n     * Fire a request with the index function.\n     *\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.commons'])\n     *  .controller('myController',function ($scope,BaseResource) {\n     *    var data \t= {...},\n     *    \t\tpath = 'path/to/resource',\n     *    \t  pubSuccess = function(success){...},\n     *    \t  pubError = function(error){...};\n     *\n     *    BaseResource.index(data, path, pubSuccess, pubError).then(function(success){...}, function(error){...});\n     * }\n     * </pre>\n     */\n    function index(data, indexPath, pubSuccess, pubError) {\n\n      var options = {};\n      //prepare index options\n      if (data.page !== '') {options.page = data.page}\n      if (data.pagesize) {options.pagesize = data.pagesize}\n      if (Object.keys(data.parameters).length > 0) {options.parameters = data.parameters}\n      if (Object.keys(data.fields).length > 0) {options.fields = data.fields}\n\n      if (options) {\n        indexPath += '?' + prepareIndexGetParams(options);\n      }\n\n      var requestConfig = {\n        url: indexPath,\n        method: 'GET'\n      };\n\n      return request(requestConfig, pubSuccess, pubError);\n    }\n\n    /**\n     * @ngdoc method\n     * @name prepareIndexGetParams\n     * @methodOf d7-services.commons.baseResource:BaseResource\n     * @description\n     * Prepares the options for an index request\n     *\n     * @param {Object} options - The index options.\n     * @param {integer} options.page - The pagenumber to start\n     * @param {integer} options.pagesize - The number of entries per page\n     * @param {object} options.fields - The fields to retrieve\n     * @param {object} options.parameters - The parameters in fields to search\n     *\n     * @return {String} formated params as string or empty string\n     *\n     * @example\n     * Prepare an object for drupals index request. This request is uses the GET operator\n     *\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.commons'])\n     *  .controller('myController',function ($scope,BaseResource) {\n     *    var data \t= prepareIndexGetParams({...});\n     *    \t\tpath = 'path/to/resource';\n     *\n     *    BaseResource.index(data, path);\n     * }\n     * </pre>\n     */\n    function prepareIndexGetParams(options) {\n      var type = '',\n        getParamsString = '',\n        prepaeredParams = '';\n\n      if (!options) { return ''; }\n\n      //prepare and set optional params\n      angular.forEach(options, function (value, key) {\n        if (key === 'parameters') { type = 'array_key_value'; }\n        else if (key === 'fields') { type = 'array'; }\n\n        prepaeredParams = prepareGetParams(value, key, type);\n\n        getParamsString += (getParamsString == '') ? prepaeredParams : '&' + prepaeredParams;\n\n        prepaeredParams = '';\n        type = '';\n      });\n\n      return getParamsString;\n    }\n\n    /**\n     * @ngdoc method\n     * @name preparePostData\n     * @methodOf d7-services.commons.baseResource:BaseResource\n     * @description\n     * Formats the JSON depending on format param\n     *\n     * @param {Object} values The value to format\n     * @param {String} format The new format of the value param\n     *\n     * @return {Array} formatted data\n     *\n     * @example\n     * Prepares data for request.\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.commons'])\n     *  .controller('myController',function ($scope,BaseResource) {\n     *    var data = {...},\n     *\t\t\t  format : 'array_of_keys':\n     *\n     *    var prepData = BaseResource.preparePostData(data, format);\n     *\n     *    Baseresource.create(prepData, 'path/to/api/resource')\n     * }\n     * </pre>\n     */\n    function preparePostData(values, format) {\n      var postData = undefined,\n        formats = {\n          'array_of_keys': true,\n          'array_of_values': true\n        };\n\n      //validate format\n      if (!formats[format]) { return false; }\n\n      //array\n      //example: [\"3\", \"asfasf\"],\n      if (format === 'array_of_keys' && Object.keys(values).length > 0) {\n\n        var arrayValues = [];\n        angular.forEach(values, function (value, k) {\n          if (value !== false) { this.push(k); }\n        }, arrayValues);\n        if (arrayValues.length) { postData = arrayValues; }\n        return postData;\n      }\n\n      if (format === 'array_of_values' && Object.keys(values).length > 0) {\n\n        var arrayValues = [];\n        angular.forEach(values, function (value, k) {\n          if (value !== false) { this.push(value); }\n        }, arrayValues);\n        if (arrayValues.length) { postData = arrayValues; }\n        return postData;\n      }\n\n    }\n\n\n    //key=value\n    //key=value1,value2,value3\n    //kex=objName[key]=\n\n\n    /**\n     * @ngdoc method\n     * @name prepareGetParam\n     * @methodOf d7-services.commons.baseResource:BaseResource\n     * @description\n     * Formats the JSON depending on format and key param\n     *\n     * @param {Object} values The value to format\n     * @param {String} key The name of key to use in formatted output\n     * @param {String} format The new format of the value param\n     *\n     * @return {String} formatted data\n     *\n     * @example\n     * Prepares data for request.\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.commons'])\n     *  .controller('myController',function ($scope,BaseResource) {\n     *    var data = {...},\n     *\t\t\t  format : 'array_of_keys':\n     *\n     *    var prepData = BaseResource.prepareGetParams(data, 'keyName',format);\n     *\n     *    BaseResource.retrieve(prepData, 'path/to/api/resource');\n     * }\n     * </pre>\n     */\n    function prepareGetParams(values, key, format) {\n\n      var getParams = [],\n        formats = {\n          'array': true,\n          'array_keys': true,\n          'array_key_value': true,\n          'json': true\n        };\n\n      //validate key\n      if (key) {\n        key = (key) ? key : false;\n        if (key === false) {return;}\n      } else { return; }\n\n      //validate values\n      values = (values || values === 0) ? values : undefined;\n\n      //validate values\n      if (values === undefined) {return;}\n      //if no json or length 0 and no int\n      else if (parseInt(values) == NaN) {\n        if (Object.keys(values).length <= 0) {\n          return;\n        }\n      }\n\n      //normal param\n      if (!format) {\n        if (values || values === 0) { getParams = key + '=' + values; }\n        return getParams;\n      }\n\n      //validate format\n      if (!formats[format]) { return; }\n\n      //json\n      //example: exposed_filter=value\n      if (format === 'json') {\n        angular.forEach(values, function (value, k) {\n          if (value) { getParams.push(k + '=' + value) }\n        });\n        return getParams.join('&');\n      }\n      //array\n      //example: fields=value1, vaule2, value3,\n      if (format === 'array' && Object.keys(values).length > 0) {\n\n        var arrayValues = [];\n        angular.forEach(values, function (value, k) {\n          if (value !== false) { this.push(k); }\n        }, arrayValues);\n        if (arrayValues.length) { getParams.push(key + '=' + arrayValues.join(',')); }\n        return getParams.join('&');\n      }\n      //array_keys\n      //example: exposed_filter1=key1\n      if (format === 'array_keys') {\n        angular.forEach(values, function (value, k) {\n          if (value) { getParams.push(key + '=' + k) }\n        });\n        return getParams.join('&');\n      }\n\n      //array_key_value\n      //example: parameters[key1]=value1\n      if (format === 'array_key_value') {\n\n        angular.forEach(values, function (value, k) {\n          if (value) { getParams.push(key + \"[\" + k + \"]=\" + value); }\n        });\n        return getParams.join('&');\n      }\n\n    }\n\n\n  }\n\n})();",";(function () {\n\n  'use strict';\n\n  /**\n   * @ngdoc object\n   * @name d7-services.commons:Commons\n   * @description\n   * This module bundles all modules related to the commons modules\n   * @requires d7-services.commons.authentication:AuthenticationBundle\n   * @requires d7-services.commons.http:HttpBundle\n   * @requires d7-services.commons.directives:DirectivesBundle\n   * @requires d7-services.commons.baseChannel:BaseChannel\n   * @requires d7-services.commons.baseResource:BaseResource\n   * @requires d7-services.commons.configurations:DrupalApiConstant\n   * @requires d7-services.helperService.http:DrupalHelperService\n   */\n  angular.module('d7-services.commons', [\n    'd7-services.commons.authentication',\n    'd7-services.commons.http',\n    'd7-services.commons.directives',\n    'd7-services.commons.baseChannel',\n    'd7-services.commons.baseResource',\n    'd7-services.commons.configurations',\n    'd7-services.commons.helperService']);\n\n})();",";(function () {\n    \"use strict\";\n\n    var DrupalApiConstant = {\n        // api\n        drupal_instance: \"http://your.site.name/\",\n        api_endpoint: \"api/\",\n        responseFormat: \"application/json\",\n        // - bencode: The encoding used by the BitTorrent file sharing system.\n        // - json => JavaScript Object Notation\n        // - jsonp: JSON with padding\n        // - php: Responses are encoded using the data format emitted by PHPs \"serialize()\" function\n        // - rss\n        // - xml\n        // - yaml\n\n        // By default, Drupal is configured with a session expiration time of 2000000 seconds which is 23 day 3 hr. 33 min. 20 sec\n        // To customize this install the session expire module => https://www.drupal.org/project/session_expire\n        // And also set same value here\n        session_expiration_time: 2000000,\n        session_expiration_unite: \"seconds\",\n        // paths\n        publicFilePath: \"public/\",\n        privateFilePath: \"private/\",\n        filesPath: \"sites/default/files/\",\n        imageStylesPath: \"styles/\",\n        // Drupal's predefined image styles\n        imageStyles: {\n            large: \"large\",\n            medium: \"medium\",\n            thumbnail: \"thumbnail\"\n        },\n        //\n        LANGUAGE_NONE: \"und\"\n    };\n\n    /**\n     * @ngdoc object\n     * @name d7-services.commons.configurations:DrupalApiConstant\n     * @description\n     *   Constant for the d7-services module. Holds general options, request relevant data, defaults, filter options, imagestyles and so on.\n     *\n     * @property {string} drupal_instance - The sites domain\n     * @property {string} api_endpoint - The path to the services\n     * @property {string} responseFormat - Response format of a request. @see {@link https://www.drupal.org/node/1699450|Services response formatters and request parsing}\n     * @property {Integer} session_expiration_time - The sessions lifetime. By default, Drupal is configured with a session expiration time of 2000000 seconds which is 23 day 3 hr. 33 min. 20 sec.\n     * @property {string} session_expiration_unite - Session Expriation untis (Default is seconds because Drupals default time is in seconds)\n     * @property {string} publicFilePath - path to public folder\n     * @property {string} privateFilePath - path to private folder\n     * @property {Object} imageStyles - Drupals default image styles\n     * @property {string} imageStyles.large - Large image style name\n     * @property {string} imageStyles.medium - Medium image style name\n     * @property {string} imageStyles.thumbnail - Thumbnail image style name\n     * @property {string} LANGUAGE_NONE - default language\n     *\n     * @example\n     *\n     * DrupalApiConstant is editable in config phase\n     * <pre>\n     * angular\n     *  .module(\"myModule\", [\"d7-services.commons\"])\n     *  .config(function (DrupalApiConstant) {\n     *  \n     *  //Define your drupal instance.\n     *  DrupalApiConstant.drupal_instance = 'http://your.projects.domain/';\n     *\n     *  //Override the path to your api.\n     *  //This path is defined in \"Edit Resource\" under tab \"Edit\".\n     *  DrupalApiConstant.api_endpoint += 'v1/'; // results in \"api/v1/\";\n     *\n     *  //Override the default response format. (json,jsonp,php,rss,xml,yaml,...)\n     *  //Find a list of profided fromats in \"Edit Resource\" under tab \"Server\".\n     *  DrupalApiConstant.responseFormat = \"application/json\";\n     *\n     *  //Override the default public and private folders\n     *  DrupalApiConstant.publicFilePath = \"new_public/\";\n     *  DrupalApiConstant.privateFilePath = \"new_private/\";\n     *\n     *  //Override the Drupals default path to files.\n     *  DrupalApiConstant.filesPath = \"sites/default/my_files/\";\n     *\n     *  //Override the Drupals default image styles path.\n     *  DrupalApiConstant.imageStylesPath = \"my_styles/\";\n     *\n     *  //Override the default image styles and add custom once.\n     *  DrupalApiConstant.imageStyles.large = 'modified_large';\n     *  DrupalApiConstant.imageStyles.new_style = 'new_style_name';\n     *\n     *  //Override the default language.\n     *  DrupalApiConstant.LANGUAGE_NONE = 'und';\n     * }\n     * </pre>\n     */\n    angular\n        .module(\"d7-services.commons.configurations\", [])\n        .constant(\"DrupalApiConstant\", DrupalApiConstant);\n\n\n})();\n",";(function() {\n\t'use strict';\n\n\t/**\n\t * @ngdoc service\n\t * @name d7-services.commons.helperService:DrupalHelperService\n\t * @description\n\t * An abstract resource providing retrieve, create, update, delete and index functions.\n\t * This service is used to handle the resources basic get put pust delete operations.\n\t * @requires d7-services.commons.configurations:DrupalApiConstant\n\t */\n\tangular.module('d7-services.commons.helperService', ['d7-services.commons.configurations'])\n\t\t   .factory('DrupalHelperService', DrupalHelperService);\n\n\tDrupalHelperService.$inject = ['DrupalApiConstant'];\n\n\t/** @ngInject */\n\tfunction DrupalHelperService(DrupalApiConstant) {\n\n        var drupalHelperService = {\n        \t\tgetApiPath\t\t: getApiPath,\n        \t\tgetDrupalPath\t: getDrupalPath,\n        \t\tgetPathToImgByStyle : getPathToImgByStyle,\n        \t\tstructureField \t: structureField\n        };\n        \n        return drupalHelperService;\n\n        ////////////\n\n\t\t/**\n\t\t * @ngdoc method\n\t\t * @name getApiPath\n\t\t * @methodOf d7-services.commons.helperService:DrupalHelperService\n\t\t * @description\n\t\t * Helper to get path to api\n\t\t *\n\t\t * @return {String} Path to api\n\t\t *\n\t\t * @example\n\t\t * Create path to resource\n\t\t * <pre>\n\t\t * angular\n\t\t *  .module('myModule', ['d7-services.commons'])\n\t\t *  .controller('myController',function ($scope,DrupalHelperService) {\n\t\t *    var requestConfig = {\n\t\t *    \turl \t: DrupalHelperService.getApiPath()+'resource?param=test',\n\t\t *\t\tmethod \t:'GET'\n\t\t *    };\n\t\t * }\n\t\t * </pre>\n\t\t */\n        function getApiPath() {\n        \treturn DrupalApiConstant.drupal_instance +  DrupalApiConstant.api_endpoint;\n        }\n\n\t\t/**\n\t\t * @ngdoc method\n\t\t * @name getDrupalPath\n\t\t * @methodOf d7-services.commons.helperService:DrupalHelperService\n\t\t * @description\n\t\t * Helper to get path to drupal server\n\t\t *\n\t\t * @return {String} Path to drupal server\n\t\t *\n\t\t * @example\n\t\t * Create path to resource\n\t\t * <pre>\n\t\t * angular\n\t\t *  .module('myModule', ['d7-services.commons'])\n\t\t *  .controller('myController',function ($scope,DrupalHelperService) {\n\t\t *    var DrupalHelperService.getDrupalPath()+'resource?param=test';\n\t\t * }\n\t\t * </pre>\n\t\t */\n        function getDrupalPath() {\n        \treturn DrupalApiConstant.drupal_instance;\n        }\n\n\t\t//\n\t\t/**\n\t\t * @ngdoc method\n\t\t * @name getPathToImgByStyle\n\t\t * @methodOf d7-services.commons.helperService:DrupalHelperService\n\t\t * @description\n\t\t * Helper to get full path to image style.\n\t\t *\n\t\t * @param {String} style - Path segment from you image style path with out the \"/\". (\"medium\").\n\t\t *   Image styles are configurable in constant.\n\t\t *   @see (link:d7-services.commons.configurations:DrupalApiConstant)\n\t\t * @param {String} [isPrivate] - whether the image is in your public our private folder. Default is public.\n\t\t *\n\t\t * @return {String} Path to api\n\t\t *\n\t\t * @example\n\t\t * Create path to resource\n\t\t * <pre>\n\t\t * angular\n\t\t *  .module('myModule', ['d7-services.commons'])\n\t\t *  .controller('myController',function ($scope,DrupalHelperService) {\n\t\t *\n\t\t *    var imgPath = DrupalHelperService.getPathToImgByStyle()+'image_name_0.png';\n\t\t * }\n\t\t * </pre>\n\t\t */\n        function getPathToImgByStyle(style, isPrivate) {\n\t\t\treturn  getDrupalPath() + DrupalApiConstant.filesPath+DrupalApiConstant.imageStylesPath+style+'/'+ ( (isPrivate)?DrupalApiConstant.privateFilePath:DrupalApiConstant.publicFilePath );\n        }\n        \n        \n       \n\t\t/**\n    \t * https://github.com/jbeuckm/drupal-client/blob/master/lib/field.js\n    \t * Create the basic field structure for uploading a field.\n    \t * \n    \t * Example input output \n    \t * \n    \t * String:\n    \t * IN:\n    \t * OUT: \n    \t * \n    \t * Object:\n    \t * IN: \t{ value : 'foobar foo', summary : 'foobar' } \n    \t * OUT: \t{ und : [{ value : 'foobar foo', summary : 'foobar' }]} \n    \t * \n    \t */\n        //@TODO refactore and add language support\n        function structureField(value, label, language) {\n    \t  // record optional label string\n          // default is \"value\"\n    \t  var\tprepatedData = undefined,\n    \t  \t\tlabel = label || \"value\",\n    \t  \t\tlanguage = (language !== undefined)?language:DrupalApiConstant.LANGUAGE_NONE;    \t  \n\n    \t  if (angular.isObject(value)) {\n    \t\t  prepatedData =  {};\n    \t\t  prepatedData[language] = [value];\n    \t  }\n    \t  \n    \t  return prepatedData;\n\n    \t  if (value instanceof Date) {\n\n    \t    var prepatedData = {\n    \t      value: {\n    \t        date: (value.getMonth()+1)+'/'+value.getDate()+'/'+value.getFullYear()+' - '+value.getHours()+':'+value.getMinutes()+':'+value.getSeconds()\n    \t      }\n    \t    };\n\n    \t    return {\n    \t    \tund: [\n    \t    \t   prepatedData\n    \t      ]\n    \t    };\n    \t    \n    \t  } \n    \t  \n    \t  ////\n    \t  \n    \t  \n    \t// record optional label string or default to \"value\"\n    \t  var label = label || \"value\";\n    \t  var language_key = (language)? function() {return language}:function() {return baseResourceConfig.LANGUAGE_NONE};\n\n    \t  if (angular.isArray(value)) {\n\n    \t    var field_array = [];\n    \t    for (var i= 0, l=value.length; i<l; i++) {\n    \t      var item = {};\n    \t      item[label] = value[i];\n\n    \t      field_array.push(item);\n    \t    }\n    \t    return {\n    \t      und: field_array\n    \t    };\n    \t  }\n    \t  \n    \t  if (angular.isObject(value)) {\n\n      \t    var field_array = [];\n      \t    for (var i= 0, l=value.length; i<l; i++) {\n      \t      var item = {};\n      \t      item[label] = value[i];\n\n      \t      field_array.push(item);\n      \t    }\n      \t    return {\n      \t      und: field_array\n      \t    };\n      \t  }\n    \t  \n    \t  \n    \t  if (value instanceof Date) {\n\n    \t    var obj = {\n    \t      value: {\n    \t        date: (value.getMonth()+1)+'/'+value.getDate()+'/'+value.getFullYear()+' - '+value.getHours()+':'+value.getMinutes()+':'+value.getSeconds()\n    \t      }\n    \t    };\n\n    \t    return {\n    \t    \tund: [\n    \t        obj\n    \t      ]\n    \t    };\n    \t  }\n\n    \t  // field value given with label(s) already built\n    \t  if (typeof value == \"object\") {\n    \t    return {\n    \t    \tund: [\n    \t        value\n    \t      ]\n    \t    }\n    \t  }\n    \t  \n    \t  \n        }\n        //\n\n    \t\n\t};\n\n})();",";(function () {\n  'use strict';\n\n  /**\n   * @ngdoc object\n   * @name d7-services.resources:Resources\n   * @description\n   * This Module bundles all modules related to drupals resources\n   * @requires d7-services.resources.comment:CommentBundle\n   * @requires d7-services.resources.definition:DefinitionBundle\n   * @requires d7-services.resources.file:FileBundle\n   * @requires d7-services.resources.geocoder:GoecoderBundle\n   * @requires d7-services.resources.menu:MenuBundle\n   * @requires d7-services.resources.node:NodeBundle\n   * @requires d7-services.resources.system:System\n   * @requires d7-services.resources.taxonomy_term:TaxonomyTermBundle\n   * @requires d7-services.resources.taxonomy_vocabulary:TaxonomyVocabularyBundle\n   * @requires d7-services.resources.user:UserBundle\n   * @requires d7-services.resources.views:ViewsBundle\n   *\n   */\n  angular\n    .module('d7-services.resources', [\n      'd7-services.resources.comment',\n      'd7-services.resources.definition',\n      'd7-services.resources.file',\n      'd7-services.resources.geocoder',\n      'd7-services.resources.menu',\n      'd7-services.resources.node',\n      'd7-services.resources.system',\n      'd7-services.resources.taxonomy_term',\n      'd7-services.resources.taxonomy_vocabulary',\n      'd7-services.resources.user',\n      'd7-services.resources.views'\n    ]);\n\n})();","(function () {\n  'use strict';\n\n  /**\n   * @ngdoc object\n   * @name d7-services.commons.authentication:Authentication\n   * @description\n   * This module bundles all modules related to drupal authentication resource\n   * @requires d7-services.commons.authentication.serviceConstant:AuthenticationServiceConstant\n   * @requires d7-services.commons.authentication.service:AuthenticationService\n   * @requires d7-services.commons.authentication.channelConstant:AuthenticationChannelConstant\n   * @requires d7-services.commons.authentication.channel:AuthenticationChannel\n   * @requires d7-services.commons.authentication.httpIntercepter:AuthenticationHttpIntercepter\n   */\n  angular\n    .module('d7-services.commons.authentication', [\n      'd7-services.commons.authentication.serviceConstant',\n      'd7-services.commons.authentication.channel',\n      'd7-services.commons.authentication.channelConstant',\n      'd7-services.commons.authentication.httpIntercepter',\n      'd7-services.commons.authentication.service']);\n\n})();","(function() {\n\t'use strict';\n\n\t/**\n\t * Authentication Channel Module\n\t */\n\tangular.module('d7-services.commons.authentication.channel', ['d7-services.commons.baseChannel', 'd7-services.commons.authentication.channelConstant'])\n\t\t   .factory('AuthenticationChannel', AuthenticationChannel);\n\n\t\n\t/**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t **/\n\tAuthenticationChannel.$inject = [ 'BaseChannel', 'AuthenticationChannelConstant' ];\n\t\n\t/**\n\t * Notification channel for authentication service \n\t **/\n\t/** @ngInject */\n\tfunction AuthenticationChannel(BaseChannel, AuthenticationChannelConstant) {\n\t\n\t\t//setup and return service            \t\n        var authenticationChannelService = {\n        \t\t\n    \t\t// login request\n    \t\tpubLoginConfirmed \t: pubLoginConfirmed,\n    \t\tsubLoginConfirmed\t\t: subLoginConfirmed,\n    \t\tpubLoginFailed \t\t: pubLoginFailed,\n    \t\tsubLoginFailed\t\t: subLoginFailed,\t\n        \t\n    \t\t// logout request\n    \t\tpubLogoutConfirmed \t: pubLogoutConfirmed,\n        \tsubLogoutConfirmed\t: subLogoutConfirmed,\n        \tpubLogoutFailed \t\t: pubLogoutFailed,\n        \tsubLogoutFailed\t\t: subLogoutFailed,\n        \t\n        \t// refreshConnection request\n    \t\tpubRefreshConnectionConfirmed \t: pubRefreshConnectionConfirmed,\n        \tsubRefreshConnectionConfirmed\t\t: subRefreshConnectionConfirmed,\n        \tpubRefreshConnectionFailed \t\t: pubRefreshConnectionFailed,\n        \tsubRefreshConnectionFailed\t\t: subRefreshConnectionFailed,\n        \t\n        \t// try connect to Drupal\n        \tpubTryConnectConfirmed\t: pubTryConnectConfirmed,\n        \tsubTryConnectConfirmed \t: subTryConnectConfirmed,\n        \tpubTryConnectFailed\t\t: pubTryConnectFailed,\n        \tsubTryConnectFailed \t\t: subTryConnectFailed,\n    \t\t\n        \t// Connection state updated\n    \t\tpubConnectionStateUpdated \t: pubConnectionStateUpdated,\n    \t\tsubConnectionStateUpdated\t\t: subConnectionStateUpdated,\n    \t\t\n    \t\t// Current user updated\n    \t\tpubCurrentUserUpdated\t\t: pubCurrentUserUpdated,\n    \t\tsubCurrentUserUpdated\t\t: subCurrentUserUpdated,\n        };\n        \n        return authenticationChannelService;\n\n        ////////////\n        \n        //Authentication login request functions\n        \n        /**\n\t\t * pubLoginConfirmed\n\t\t * \n\t\t * Publish the AuthenticationLoginConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubLoginConfirmed(args) {\n    \t\tvar args = args;\n    \t\t \n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.loginConfirmed, args);\n    \t};\n    \t\n    \t /**\n\t\t * subLoginConfirmed\n\t\t * \n\t\t * subscribe for the AuthenticationLoginConfirmed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subLoginConfirmed function\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationLoginConfirmed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subLoginConfirmed(_Scope, scopeHandler) {\n    \t\tvar prepArgs = function (args) {\n    \t\t\treturn args; \n    \t\t};\n    \t\t\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.loginConfirmed, _Scope, scopeHandler, prepArgs);\n    \t\t\n    \t\treturn unsubScopeHandler;\n    \t};\n    \t\n    \t//###############\n    \t\n        \n        /**\n\t\t * pubLoginFailed\n\t\t * \n\t\t * Publish the AuthenticationLoginConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubLoginFailed(args) {\n    \t\tvar args = {errors: args};\n    \t\t\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.loginFailed, args);\n    \t};\n    \t\n    \t/**\n\t\t * subLoginFailed\n\t\t * \n\t\t * subscribe for the AuthenticationLoginFailed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subLoginFailed function\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationLoginFailed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subLoginFailed(_Scope, scopeHandler) {\n    \t\tvar prepArgs = function (args) { \n    \t\t\treturn args; \n    \t\t};\n    \t\t\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.loginFailed, _Scope, scopeHandler, prepArgs);\n    \t\t\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n\n    \t//Authentication logout request functions\n\n    \t/**\n    \t * pubLogoutConfirmed\n    \t * \n    \t * Publish the AuthenticationLogoutConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubLogoutConfirmed(args) {\n    \t\tvar args = args;\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.logoutConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subLogoutConfirmed\n    \t * \n    \t * subscribe for the AuthenticationLogoutConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subLogoutConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for AuthenticationLogoutConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subLogoutConfirmed(_Scope, scopeHandler) {\n    \t\tvar prepArgs = function (args) {\n    \t\t\treturn args; \n    \t\t};\n    \t\t\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.logoutConfirmed, _Scope, scopeHandler, prepArgs);\n    \t\t\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubLogoutFailed\n    \t * \n    \t * Publish the AuthenticationLogoutConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubLogoutFailed(args) {\n    \t\tvar args = {errors: args};\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.logoutFailed, args);\n    \t};\n\n    \t/**\n    \t * subLogoutFailed\n    \t * \n    \t * subscribe for the AuthenticationLogoutFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subLogoutFailed function\n    \t * @param \t{function} scopeHandler The callback handler for AuthenticationLogoutFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subLogoutFailed(_Scope, scopeHandler) {\n    \t\tvar prepArgs = function (args) { \n    \t\t\treturn args; \n    \t\t};\n    \t\t\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.logoutFailed, _Scope, scopeHandler, prepArgs);\n    \t\t\n    \t\treturn unsubScopeHandler;\n    \t};\n    \t\n    \t//__________________________________________________________________________________________________________________________________________\n    \t\n    \t\n    \t//Authentication refresh connection request functions\n        \n        /**\n\t\t * pubRefreshConnectionConfirmed\n\t\t * \n\t\t * Publish the AuthenticationRefreshConnectionConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubRefreshConnectionConfirmed(args) {\n    \t\tvar args = args;\n    \t\t \n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.refreshConnectionConfirmed, args);\n    \t};\n    \t\n    \t /**\n\t\t * subRefreshConnectionConfirmed\n\t\t * \n\t\t * subscribe for the AuthenticationRefreshConnectionConfirmed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRefreshConnectionConfirmed function\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationRefreshConnectionConfirmed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subRefreshConnectionConfirmed(_Scope, scopeHandler) {\n    \t\tvar prepArgs = function (args) {\n    \t\t\treturn args; \n    \t\t};\n    \t\t\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.refreshConnectionConfirmed, _Scope, scopeHandler, prepArgs);\n    \t\t\n    \t\treturn unsubScopeHandler;\n    \t};\n    \t\n    \t//###############\n    \t\n        \n        /**\n\t\t * pubRefreshConnectionFailed\n\t\t * \n\t\t * Publish the AuthenticationRefreshConnectionConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubRefreshConnectionFailed(args) {\n    \t\tvar args = {errors: args};\n    \t\t\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.refreshConnectionFailed, args);\n    \t};\n    \t\n    \t/**\n\t\t * subRefreshConnectionFailed\n\t\t * \n\t\t * subscribe for the AuthenticationRefreshConnectionFailed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRefreshConnectionFailed function\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationRefreshConnectionFailed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subRefreshConnectionFailed(_Scope, scopeHandler) {\n    \t\tvar prepArgs = function (args) { \n    \t\t\treturn args; \n    \t\t};\n    \t\t\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.refreshConnectionFailed, _Scope, scopeHandler, prepArgs);\n    \t\t\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n\n    \t\n    \t//try connect request functions\n        \n        /**\n\t\t * pubTryConnectConfirmed\n\t\t * \n\t\t * Publish the AuthenticationTryConnectConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubTryConnectConfirmed(args) {\n    \t\tvar args = args;\n    \t\t \n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.tryConnectConfirmed, args);\n    \t};\n    \t\n    \t /**\n\t\t * subTryConnectConfirmed\n\t\t * \n\t\t * subscribe for the AuthenticationTryConnectConfirmed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subTryConnectConfirmed function\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationTryConnectConfirmed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subTryConnectConfirmed(_Scope, scopeHandler) {\n    \t\tvar prepArgs = function (args) {\n    \t\t\treturn args; \n    \t\t};\n    \t\t\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.tryConnectConfirmed, _Scope, scopeHandler, prepArgs);\n    \t\t\n    \t\treturn unsubScopeHandler;\n    \t};\n    \t\n    \t//###############\n    \t\n        \n        /**\n\t\t * pubTryConnectFailed\n\t\t * \n\t\t * Publish the AuthenticationTryConnectConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubTryConnectFailed(args) {\n    \t\tvar args = {errors: args};\n    \t\t\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.tryConnectFailed, args);\n    \t};\n    \t\n    \t/**\n\t\t * subTryConnectFailed\n\t\t * \n\t\t * subscribe for the AuthenticationTryConnectFailed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subTryConnectFailed function\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationTryConnectFailed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subTryConnectFailed(_Scope, scopeHandler) {\n    \t\tvar prepArgs = function (args) { \n    \t\t\treturn args; \n    \t\t};\n    \t\t\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.tryConnectFailed, _Scope, scopeHandler, prepArgs);\n    \t\t\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n        \n        /**\n\t\t * pubConnectionStateUpdated\n\t\t * \n\t\t * Publish the ConnectionStateUpdated updated event with given args\n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubConnectionStateUpdated(args) {\n    \t\tvar args = args;\n    \t\t\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.connectionStateUpdated, args);\n    \t};\n    \t\n    \t /**\n\t\t * subConnectionStateUpdated\n\t\t * \n\t\t * subscribe for the ConnectionStateUpdated event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subConnectConfirmed function\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationConnectConfirmed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subConnectionStateUpdated(_Scope, scopeHandler) {\n    \t\tvar prepArgs = function (args) {\n    \t\t\treturn args; \n    \t\t};\n    \t\t\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.connectionStateUpdated, _Scope, scopeHandler, prepArgs);\n    \t\t\n    \t\treturn unsubScopeHandler;\n    \t};\n    \t\n    \t//###############\n    \t\n        \n        /**\n\t\t * pubCurrentUserUpdated\n\t\t * \n\t\t * Publish the CurrentUserUpdated event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubCurrentUserUpdated(args) {\n    \t\tvar args = args;\n\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.currentUserUpdated, args);\n    \t};\n    \t\n    \t/**\n\t\t * subCurrentUserUpdated\n\t\t * \n\t\t * subscribe for the CurrentUserUpdated event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subConnectFailed function\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationConnectFailed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subCurrentUserUpdated(_Scope, scopeHandler) {\n    \t\tvar prepArgs = function (args) { \n    \t\t\treturn args; \n    \t\t};\n    \t\t\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.currentUserUpdated, _Scope, scopeHandler, prepArgs);\n    \t\t\n    \t\treturn unsubScopeHandler;\n    \t};\n    \t\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n\t};\n\n})();","(function() {\n    'use strict';\n\n    /**\n\t *  Constants for AuthenticationChannel \n\t *  \n\t *  NOTE: if you want to change this constant do this in your app.js config section\n\t**/\n\tvar AuthenticationChannelConstant =  {\n\t\t\n\t\tloginConfirmed  : 'event:drupal-authService-loginConfirmed',\n\t\tloginFailed  \t: 'event:drupal-authService-loginFailed',\n\t\t\n\t\tlogoutConfirmed  \t: 'event:drupal-authService-logoutConfirmed',\n\t\tlogoutFailed  \t\t: 'event:drupal-authService-logoutFailed',\n\t\t\n\t\trefreshConnectionConfirmed  \t: 'event:drupal-authService-refreshConnectionConfirmed',\n\t\trefreshConnectionFailed  \t\t: 'event:drupal-authService-refreshConnectionFailed',\n\t\t\n\t\ttryConnectConfirmed \t: 'event:drupal-authService-tryConnectConfirmed',\n\t\ttryConnectFailed \t\t: 'event:drupal-authService-tryConnectFailed',\n\t\t\n\t\tconnectionStateUpdated  \t: 'event:drupal-authService-connectionStateUpdated',\n\t\t\n\t\tcurrentUserUpdated\t\t\t: 'event:drupal-authService-currentUserUpdated'\n\t\t\t\n\t};\n    \n\t/**\n\t * API authentication channel constant\n\t */\n\tangular\n\t.module('d7-services.commons.authentication.channelConstant', [])\n\t    .constant(\"AuthenticationChannelConstant\", AuthenticationChannelConstant);\n\n})();","(function() {\n\t'use strict';\n\n\t\n\t/**\n\t * Drupal request intercepter Module for the requests Accept attribute\n\t */\n\tangular.module('d7-services.commons.authentication.httpIntercepter', ['d7-services.commons.authentication.service'])\n\t\t   .factory('AuthenticationHttpInterceptor', AuthenticationHttpInterceptor);\n\n\t/**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t **/\n\tAuthenticationHttpInterceptor.$inject = [ '$injector'];\n\t\n\t/**\n\t * HTTP Intercepter for Accept attribute of HTTP-Requests\n\t **/\n\t/** @ngInject */\n\tfunction AuthenticationHttpInterceptor($injector) {\n\t\t\n\t\t//setup and return service            \t\n        var intercepter = {\n        \trequest \t: doRequestCongiguration,\n        };\n        \n        return intercepter;\n\n        ////////////\n        \n        //request function\n        \n        /**\n\t\t * request\n\t\t * \n\t\t * Intercepts a request and sets the Accept attribute \n\t     *\n\t\t * @param \t{Object} config The requests config object \n\t\t * \n\t\t * @return  {Object} The edited config object\n\t\t * \n\t\t**/\n        function doRequestCongiguration (config) {\n\t        var tokenHeaders = null;\n \n\t        // Need to manually retrieve dependencies with $injector.invoke\n\t        // because Authentication depends on $http, which doesn't exist during the\n\t        // configuration phase (when we are setting up interceptors).\n\t        // Using $injector.invoke ensures that we are provided with the\n\t        // dependencies after they have been created.\n\t        $injector.invoke(['AuthenticationService', function (AuthenticationService) {\n\t            tokenHeaders = AuthenticationService.getAuthenticationHeaders();\n\t            \n\t        }]);\n\n\t        //add headers___________________________________________________________________\n\t        \n\t        //add Authorisation and X-CSRF-TOKEN if given\n\t        if (tokenHeaders) {\n\t            angular.extend(config.headers, tokenHeaders);\n\t        }\n\t        \n\t        //add flags_____________________________________________________________________\n\t        \n\t        //add withCredentials to every request\n\t        //needed because we send cookies in our request headers\n\t        config.withCredentials = true;\n\n\t        return config;\n        };\n    \t\n\t};\n\n})();","(function() {\n    'use strict';\n\n    /**\n     * Drupal API authentication service\n    **/\n    angular.module('d7-services.commons.authentication.service', \n    \t\t[ 'd7-services.commons.configurations'\n    \t\t  ,'d7-services.commons.authentication.serviceConstant'\n    \t\t  ,'d7-services.commons.authentication.channel'\n    \t\t  ,'d7-services.resources.system.resource'\n    \t\t  ,'d7-services.resources.user.resource'\n    \t\t  ,'ngCookies'\n    \t\t ])\n    \n    /**\n\t * AuthenticationService\n\t * \n\t * This service mirrors the Drupal system resource of the services 3.x module.\n\t * To use this you have to set following line in your Drupal CORS module settings\n\t * your_api_endpoint/system/*|<mirror>|POST|Content-Type,Authorization|true\n\t * \n\t**/\n    .factory('AuthenticationService', AuthenticationService);\n   \n    /**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t**/\n    AuthenticationService.$inject = ['$rootScope', 'DrupalApiConstant', 'AuthenticationServiceConstant', 'AuthenticationChannel', 'SystemResource', 'UserResource', '$cookies', '$http', '$q'];\n    \n    /**\n     * ApiAuthService\n     * \n     * This service mirrors the Drupal system resource of the services 3.x module.\n     * To use this you have to set following line in your Drupal CORS module settings\n     * your_api_endpoint/system/*|<mirror>|POST|Content-Type,Authorization|true\n     * \n    **/\n\t/** @ngInject */\n\tfunction AuthenticationService( $rootScope, DrupalApiConstant, AuthenticationServiceConstant, AuthenticationChannel, SystemResource, UserResource, $cookies, $http, $q ) { \n\t\n\t\t\t//we set this to undefined because we wan't to detect the first connection check \n\t\tvar userIsConected,\n\t\t\tcurrentUser\t = AuthenticationServiceConstant.anonymousUser,\n\t\t\t// time of last successful connection in ms\n\t\t\tlastConnectTime  = 0,\n\t\t\t//auth token rendered as Authentication headers\n\t\t\tauthenticationHeaders,\n\t\t\t//session data\n\t\t\tsessid = null,\n\t\t\tsession_name = null,\n\t\t\tsessionCookieOptions =  { \t\n\t\t\t\tdomain \t\t\t: DrupalApiConstant.drupal_instance,\n\t\t\t\tpath\t\t\t: '/',\n\t\t\t\t//secure \t\t\t: false,\n\t\t\t\t//expires\t\t\t: DrupalApiConstant.session_expiration_time,\n\t\t\t\t//expirationUnit \t: DrupalApiConstant.session_expiration_unite,\n\t\t\t};\n\t\t\n\t\t//setup and return service        \n        var authenticationService = {\n        \t\tisUser\t\t\t: isUser,\n        \t\tisAuthorized \t: isAuthorized,\n        \t\tlogin\t\t\t: login,\n    \t\t\tlogout\t\t\t: logout,\n    \t\t\trefreshConnection\t\t\t: refreshConnection,\n    \t\t\tgetLastConnectTime\t\t\t: getLastConnectTime,\n    \t\t\tgetConnectionState\t\t\t: getConnectionState,\n    \t\t\tgetAuthenticationHeaders \t: getAuthenticationHeaders,\n    \t\t\tgetCurrentUser\t\t\t\t: getCurrentUser\n        };\n        \n        return authenticationService;\n\n        ////////////\n        \n        /**\n         * isUser\n         * \n         * @param {Object} user or uid The user objcet or uid\n         * \n         * @returns {Boolean} true if uid is equal false if not\n         * \n         */\n        function isUser(userOrUid) {       \t\n\t\t\t\n\t\t\tvar currentUser = getCurrentUser();\n\t\t\t\n\t\t\tif(angular.isObject(userOrUid)) {\n\t\t\t\tif(userOrUid.uid == currentUser.uid) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t\n\t\t\tif(userOrUid == currentUser.uid) {\n\t\t\t\treturn true;\n\t\t\t}\n\t   \t     \n\t        return false;\n        };\n        \n        /**\n         * isAuthorized\n         * \n         * @param {Object} accessLevel The access level to check for\n         * @param {Object} roles The role to check with. If roles is not gives the users roles will be taken\n         * \n         * @returns {Boolean} true if authorized false if not\n         * \n         */\n        function isAuthorized(accessLevelRoles, userRoles) {       \t\n\t\t\tvar isGranted = false,\n\t\t\t\tcurrentUser = getCurrentUser();\n\n\t\t\tif(userRoles === undefined ) {\n\t\t\t\tuserRoles = currentUser.roles; \n\t\t\t}\t\n\t\t\t\n\t\t\t//check by accessLevel and optional given roles\n\t\t\tif(accessLevelRoles == '*') { return true; }\n\t\t\t\n\t\t\tif(!angular.isArray(accessLevelRoles)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < accessLevelRoles.length; i++) {\n\t\t\t\tfor (var prop in userRoles) {\n\t\t\t\t\tif(accessLevelRoles[i][prop] === userRoles[prop]) {\n\t\t\t\t\t\t return true;\n\t\t\t\t\t}\n\t\t\t\t }\n\t\t\t}\n\t   \t     \n\t         return false;\n        };\n\t\t\n\t\t/**\n\t\t * login\n\t\t * \n\t\t * Uses the login request of the user resource and saves session data on success\n\t\t * \n\t\t**/\n\t\tfunction login(loginData) {\n\n\t\t\treturn UserResource\n\t\t\t\t\t.login(loginData)\n\t\t\t\t\t\t.success(function (responseData, status, headers, config) {\n\t\t\t\t\t\t\tsetAuthenticationHeaders(responseData.token);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tsetLastConnectTime(Date.now());\n\t\t\t\t\t\t\tsetConnectionState((responseData.user.uid === 0)?false:true)\n\t\t\t\t\t\t\tsetCookies(responseData.sessid, responseData.session_name);\n\t\t\t\t\t\t\tsetCurrentUser(responseData.user);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tAuthenticationChannel.pubLoginConfirmed(responseData);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.error(function (responseError, status, headers, config) {\n\t\t\t\t\t\t\tAuthenticationChannel.pubLoginFailed(responseError);\n\t\t\t\t\t\t});\n\t\t\t\n\t\t};\n\t\t\n\t\t/**\n\t\t * logout\n\t\t * \n\t\t * Uses the logout request of the user resource and deletes session data on success\n\t\t * \n\t\t * @return {Promise} requests promise\n\t\t**/\n\t\tfunction logout() {\n\t\t\t\n\t\t\treturn UserResource\n\t\t\t\t\t.logout()\n\t\t\t\t\t\t.success(function (responseData, status, headers, config) {\n\t\t\t\t\t\t\tdelAuthenticationHeaders();\n\t\t\t\t\t\t\tdelCookies();\n\t\t\t\t\t\t\tsetConnectionState(false);\n\t\t\t\t\t\t\tsetCurrentUser(AuthenticationServiceConstant.anonymousUser);\n\n\t\t\t\t\t\t\tAuthenticationChannel.pubLogoutConfirmed(responseData);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.error(function (responseError, status, headers, config) {\n\t\t\t\t\t\t\tAuthenticationChannel.pubLogoutFailed(responseError);\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t};\n\t\t\n\t\t/**\n\t\t * refreshConnection\n\t\t * \n\t\t * @TODO write doc\n\t\t * \n\t\t * @return {Promise} with new token \n\t\t *  \n\t\t**/\n\t\tfunction refreshConnection() {\n\t\t\tvar defer = $q.defer();\n\n\t\t\t//check token\n\t\t\trefreshTokenFromServer()\n\t\t\t\t.then(\n\t\t\t\tfunction(response) {\n\t\t\t\t\t//check connection\n\t\t\t\t\treturn tryConnect()\n\t\t\t\t\t\t.success(function(responseData, status, headers, config) {\n\t\t\t\t\t\t\tAuthenticationChannel.pubRefreshConnectionConfirmed(responseData);\n\t\t\t\t\t\t\tdefer.resolve(responseData.data);\n\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t)\n\t\t\t\t.catch(\n\t\t\t\tfunction(responseError) {\n\t\t\t\t\tconsole.log('error', responseError);\n\t\t\t\t\tAuthenticationChannel.pubRefreshConnectionFailed(responseError);\n\t\t\t\t\t//offline fix\n\t\t\t\t\tsetLastConnectTime(1);\n\t\t\t\t\tdefer.resolve(responseError);\n\t\t\t\t}\n\t\t\t);\n\t\t\t \n\t\t\treturn defer.promise; \n\t\t\t\t\t\t\n\t\t};\n\t\t\n\t\t/**\n\t\t * tryConnect\n\t\t * \n\t\t * @TODO write doc\n\t\t * \n\t\t * @returns\n\t\t */\n\t\tfunction tryConnect() {\n\t\t\t\n\t\t\t return SystemResource\n\t\t\t \t\t\t.connect()\n\t\t\t\t \t\t\t.success( function (responseData, status, headers, config) {\n\t\t\t\t\t             setLastConnectTime(Date.now());\n\t\t\t\t\t             setCookies(responseData.sessid, responseData.session_name);\n\t\t\t\t\t             setConnectionState((responseData.user.uid === 0)?false:true)\n\t\t\t\t\t             setCurrentUser(responseData.user);\n\t\t\t\t\t              \n\t\t\t\t\t             AuthenticationChannel.pubTryConnectConfirmed(responseData);  \n\t\t\t\t            })\n\t\t\t\t            .error(function(responseError, status, headers, config) {\n\t\t\t\t            \tAuthenticationChannel.pubTryConnectFailed(responseError);\n\t\t\t\t            });\n\t\t\t\t\t\t \t\n\t\t}\n\t\t\n\t\t/**\n\t\t * refreshTokenFromServer\n\t\t * \n\t\t * request a new token from server => api_endpoint/user/token\n\t\t * \n\t\t * @return {Promise} with new token \n\t\t *  \n\t\t**/\n\t\tfunction refreshTokenFromServer() {\n\n\t\t\treturn UserResource\n\t\t\t\t\t.token()\n\t\t\t\t\t\t.success(function(responseData, status, headers, config) {\n\t\t\t\t\t\t\t\t\tsetAuthenticationHeaders(responseData.token);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t.error(function(responseError) {\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t});\t\n\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * getCurrentUser\n\t\t * \n\t\t * Returns the current authenticated user\n\t\t * \n\t\t * @return {Object} user as JSON\n\t\t * \n\t\t**/\n\t\tfunction getCurrentUser() { return currentUser; };\n\n\t\t/**\n\t\t * setCurrentUser\n\t\t * \n\t\t * Sets the current loggend in user\n\t\t * \n\t\t**/\n\t\tfunction setCurrentUser(newUser) {\n\t\t\tif(currentUser != newUser) {\n\t        \tcurrentUser = newUser;\n\t      \t    AuthenticationChannel.pubCurrentUserUpdated(newUser);\n\t        }\n\t\t};\n\t\t\n\t\t/**\n\t\t * getConnectionState\n\t\t * \n\t\t * Returns the current state of connection\n\t\t * \n\t\t * @return {Boolean} userIsConected\n\t\t * \n\t\t**/\n\t\tfunction getConnectionState() { return (userIsConected)?true:false; };\n\t\n\t\t/**\n\t\t * setConnectionState\n\t\t * \n\t\t * Sets the current state of connection as boolean\n\t\t * \n\t\t**/\n\t\tfunction setConnectionState(newState) {\n\t\t\tnewState = (newState)?true:false;\n\t\t\t\n\t        if(newState !== userIsConected) {\n\t          userIsConected = newState;\n\t      \t  AuthenticationChannel.pubConnectionStateUpdated(userIsConected);\n\t        }\n\t\t};\n\t\t\n\t\t/**\n\t\t * getAuthenticationHeaders\n\t\t * \n\t\t * Returns the saved authentication header obj\n\t\t * \n\t\t * @return  {Object} authentication header\n\t\t * \n\t\t**/\t\n        function getAuthenticationHeaders() { return authenticationHeaders; };\n\n\n        /**\n\t\t * setAuthenticationHeaders\n\t\t * \n\t\t * Sets the authentication header as obj if different from actual value.\n\t\t * After this action the commons.authentication.AuthenticationHeaderInterceptor add's Authorisation and X-CSRF-Token headers to request\n\t\t * \n\t\t * @param {String} X-CSRF-TOKEN value\n\t\t * \n\t\t**/\n        function setAuthenticationHeaders(newToken) {\n       \n        \tvar newData = { \n\t\t\t\t\t'Authorization' : newToken,\n\t\t\t\t\t'X-CSRF-TOKEN'  : newToken\n\t\t\t};\n        \t\n        \t//if header data exist check if they are different.\n        \t//if they are different set them\n        \tif(authenticationHeaders) {\n        \t\tif(authenticationHeaders.Authorization != newToken) {\n        \t\t\tauthenticationHeaders = newData;\n        \t\t}\n        \t} \n        \t//if header data not exist set them\n        \telse {\n        \t\tauthenticationHeaders = newData;\n        \t}\n        \t\n        };\n        \n        /**\n\t\t * delAuthenticationHeaders\n\t\t * \n\t\t * Deletes the authentication headers from service\n\t\t * After this action the http intercepter will not add Authorisation and X-CSRF-Token headers to request\n\t\t * \n\t\t**/\n        function delAuthenticationHeaders() {\n        \t authenticationHeaders = null;\n        };\n        \n        /**\n\t\t * getCookies\n\t\t * \n\t\t * Returns the saved cookie data\n\t\t * \n\t\t * @return  {String} cookie data\n\t\t * \n\t\t**/\n        function getCookies() {\n        \treturn session_name+\"=\"+sessid;\n        };\n\n        /**\n\t\t * setCookies\n\t\t * \n\t\t * Saves the session id and name in service and cookies\n\t\t * \n\t\t * \n\t\t**/\n        function setCookies(newSessid, newSession_name) {\t\n        \t//save data in service\n        \tsessid = newSessid;\n\t\t\tsession_name = newSession_name;\n\t\t\t\n\t\t\t//store session cookies\n\t\t\t//$cookies[data.session_name] = data.sessid;\n\t\t\t$cookies.put(newSession_name, newSessid, sessionCookieOptions);\t\n        };\n        \n        /**\n\t\t * delCookies\n\t\t * \n\t\t * Deletes the cookie from service and cookies \n\t\t * \n\t\t**/\n        function delCookies() {\n        \t//delete data in service\n        \tsessid = null;\n\t\t\tsession_name = null;\n\t\t\t\n        \t//delete session cookies\n\t\t\t$cookies.remove(session_name, sessionCookieOptions.path);\n        };\n\t\t\n\t\t/**\n\t\t * getLastConnectTime\n\t\t * \n\t\t * Returns the time of last successful connection in ms\n\t\t * \n\t\t * @return time in ms\n\t\t * \n\t\t**/\n\t\tfunction getLastConnectTime() { return lastConnectTime; };\n\t\t\n\t\t/**\n\t\t * setLastConnectTime\n\t\t * \n\t\t * Sets the time of last successful connection in ms\n\t\t * \n\t\t**/\n\t\tfunction setLastConnectTime(newTimeInMs) {\n\t\t\tvar newTimeInMs = parseInt(newTimeInMs);\n\t\t\tif(newTimeInMs === NaN || newTimeInMs < 0) return;\n\t\t\tlastConnectTime = newTimeInMs;\n\t\t};\n\t\t\n\n\t};\n\n})();\n","(function() {\n    'use strict';\n\n    /**\n\t *  Constants for authenticationService \n\t *  \n\t *  NOTE: if you want to change this constant do this in your app.js config section\n\t**/\n    \n    //setup constant\n    \n    //default roles\n    var anonymous_user \t\t= { \n\t    \t\t\t\t\t'id' \t: 1,\n\t\t\t\t    \t\t'role' \t: \"anonymous user\"\n\t\t\t\t    \t\t},\n\t\tauthenticated_user = { \n\t\t\t\t\t\t\t'id' \t: 2,\n\t\t\t\t    \t\t'role' \t: \"authenticated user\"\n\t\t\t\t    \t\t},\n\t    administrator \t\t= { \n\t\t\t\t\t\t\t\t'id' \t: 3,\n\t\t\t\t\t    \t\t'role' \t: \"administrator\"\n\t\t\t\t\t    \t};\n    //default access levels\n\tvar publicLevel = \"*\",\n\t\tanonLevel = {},\n\t\tuserLevel = {},\n\t\tadminLevel = {};\n\t\t\n\t\tanonLevel[anonymous_user.id] \t\t= anonymous_user.role;\n\t\tuserLevel[authenticated_user.id] \t= authenticated_user.role;\n\t\tadminLevel[administrator.id ] \t\t= administrator.role;\n\t\t\t\n\tvar\tAuthenticationServiceConstant =  {\n\t\t\t//the drupals guest user obj\n\t\t\tanonymousUser : {\n\t\t\t\t\t\"uid\"\t\t: 0,\n\t\t\t\t\t\"roles\"\t\t: {},\n\t\t\t\t\t\"cache\"\t\t: 0,\n\t\t\t\t\t\"timestamp\"\t: Date.now()\n\t\t\t},\n\t\t\t//default drupal roles key is role id\n\t   \t\troles : {},\n\t        //default access levels\n\t        //here you can grand access for role groups\n\t        accessLevels : {\n\t            'public' : publicLevel,\n\t            'anon':  [anonLevel],\n\t            'user' : [userLevel],\n\t            'admin': [adminLevel]\n\t        }\t\n    };\n    \n    AuthenticationServiceConstant.anonymousUser.roles[anonymous_user.id] = anonymous_user.role;\n    \n    AuthenticationServiceConstant.roles[anonymous_user.id] = anonymous_user.role;\n\tAuthenticationServiceConstant.roles[authenticated_user.id] = authenticated_user.role;\n\tAuthenticationServiceConstant.roles[administrator.id] = administrator.role;\n\t\n\t/**\n\t * API authentication service constant\n\t**/\n\tangular\n\t    .module('d7-services.commons.authentication.serviceConstant', [])\n\t    .constant(\"AuthenticationServiceConstant\", AuthenticationServiceConstant);\n\n})();",";(function() {\n    'use strict';\n\n    /**\n     * @ngdoc object\n     * @name d7-services.commons.directives:Directives\n     * @description\n     * This module bundles all modules related to the commons directives\n     * @requires d7-services.commons.directives.toggleByAccesslevel:toggleByAccesslevel\n     */\n    angular.module('d7-services.commons.directives', \n    \t\t['d7-services.commons.directives.toggleByAccesslevel']);\n\n})();",";(function() {\n    'use strict';\n\n    angular\n        .module('d7-services.commons.directives.toggleByAccesslevel', ['d7-services.commons.authentication.channel', 'd7-services.commons.authentication.service'])\n        .directive('toggleByAccesslevel', toggleByAccesslevel);\n\n    /**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t **/\n    toggleByAccesslevel.$inject = ['AuthenticationChannel', 'AuthenticationService'];\n\n    /** @ngInject */\n    function toggleByAccesslevel(AuthenticationChannel, AuthenticationService) {\n\n        return {\n        \trestrict: 'A',\n        \t\n            link: function($scope, element, attrs) {\n            \n            \t$scope.user = AuthenticationService.getCurrentUser();\n            \t\n            \tvar prevDisp = element.css('display')\n                    , userRoles = $scope.user.roles \n                    , accessLevel,\n                    toggleAction;\n            \t\n            \tif(attrs.toggleAction !== 'hide' && attrs.toggleAction !== 'show') {\n            \t\ttoggleAction = \"hide\";\n            \t} else {\n            \t\ttoggleAction = attrs.toggleAction;\n            \t}\n\n                AuthenticationChannel.subCurrentUserUpdated($scope, currentUserUpdatedHandler);\n\n                attrs.$observe('toggleByAccesslevel', function(al) {\n                \tvar parsed = [];\n                    if(al) \n                    {\n                    \taccessLevel = $scope.$eval(al);\n                \t}\n                    \n                    updateCSS();\n                });\n\n                ///////////////////////////////////////////////////\n                \n                //hide or shoe elem by toggleAction\n                function updateCSS() {\n\n                    if(userRoles && accessLevel) {\n\n                    \tif(toggleAction == 'hide') {\n                    \t\t\n                    \t\tif(!AuthenticationService.isAuthorized(accessLevel))\n                                element.css('display', 'none');\n                            else\n                                element.css('display', prevDisp);\n                    \t} \n                    \telse if(toggleAction == 'show') {\n                    \t\t\n                    \t\tif(!AuthenticationService.isAuthorized(accessLevel))\n                    \t\t\telement.css('display', prevDisp);\n                            else\n                            \telement.css('display', 'none');\n                    \t}\n                    \t\n                        \n                    }\n                };\n                \n                function currentUserUpdatedHandler(user){\n                \t$scope.user = user;\n                    userRoles = $scope.user.roles;\n                    updateCSS();\n                };\n                \n            }\n        };\n        \n        \n    };\n\n\n})();",";(function() {\n\t'use strict';\n\n\t/**\n\t * @ngdoc object\n\t * @name d7-services.commons.http:Http\n\t * @description\n\t * This module bundles all modules related to drupal comment resource\n\t * @requires d7-services.commons.http.configurations:HttpConfigurations\n\t * @requires d7-services.commons.http.intercepter.requestAccept:RequestIntercepterAccept\n\t */\n\tangular.module('d7-services.commons.http', \n\t\t\t['d7-services.commons.http.configurations', \n\t\t\t 'd7-services.commons.http.intercepter.requestAccept']);\n\t\n})();",";(function() {\n\t'use strict';\n\n\t/**\n\t * Drupal request intercepter Module for the requests Content-Type attribute\n\t */\n\tangular.module('d7-services.commons.http.configurations', ['d7-services.commons.http.intercepter.requestAccept', 'd7-services.commons.authentication.httpIntercepter'])\n\t\t   .config(hTTPConfigurations);\n\n\thTTPConfigurations.$inject = [ '$httpProvider' ];\n\t\n\t\n\t/**\n\t * HTTP Intercepter for Content-Type attribute of HTTP-Requests\n\t **/\n\t/** @ngInject */\n\tfunction hTTPConfigurations( $httpProvider ) {\n\t\t//request Content-Type attribute\n\t\t$httpProvider.interceptors.push('RequestIntercepterAccept');\n\t\t$httpProvider.interceptors.push('AuthenticationHttpInterceptor');\n\t};\n\n})();","(function() {\n\t'use strict';\n\n\t/**\n\t * Drupal request intercepter Module for the requests Accept attribute\n\t */\n\tangular.module('d7-services.commons.http.intercepter.requestAccept', ['d7-services.commons.configurations', 'd7-services.resources.file.resourceConstant'])\n\t\t   .factory('RequestIntercepterAccept', RequestIntercepterAccept);\n\n\t\n\t\n\t\n\t/**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t **/\n\tRequestIntercepterAccept.$inject = [ '$injector'];\n\t\n\t/**\n\t * HTTP Intercepter for Accept attribute of HTTP-Requests\n\t **/\n\t/** @ngInject */\n\tfunction RequestIntercepterAccept($injector) {\n\t\t\n\t\t//setup and return service            \t\n        var intercepter = {\n        \trequest \t: request,\n        };\n        \n        return intercepter;\n\n        ////////////\n        \n        //request function\n        \n        /**\n\t\t * request\n\t\t * \n\t\t * Intercepts a request and sets the request attribute \n\t     *\n\t\t * @param \t{Object} config The requests config object \n\t\t * \n\t\t * @return  {Object} The edited config object\n\t\t * \n\t\t**/\n        function request(config){\n\n        \t\n        \t$injector.invoke(['DrupalApiConstant', 'FileResourceConstant', function (DrupalApiConstant, FileResourceConstant) {\n        \t       \t\t\n        \t\tconfig.headers['Accept'] = DrupalApiConstant.responseFormat;\n        \t\t\n        \t\tif(!(config.method == 'POST' && config.url == DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + FileResourceConstant.resourcePath)) {\n    \t        \tconfig.headers['Content-Type'] = DrupalApiConstant.responseFormat;\n        \t\t}\n        \t\t\n\t        \t\n \t         \t\n \t        }]);\n\n\t\t\treturn config;\n        };\n    \t\n\t};\n\n})();",";(function() {\n    'use strict';\n\n\t/**\n\t * @ngdoc object\n\t * @name d7-services.resources.comment:Comment\n\t * @description\n\t * This module bundles all modules related to drupal comment resource\n\t * @requires d7-services.resources.comment.resourceConstant:CommentResourceConstant\n\t * @requires d7-services.resources.comment.resource:CommentResource\n\t * @requires d7-services.resources.comment.channelConstant:CommentChannelConstant\n\t * @requires d7-services.resources.comment.channel:CommentChannel\n\t */\n\tangular\n\t    .module('d7-services.resources.comment', \n\t    \t\t['d7-services.resources.comment.resourceConstant', \n\t    \t\t 'd7-services.resources.comment.resource', \n\t    \t\t 'd7-services.resources.comment.channelConstant', \n\t    \t\t 'd7-services.resources.comment.channel']);\n})();",";(function() {\n\t'use strict';\n\n\t/**\n\t * Comment Channel Module\n\t */\n\tangular.module('d7-services.resources.comment.channel', ['d7-services.commons.baseChannel', 'd7-services.resources.comment.channelConstant'])\n\t\t   .factory('CommentChannel', CommentChannel);\n\n\t\n\t/**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t **/\n\tCommentChannel.$inject = [ 'BaseChannel', 'CommentChannelConstant' ];\n\t\n\t/**\n\t * Notification channel for comment resource \n\t**/\n\t\n\t/** @ngInject */\n\tfunction CommentChannel(BaseChannel, CommentChannelConstant) {\n\t\n\t\t//setup and return service            \t\n        var commentChannelService = {\n        \t\t\n        \t//comment retrieve request\n    \t\tpubRetrieveConfirmed \t: pubRetrieveConfirmed,\n    \t\tsubRetrieveConfirmed\t: subRetrieveConfirmed,\n    \t\tpubRetrieveFailed \t\t: pubRetrieveFailed,\n    \t\tsubRetrieveFailed\t\t: subRetrieveFailed,\n    \t\t\n        \t//comment create request\n        \tpubCreateConfirmed \t\t: pubCreateConfirmed,\n        \tsubCreateConfirmed\t\t: subCreateConfirmed,\n        \tpubCreateFailed \t\t: pubCreateFailed,\n        \tsubCreateFailed\t\t\t: subCreateFailed,\n        \t\n        \t//comment update request\n        \tpubUpdateConfirmed \t\t: pubUpdateConfirmed,\n        \tsubUpdateConfirmed\t\t: subUpdateConfirmed,\n        \tpubUpdateFailed \t\t: pubUpdateFailed,\n        \tsubUpdateFailed\t\t\t: subUpdateFailed,\n        \t\n        \t//comment delete request\n        \tpubDeleteConfirmed \t\t: pubDeleteConfirmed,\n        \tsubDeleteConfirmed\t\t: subDeleteConfirmed,\n        \tpubDeleteFailed \t\t: pubDeleteFailed,\n        \tsubDeleteFailed\t\t\t: subDeleteFailed,\n        \t\n        \t//comment index request\n        \tpubIndexConfirmed \t\t: pubIndexConfirmed,\n        \tsubIndexConfirmed\t\t: subIndexConfirmed,\n        \tpubIndexFailed \t\t\t: pubIndexFailed,\n        \tsubIndexFailed\t\t\t: subIndexFailed,\n        \t\n        \t//comment countAll request\n        \tpubCountAllConfirmed \t\t: pubCountAllConfirmed,\n        \tsubCountAllConfirmed\t\t: subCountAllConfirmed,\n        \tpubCountAllFailed \t\t\t: pubCountAllFailed,\n        \tsubCountAllFailed\t\t\t: subCountAllFailed,\n        \t\n        \t//comment countNew request\n        \tpubCountNewConfirmed \t\t: pubCountNewConfirmed,\n        \tsubCountNewConfirmed\t\t: subCountNewConfirmed,\n        \tpubCountNewFailed \t\t\t: pubCountNewFailed,\n        \tsubCountNewFailed\t\t\t: subCountNewFailed,\n        \t\n        };\n        \n        return commentChannelService;\n\n        ////////////\n        \n        //Comment retrieve request functions\n        \n        /**\n\t\t * pubRetrieveConfirmed\n\t\t * \n\t\t * Publish the CommentRetrieveConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubRetrieveConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.retrieveConfirmed, args);\n    \t};\n    \t\n    \t/**\n\t\t * subRetrieveConfirmed\n\t\t * \n\t\t * subscribe for the CommentRetrieveConfirmed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveConfirmed function\n\t\t * @param \t{function} scopeHandler The callback handler for CommentRetrieveConfirmed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subRetrieveConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.retrieveConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n    \t\n    \t//###############\n    \t\n        \n        /**\n\t\t * pubRetrieveConfirmed\n\t\t * \n\t\t * Publish the CommentRetrieveConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubRetrieveFailed(args) {\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.retrieveFailed, args);\n    \t};\n    \t\n    \t/**\n\t\t * subRetrieveFailed\n\t\t * \n\t\t * subscribe for the CommentRetrieveFailed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveFailed function\n\t\t * @param \t{function} scopeHandler The callback handler for CommentRetrieveFailed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subRetrieveFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.retrieveFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n    \t//Comment create request functions\n\n    \t/**\n    \t * pubCreateConfirmed\n    \t * \n    \t * Publish the CommentCreateConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubCreateConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.createConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subCreateConfirmed\n    \t * \n    \t * subscribe for the CommentCreateConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for CommentCreateConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subCreateConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.createConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubCreateConfirmed\n    \t * \n    \t * Publish the CommentCreateConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubCreateFailed(args) {\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.createFailed, args);\n    \t};\n\n    \t/**\n    \t * subCreateFailed\n    \t * \n    \t * subscribe for the CommentCreateFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateFailed function\n    \t * @param \t{function} scopeHandler The callback handler for CommentCreateFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subCreateFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.createFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n\n    \t//Comment update request functions\n\n    \t/**\n    \t * pubUpdateConfirmed\n    \t * \n    \t * Publish the CommentUpdateConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubUpdateConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.updateConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subUpdateConfirmed\n    \t * \n    \t * subscribe for the CommentUpdateConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for CommentUpdateConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subUpdateConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.updateConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n    \t/**\n    \t * pubUpdateConfirmed\n    \t * \n    \t * Publish the CommentUpdateConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubUpdateFailed(args) {\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.updateFailed, args);\n    \t};\n\n    \t/**\n    \t * subUpdateFailed\n    \t * \n    \t * subscribe for the CommentUpdateFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateFailed function\n    \t * @param \t{function} scopeHandler The callback handler for CommentUpdateFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subUpdateFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.updateFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n    \t//Comment delete request functions\n\n    \t/**\n    \t * pubDeleteConfirmed\n    \t * \n    \t * Publish the CommentDeleteConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubDeleteConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.deleteConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subDeleteConfirmed\n    \t * \n    \t * subscribe for the CommentDeleteConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for CommentDeleteConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subDeleteConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.deleteConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubDeleteConfirmed\n    \t * \n    \t * Publish the CommentDeleteConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubDeleteFailed(args) {\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.deleteFailed, args);\n    \t};\n\n    \t/**\n    \t * subDeleteFailed\n    \t * \n    \t * subscribe for the CommentDeleteFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteFailed function\n    \t * @param \t{function} scopeHandler The callback handler for CommentDeleteFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subDeleteFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.deleteFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n\n    \t//Comment index request functions\n\n    \t/**\n    \t * pubIndexConfirmed\n    \t * \n    \t * Publish the CommentIndexConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubIndexConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.indexConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subIndexConfirmed\n    \t * \n    \t * subscribe for the CommentIndexConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for CommentIndexConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subIndexConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.indexConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubIndexConfirmed\n    \t * \n    \t * Publish the CommentIndexConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubIndexFailed(args) {\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.indexFailed, args);\n    \t};\n\n    \t/**\n    \t * subIndexFailed\n    \t * \n    \t * subscribe for the CommentIndexFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexFailed function\n    \t * @param \t{function} scopeHandler The callback handler for CommentIndexFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subIndexFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.indexFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n    \t//Comment countAll request functions\n\n    \t/**\n    \t * pubCountAllConfirmed\n    \t * \n    \t * Publish the CommentcountAllConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubCountAllConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.countAllConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subCountAllConfirmed\n    \t * \n    \t * subscribe for the CommentcountAllConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subCountAllConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for CommentcountAllConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subCountAllConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.countAllConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubCountAllConfirmed\n    \t * \n    \t * Publish the CommentcountAllConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubCountAllFailed(args) {\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.countAllFailed, args);\n    \t};\n\n    \t/**\n    \t * subCountAllFailed\n    \t * \n    \t * subscribe for the CommentcountAllFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subCountAllFailed function\n    \t * @param \t{function} scopeHandler The callback handler for CommentcountAllFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subCountAllFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.countAllFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n    \t\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n    \t//Comment countNew request functions\n\n    \t/**\n    \t * pubCountNewConfirmed\n    \t * \n    \t * Publish the CommentcountNewConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubCountNewConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.countNewConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subCountNewConfirmed\n    \t * \n    \t * subscribe for the CommentcountNewConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subCountNewConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for CommentcountNewConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subCountNewConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.countNewConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubCountNewConfirmed\n    \t * \n    \t * Publish the CommentcountNewConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubCountNewFailed(args) {\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.countNewFailed, args);\n    \t};\n\n    \t/**\n    \t * subCountNewFailed\n    \t * \n    \t * subscribe for the CommentcountNewFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subCountNewFailed function\n    \t * @param \t{function} scopeHandler The callback handler for CommentcountNewFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subCountNewFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.countNewFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n    \t\n    \t\n\t};\n\n})();",";(function() {\n    'use strict';\n\n    /**\n\t *  Constants for CommentChannel\n\t *  \n\t *  NOTE: if you want to change this constant do this in a config section of angular\n\t */\n\tvar CommentChannelConstant =  {\n\t \t\t// Retrieve action\n \t\t\tretrieveConfirmed\t\t: 'event:drupal-comment-retrieveConfirmed',\n \t\t\tretrieveFailed\t\t\t: 'event:drupal-comment-retrieveFailed',\n \t\t\t// Create action\n \t\t\tcreateConfirmed\t\t\t: 'event:drupal-comment-createConfirmed',\n \t\t\tcreateFailed\t\t\t: 'event:drupal-comment-createFailed',\n \t\t\t// Update action\n \t\t\tupdateConfirmed\t\t\t: 'event:drupal-comment-updateConfirmed',\n \t\t\tupdateFailed\t\t\t: 'event:drupal-comment-updateFailed',\n \t\t\t// Delete action\t\n \t\t\tdeleteConfirmed\t\t\t: 'event:drupal-comment-deleteConfirmed',\n \t\t\tdeleteFailed\t\t\t: 'event:drupal-comment-deleteFailed',\n \t\t\t// Index action\n \t\t\tindexConfirmed\t\t\t: 'event:drupal-comment-indexConfirmed',\n \t\t\tindexFailed\t\t\t\t: 'event:drupal-comment-indexFailed',\n \t\t\t// countAll action\n \t\t\tcountAllConfirmed\t: 'event:drupal-comment-countAllConfirmed',\n \t\t\tcountAllFailed\t\t: 'event:drupal-comment-countAllFailed',\n \t\t\t// countNew action\n \t\t\tcountNewConfirmed\t: 'event:drupal-comment-countNewConfirmed',\n \t\t\tcountNewFailed\t\t: 'event:drupal-comment-countNewFailed',\n\n\t};\n    \n\t/**\n\t * Comment Channel Constant\n\t */\n\tangular\n\t    .module('d7-services.resources.comment.channelConstant', [])\n\t    .constant(\"CommentChannelConstant\", CommentChannelConstant);\n\n})();\n",";(function() {\n    'use strict';\n\n\t/**\n\t * Comment Resource Modules\n\t * \n\t * see sourcecode in services/resources/comment_resource.inc\n\t**/\n    angular.module('d7-services.resources.comment.resource', ['d7-services.commons.configurations', 'd7-services.resources.comment.resourceConstant', 'd7-services.resources.comment.channel', 'd7-services.commons.baseResource'])\n    \n    /**\n\t * CommentResource\n\t * \n\t * This service mirrors the Drupal comment resource of the services 3.x module.\n\t * To use this you have to set following line in your Drupal CORS module settings\n\t * your_api_endpoint/comment/*|<mirror>|POST|Content-Type,Authorization|true\n\t * \n\t**/\n    .factory('CommentResource', CommentResource);\n\n    /**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t**/\n    CommentResource.$inject = ['$http', 'BaseResource', 'DrupalApiConstant', 'CommentResourceConstant', 'CommentChannel'];\n    \n\t/** @ngInject */\n\tfunction CommentResource($http, BaseResource, DrupalApiConstant, CommentResourceConstant, CommentChannel) { \n\t\t\n\t\t//setup and return service            \t\n        var commentResourceService = {\n        \t//CRUD operations\n        \tretrieve \t: retrieve,\n    \t\tcreate \t\t: create,\n    \t\tupdate \t\t: update,\n    \t\tdelete \t\t: _delete,\n    \t    index \t\t: index,\n    \t    //Actions\n    \t    countAll\t: countAll,\n    \t    countNew\t: countNew\n        \t\n        };\n        \n        return commentResourceService;\n\n        ////////////\n        \n        /**\n\t\t * retrieve\n\t\t * \n\t\t * Retrieve a comment\n\t\t * \n\t\t * Method: GET \n\t\t * Url: http://drupal_instance/api_endpoint/comment/{CID}\n\t\t * \n\t\t * @params  {Object} data The requests data\n\t\t * \t\t\t@key \t{Integer} cid The cid of the comment to retrieve., required:true, source:path\n\t\t * \n\t\t * @return \t{Promise} A comment object\n\t\t * \n\t\t**/\n    \tfunction retrieve(data) {\n    \t\tvar retrievePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + CommentResourceConstant.resourcePath + '/' + data.cid;\n    \t\treturn BaseResource.retrieve( retrievePath,CommentChannel.pubRetrieveConfirmed,  CommentChannel.pubRetrieveFailed);\n\t    };\n\t    \n\t    /**\n\t     * create\n\t     * \n\t     * Create a comment\n\t     * This function uses drupal_form_submit() and as such expects all input to match\n\t     * the submitting form in question.\n\t     * \n\t     * Method: POST\n\t     * Url: http://drupal_instance/api_endpoint/comment\n\t     * \n\t     * @params  {Object} comment The data of the comment to create, required:true, source:post body\n\t     * \n\t\t *\n\t\t *  Roles can be passed in a roles property which is an associative\n\t\t *  array formatted with '<role id>' => '<role id>', not including the authenticated comment role, which is given by default.\n\t     * \n\t     * @return \t{Promise} The comment object of the newly created comment.\n\t     *\n\t    **/\n\t    function create(data) {\n\t    \t\n\t    \tvar createPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + CommentResourceConstant.resourcePath;\n\n\t    \tvar createData \t= { \n\t    \t\tcomment : data \n    \t\t};\n\n    \t\treturn BaseResource.create( createData, createPath,  CommentChannel.pubCreateConfirmed, CommentChannel.pubCreateFailed);\n\n\t    };\n\t        \n\t    /**\n\t     * update\n\t     * \n\t     * Update a comment\n\t     * \n\t     * Method: PUT\n\t     * Url: http://drupal_instance/api_endpoint/comment/{CID}\n\t     * \n\t     * @params  {Object} data The requests data\n\t     * \t\t\t@key \t{Integer} cid The unique identifier for this comment., required:true, source:path\n\t     * \t\t\t@key \t{Array}  data The comment object with updated information, required:true, source:post body\n\t     * \n\t     * @return \t{Promise}\n\t     *\n\t    **/\n\t    function update(data) {\n\t    \t\n\t    \tvar updatePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + CommentResourceConstant.resourcePath + '/' + data.cid;\n\t    \t\n\t    \tdelete data.cid\n    \t\tvar updateData \t= {comment : data};\n    \t\t\n    \t\treturn BaseResource.update( updateData, updatePath, CommentChannel.pubUpdateConfirmed, CommentChannel.pubUpdateFailed);\n\n\t    };\n\t    \n\t    /**\n\t     * delete\n\t     * \n\t     * Delete the comment\n\t     * \n\t     * Method: DELETE\n\t     * Url: http://drupal_instance/api_endpoint/comment/{CID}\n\t     * \n\t     * @params  {Object} data the requests data\n\t     * \t\t\t@key \t{Integer} cid The id of the comment to delete, required:true, source:path\n\t     * \n\t     * @return \t{Promise}\n\t     *\n\t    **/\n\t    function _delete(data) {\n\t    \tvar deletePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + CommentResourceConstant.resourcePath + '/' + data.cid\n\t    \treturn BaseResource.delete(deletePath, CommentChannel.pubDeleteConfirmed, CommentChannel.pubDeleteFailed);\n\t    };\n\t    \n\t    /**\n\t     * index\n\t     * \n\t     * List all comments\n\t     * \n\t     * Method: GET\n\t\t * Url: http://drupal_instance/api_endpoint/comment\n\t\t * \n\t\t * @params  {Object} data the requests data\n\t\t * \t\t@key \t{Integer} page The zero-based index of the page to get. defaults to 0., required:false, source:param\n\t\t * \t\t@key \t{Integer} pagesize Number of records to get per page., required:false, source:param\n\t\t * \t\t@key \t{String} fields The fields to get., required:false, source:param\n\t\t * \t\t@key \t{Array} parameters Parameters, required:false, source:param\n\t\t * \t\t\n\t     * \n\t     * @return \t{Promise}\n\t     *\n\t    **/\n\t    function index(data) {\n\t    \tvar indexPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + CommentResourceConstant.resourcePath + '/';\n\t    \treturn BaseResource.index(data, indexPath,CommentChannel.pubIndexConfirmed,  CommentChannel.pubIndexFailed);\n\t    };\n\t    \n\t\t/**\n\t\t * countAll\n\t\t * \n\t\t * Return number of comments on a given node.\n\t\t * \n\t\t * Method: POST\n\t\t * Url: http://drupal_instance/api_endpoint/comment/countAll\n\t\t * \n\t\t * @params  {Object} data the requests data\n\t\t * \t\t@key \t{Integer} nid The node id to count all comments., separated by comma., required:true, source:post body\t\n\t\t * \n\t\t * @return \t{Promise}\n\t\t * \n\t\t**/\n\t\tfunction countAll(data) {\n\t\t\tvar  pathTocountAll = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + CommentResourceConstant.resourcePath + '/' + CommentResourceConstant.actions.countAll,\n\t\t\t\t requestConfig = {\n\t\t\t     \turl\t\t: pathTocountAll,\n\t\t\t     \tmethod\t: 'POST',\n\t\t\t     \tdata : data\n\t\t\t\t};\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\treturn BaseResource.request(requestConfig,CommentChannel.pubCountAllConfirmed,  CommentChannel.pubCountAllFailed);\n\n\t\t};\n\t\t\n\t\t/**\n\t\t * countNew\n\t\t * \n\t\t * Returns number of new comments on a given node since a given timestamp.\n\t\t * \n\t\t * Method: POST\n\t\t * Url: http://drupal_instance/api_endpoint/comment/countNew\n\t\t * \n\t\t * @params  {Object} data the requests data\n\t\t * \t\t@key \t{Integer} cid The node id to load comments for., separated by comma., required:true, source:post body\n\t\t * \t\t@key \t{Integer} since Timestamp to count from (defaults to time of last user acces to node)., required:false, source:post body\t\n\t\t * \n\t\t * @return \t{Promise}\n\t\t * \n\t\t**/\n\t\tfunction countNew(data) {\n\t\t\tvar  pathTocountNew = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + CommentResourceConstant.resourcePath + '/' + CommentResourceConstant.actions.countNew,\n\t\t\t\t requestConfig = {\n\t\t\t     \turl\t\t: pathTocountNew,\n\t\t\t     \tmethod\t: 'POST',\n\t\t\t     \tdata : data\n\t\t\t\t};\n\n\t\t\treturn BaseResource.request(requestConfig,CommentChannel.pubCountNewConfirmed,  CommentChannel.pubCountNewFailed);\n\n\t\t};\n\t\t\t\t\t\n\t};\n\n})();",";(function() {\n    'use strict';\n    \n    /**\n\t *  Constants for CommentResourceModules\n\t *  \n\t *  NOTE: if you want to change this constant do this in your app.js config section\n\t */\n\tvar CommentResourceConstant =  {\n\n\t\t// NOTE: This is the default alias aliases for your system resources defined in Drupal\n\t\tresourcePath : 'comment',\n\t\t//actions of comment resource\n\t\tactions : {\n\t\t\t//following actions are defined over their request method (GET, POST, PUT, DELETE) so they are commented out\n\t\t\t//retrieve \t\t\t\t: 'retrieve',\n\t\t\t//create \t\t\t\t: 'create',\n\t\t\t//update \t\t\t\t: 'update',\n\t\t\t//delete \t\t\t\t: 'delete',\n\t\t    //index \t\t\t\t: 'index',\n\t\t\t//\n\t\t\tcountAll \t\t\t: 'countAll',\n\t\t\tcountNew\t\t\t: 'countNew'\n\t\t}\n\n\t};\n\n\t/**\n\t * Comment Constant Modules\n\t */\n\tangular\n\t    .module('d7-services.resources.comment.resourceConstant', [])\n\t    .constant(\"CommentResourceConstant\", CommentResourceConstant);\n\t\n})();\n",";(function() {\n    'use strict';\n\n\t/**\n\t * @ngdoc object\n\t * @name d7-services.resources.file:File\n\t * @description\n\t * This module bundles all modules related to drupal file resource\n\t * @requires d7-services.resources.file.resourceConstant:FileResourceConstant\n\t * @requires d7-services.resources.file.resource:FileResource\n\t * @requires d7-services.resources.file.channelConstant:FileChannelConstant\n\t * @requires d7-services.resources.file.channel:FileChannel\n\t */\n\tangular.module('d7-services.resources.file', \n\t\t\t['d7-services.resources.file.resourceConstant', \n\t\t\t 'd7-services.resources.file.resource', \n\t\t\t 'd7-services.resources.file.channelConstant', \n\t\t\t 'd7-services.resources.file.channel']);\n})();",";(function() {\n\t'use strict';\n\n\t/**\n\t * File Channel Module\n\t */\n\tangular.module('d7-services.resources.file.channel', ['d7-services.commons.baseChannel', 'd7-services.resources.file.channelConstant'])\n\t\t   .factory('FileChannel', FileChannel);\n\n\t\n\t/**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t **/\n\tFileChannel.$inject = [ 'BaseChannel', 'FileChannelConstant' ];\n\t\n\t/**\n\t * Notification channel for file resource \n\t**/\n\t\n\t/** @ngInject */\n\tfunction FileChannel(BaseChannel, FileChannelConstant) {\n\t\n\t\t//setup and return service            \t\n        var fileChannelService = {\n\n        \t\t//Retrieve event\n        \t\tpubRetrieveConfirmed\t: pubRetrieveConfirmed,\n\t\t\t\tsubRetrieveConfirmed\t: subRetrieveConfirmed,\n\t\t\t\tpubRetrieveFailed\t\t: pubRetrieveFailed,\n\t\t\t\tsubRetrieveFailed \t\t: subRetrieveFailed,\n\t\t\t\t// Create action\n\t\t\t\tpubCreateConfirmed\t\t: pubCreateConfirmed,\n\t\t\t\tsubCreateConfirmed\t\t: subCreateConfirmed,\n\t\t\t\tpubCreateFailed\t\t\t: pubCreateFailed,\n\t\t\t\tsubCreateFailed \t\t: subCreateFailed,\n\t\t\t\t// Delete action\n\t\t\t\tpubDeleteConfirmed\t\t: pubDeleteConfirmed,\n\t\t\t\tsubDeleteConfirmed\t\t: subDeleteConfirmed,\n\t\t\t\tpubDeleteFailed\t\t\t: pubDeleteFailed,\n\t\t\t\tsubDeleteFailed \t\t: subDeleteFailed,\n\t\t\t\t// Index action\n\t\t\t\tpubIndexConfirmed\t\t: pubIndexConfirmed,\n\t\t\t\tsubIndexConfirmed\t\t: subIndexConfirmed,\n\t\t\t\tpubIndexFailed\t\t\t: pubIndexFailed,\n\t\t\t\tsubIndexFailed \t\t\t: subIndexFailed,\n\t\t\t\t// CreateRaw\n\t\t\t\tpubCreateRawConfirmed\t: pubCreateRawConfirmed,\n\t\t\t\tsubCreateRawConfirmed\t: subCreateRawConfirmed,\n\t\t\t\tpubCreateRawFailed\t\t: pubCreateRawFailed,\n\t\t\t\tsubCreateRawFailed \t\t: subCreateRawFailed\n\n        };\n        \n        return fileChannelService;\n\n        ////////////\n        \n        //File retrieve request functions\n        \n        /**\n\t\t * pubRetrieveConfirmed\n\t\t * \n\t\t * Publish the FileRetrieveConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubRetrieveConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(FileChannelConstant.retrieveConfirmed, args);\n    \t};\n    \t\n    \t/**\n\t\t * subRetrieveConfirmed\n\t\t * \n\t\t * subscribe for the FileRetrieveConfirmed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveConfirmed function\n\t\t * @param \t{function} scopeHandler The callback handler for FileRetrieveConfirmed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subRetrieveConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( FileChannelConstant.retrieveConfirmed, _Scope, scopeHandler);\n    \t\t\n    \t\treturn unsubScopeHandler;\n    \t};\n    \t\n    \t//###############\n    \t\n        \n        /**\n\t\t * pubRetrieveConfirmed\n\t\t * \n\t\t * Publish the FileRetrieveConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubRetrieveFailed(args) {\n    \t\tBaseChannel.pubRootEmit(FileChannelConstant.retrieveFailed, args);\n    \t};\n    \t\n    \t/**\n\t\t * subRetrieveFailed\n\t\t * \n\t\t * subscribe for the FileRetrieveFailed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveFailed function\n\t\t * @param \t{function} scopeHandler The callback handler for FileRetrieveFailed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subRetrieveFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( FileChannelConstant.retrieveFailed, _Scope, scopeHandler);\n\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n    \t//File create request functions\n\n    \t/**\n    \t * pubCreateConfirmed\n    \t * \n    \t * Publish the FileCreateConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubCreateConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(FileChannelConstant.createConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subCreateConfirmed\n    \t * \n    \t * subscribe for the FileCreateConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for FileCreateConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subCreateConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( FileChannelConstant.createConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubCreateConfirmed\n    \t * \n    \t * Publish the FileCreateConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubCreateFailed(args) {\n    \t\tBaseChannel.pubRootEmit(FileChannelConstant.createFailed, args);\n    \t};\n\n    \t/**\n    \t * subCreateFailed\n    \t * \n    \t * subscribe for the FileCreateFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateFailed function\n    \t * @param \t{function} scopeHandler The callback handler for FileCreateFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subCreateFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( FileChannelConstant.createFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n  \t\n    \t//File delete request functions\n\n    \t/**\n    \t * pubDeleteConfirmed\n    \t * \n    \t * Publish the FileDeleteConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubDeleteConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(FileChannelConstant.deleteConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subDeleteConfirmed\n    \t * \n    \t * subscribe for the FileDeleteConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for FileDeleteConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subDeleteConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( FileChannelConstant.deleteConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubDeleteConfirmed\n    \t * \n    \t * Publish the FileDeleteConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubDeleteFailed(args) {\n    \t\tBaseChannel.pubRootEmit(FileChannelConstant.deleteFailed, args);\n    \t};\n\n    \t/**\n    \t * subDeleteFailed\n    \t * \n    \t * subscribe for the FileDeleteFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteFailed function\n    \t * @param \t{function} scopeHandler The callback handler for FileDeleteFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subDeleteFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( FileChannelConstant.deleteFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n\n    \t//File index request functions\n\n    \t/**\n    \t * pubIndexConfirmed\n    \t * \n    \t * Publish the FileIndexConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubIndexConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(FileChannelConstant.indexConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subIndexConfirmed\n    \t * \n    \t * subscribe for the FileIndexConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for FileIndexConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subIndexConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( FileChannelConstant.indexConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubIndexConfirmed\n    \t * \n    \t * Publish the FileIndexConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubIndexFailed(args) {\n    \t\tBaseChannel.pubRootEmit(FileChannelConstant.indexFailed, args);\n    \t};\n\n    \t/**\n    \t * subIndexFailed\n    \t * \n    \t * subscribe for the FileIndexFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexFailed function\n    \t * @param \t{function} scopeHandler The callback handler for FileIndexFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subIndexFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( FileChannelConstant.indexFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t    \t\n    \t//File create raw request functions\n\n    \t/**\n    \t * pubCreateRawConfirmed\n    \t * \n    \t * Publish the FileCreateRawConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubCreateRawConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(FileChannelConstant.createRawConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subCreateRawConfirmed\n    \t * \n    \t * subscribe for the FileCreateRawConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateRawConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for FileCreateRawConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subCreateRawConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( FileChannelConstant.createRawConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubCreateRawConfirmed\n    \t * \n    \t * Publish the FileCreateRawConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubCreateRawFailed(args) {\n    \t\tBaseChannel.pubRootEmit(FileChannelConstant.createRawFailed, args);\n    \t};\n\n    \t/**\n    \t * subCreateRawFailed\n    \t * \n    \t * subscribe for the FileCreateRawFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateRawFailed function\n    \t * @param \t{function} scopeHandler The callback handler for FileCreateRawFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subCreateRawFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( FileChannelConstant.createRawFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n\t};\n\n})();",";(function() {\n    'use strict';\n\n    /**\n\t *  Constants for FileChannel\n\t *  \n\t *  NOTE: if you want to change this constant do this in a config section of angular\n\t */\n\tvar FileChannelConstant =  {\n\t\t\t// Retrieve action\n\t\t\tretrieveConfirmed\t\t: 'event:drupal-file-retrieveConfirmed',\n\t\t\tretrieveFailed  \t\t: 'event:drupal-file-retrieveFailed',\n\t\t\t// Create action\n\t\t\tcreateConfirmed\t\t: 'event:drupal-file-createConfirmed',\n\t\t\tcreateFailed  \t\t\t: 'event:drupal-file-createFailed',\n\t\t\t// Delete action\n\t\t\tdeleteConfirmed\t\t: 'event:drupal-file-deleteConfirmed',\n\t\t\tdeleteFailed  \t\t\t: 'event:drupal-file-deleteFailed',\n\t\t\t// Index action\n\t\t\tindexConfirmed\t\t\t: 'event:drupal-file-indexConfirmed',\n\t\t\tindexFailed  \t\t\t: 'event:drupal-file-indexFailed',\n\t\t\t// Files action\n\t\t\tfilesConfirmed\t\t\t: 'event:drupal-file-filesConfirmed',\n\t\t\tfilesFailed  \t\t\t: 'event:drupal-file-filesFailed',\n\n\t\t\t// Create raw action\n\t\t\tcreateRawConfirmed\t\t: 'event:drupal-file-createRawConfirmed',\n\t\t\tcreateRawFailed  \t\t: 'event:drupal-file-createRawFailed'\n\t};\n    \n\t/**\n\t * File Channel Constant\n\t */\n\tangular\n\t    .module('d7-services.resources.file.channelConstant', [])\n\t    .constant(\"FileChannelConstant\", FileChannelConstant);\n\n})();\n",";(function() {\n    'use strict';\n\n\t/**\n\t * File Resource Modules\n\t * \n\t * see sourcecode in services/resources/file_resource.inc\n\t**/\n    angular.module('d7-services.resources.file.resource', ['d7-services.commons.configurations', 'd7-services.resources.file.resourceConstant', 'd7-services.resources.file.channel', 'd7-services.commons.baseResource'])\n    \n    /**\n\t * FileResource\n\t * \n\t * This service mirrors the Drupal file resource of the services 3.x module.\n\t * To use this you have to set following line in your Drupal CORS module settings\n\t * your_api_endpoint/file/*|<mirror>|POST|Content-Type,Authorization|true\n\t * \n\t**/\n    .factory('FileResource', FileResource);\n\n    /**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t**/\n    FileResource.$inject = ['$http', 'BaseResource', 'DrupalApiConstant', 'FileResourceConstant', 'FileChannel'];\n    \n\t/** @ngInject */\n\tfunction FileResource($http, BaseResource, DrupalApiConstant, FileResourceConstant, FileChannel) { \n\t\t\n\t\t//setup and return service            \t\n        var fileResourceService = {\n        \t//CRUD operations\n        \tretrieve \t: retrieve,\n    \t\tcreate \t\t: create,\n    \t\tdelete \t\t: _delete,\n    \t    index \t\t: index,\n    \t    //Actions\n    \t    createRaw\t\t: createRaw,\n        };\n        \n        return fileResourceService;\n\n        ////////////\n        \n        /**\n\t\t * retrieve\n\t\t * \n\t\t * Retrieve a file\n\t\t * \n\t\t * Method: GET \n\t\t * Url: http://drupal_instance/api_endpoint/file/{FID}\n\t\t * \n\t\t * @params  {Object} data The requests data\n\t\t * \t\t\t@key \t{Integer} fid FID of the file to be loaded, required:true, source:path\n\t\t * \t\t\t@key \t{Integer} file_contents To return file contents or not., required:false, source:param\n\t\t * \t\t\t@key \t{Integer} image_styles To return image styles or not., required:false, source:param\n\t\t * \n\t\t * @return \t{Promise} A file object\n\t\t * \n\t\t**/\n    \tfunction retrieve(data) {\n    \t\tvar retrievePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + FileResourceConstant.resourcePath + '/' + data.fid;\n    \t\t\n    \t\tif( data.file_contents || data.image_styles ) {\n    \t\t\tretrievePath += '?';\n\t    \t}\n\t    \t\n\t    \t//optional data\n    \t\tif(data.file_contents) {\n    \t\t\tretrievePath += 'file_contents='+((data.file_contents)?1:0)+',';\n    \t\t}\n    \t\t\n    \t\tif(data.image_styles) {\n    \t\t\tretrievePath += 'image_styles='+((data.image_styles)?1:0)+',';\n    \t\t}\n    \t\t\n    \t\t\n    \t\treturn BaseResource.retrieve( retrievePath,FileChannel.pubRetrieveConfirmed,  FileChannel.pubRetrieveFailed);\n\t    };\n\t    \n\t    /**\n\t     * create\n\t     * \n\t     * Create a file with base64 encoded data\n\t     * \n\t     * Method: POST\n\t     * Url: http://drupal_instance/api_endpoint/file\n\t     * \n\t     * @params  {Array} file An array representing a file., required:true, source:post body\n\t     * \n\t     * @return \t{Promise} The file object of the newly created file.\n\t     *\n\t    **/\n\t    function create(data) {\n\t    \t\n\t    \tvar createPath \t= DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + FileResourceConstant.resourcePath,\n\t    \t\tformData \t= new FormData();\n\n    \t\t\n    \t\tif(data.filename) {formData.append('filename', data.filename);}\n    \t\tif(data.file) {formData.append('file', data.file);}\n    \t\tif(data.filesize) {formData.append('filesize', \"\" + data.filesize);}\n    \t\tif(data.image_file_name) {formData.append('filepath', DrupalApiConstant.publicFilePath + data.image_file_name); }\n    \t\t\n    \t\tvar requestConfig = {\n    \t\t\t\tmethod : 'POST',\n    \t\t\t\turl : createPath,\n\t\t\t\t\ttransformRequest: angular.identity,\n\t\t\t\t\theaders: {'Content-Type': undefined},\n\t\t\t\t\tdata: formData\n\t\t\t}\n    \t\t\n    \t\treturn BaseResource.request(requestConfig, FileChannel.pubCreateConfirmed, FileChannel.pubCreateFailed);\n\n\t    };\n\t        \n\t    \n\t    /**\n\t     * delete\n\t     * \n\t     * Delete a file\n\t     * \n\t     * Method: DELETE\n\t     * Url: http://drupal_instance/api_endpoint/file/{FID}\n\t     * \n\t     * @params  {Object} data the requests data\n\t     * \t\t\t@key \t{Integer} fid The id of the file to delete, required:true, source:path\n\t     * \n\t     * @return \t{Promise}\n\t     *\n\t    **/\n\t    function _delete(data) {\n\t    \tvar deletePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + FileResourceConstant.resourcePath + '/' + data.fid\n\t    \treturn BaseResource.delete(deletePath, FileChannel.pubDeleteConfirmed,  FileChannel.pubDeleteFailed);\n\t    };\n\t    \n\t    /**\n\t     * index\n\t     * \n\t     * List all files\n\t     * \n\t     * Method: GET\n\t\t * Url: http://drupal_instance/api_endpoint/file\n\t\t * \n\t\t * @params  {Object} data the requests data\n\t\t * \t\t@key \t{Integer} page The zero-based index of the page to get. defaults to 0., required:false, source:param\n\t\t * \t\t@key \t{Integer} pagesize Number of records to get per page., required:false, source:param\n\t\t * \t\t@key \t{String} fields The fields to get., required:false, source:param\n\t\t * \t\t@key \t{Array} parameters Parameters, required:false, source:param\n\t\t * \t\t\n\t     * \n\t     * @return \t{Promise}\n\t     *\n\t    **/\n\t    function index(data) {\n\t    \tvar indexPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + FileResourceConstant.resourcePath + '/';\n\t    \treturn BaseResource.index(data, indexPath, FileChannel.pubIndexConfirmed, FileChannel.pubIndexFailed);\n\t    };\n\t    \n\t    \n\t    /**\n\t     * createRaw\n\t     * \n\t     * Create a file with raw data.\n\t     * \n\t     * Method: POST \n\t\t * Url: http://drupal_instance/api_endpoint/file/create_raw\n\t     * \n\t     * @return \t{Promise}\n\t     *\n\t    **/\n\t    function createRaw(data) {\n\t    \tvar createRawPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + FileResourceConstant.resourcePath + '/create_raw';\n\t    \treturn BaseResource.request(null, createRawPath, FileChannel.pubIndexConfirmed, FileChannel.pubIndexFailed);\n\t    };\n\t    \n\t}\n\n})();",";(function() {\n    'use strict';\n    \n    /**\n\t *  Constants for FileResourceModules\n\t *  \n\t *  NOTE: if you want to change this constant do this in your app.js config section\n\t */\n\tvar FileResourceConstant =  {\n\n\t\t// NOTE: if you set custom aliases for your recources in [your.domain.org]/admin/structure/services/list/[machinereadable_name_of_endpoint]/resources change value here\n\t\tresourcePath : 'file',\n\t\t//actions of file resource\n\t\tactions : {\n\t\t\t//retrieve \t: 'retrieve',\n\t\t\t//create\t: 'create',\n\t\t\t//delete\t: 'delete',\n\t\t\t//index \t: 'index',\n\t\t\tcreateRaw  : 'create_raw'\n\t\t}\n\n\t};\n\n\t/**\n\t * File Constant Modules\n\t */\n\tangular\n\t    .module('d7-services.resources.file.resourceConstant', [])\n\t    .constant(\"FileResourceConstant\", FileResourceConstant);\n\t\n})();\n","(function () {\n  'use strict';\n\n  /**\n   * @ngdoc object\n   * @name d7-services.resources.menu:Menu\n   * @description\n   * This module bundles all modules related to drupal menu resource\n   * @requires d7-services.resources.menu.resourceConstant:MenuResourceConstant\n   * @requires d7-services.resources.menu.resource:MenuResource\n   * @requires d7-services.resources.menu.channelConstant:MenuChannelConstant\n   * @requires d7-services.resources.menu.channel:MenuChannel\n   */\n  angular.module('d7-services.resources.menu', [\n    'd7-services.resources.menu.resourceConstant',\n    'd7-services.resources.menu.resource',\n    'd7-services.resources.menu.channelConstant',\n    'd7-services.resources.menu.channel']);\n})();",";(function() {\n\t'use strict';\n\n\t/**\n\t * Menu Channel Module\n\t */\n\tangular.module('d7-services.resources.menu.channel', ['d7-services.commons.baseChannel', 'd7-services.resources.menu.channelConstant'])\n\t\t   .factory('MenuChannel', MenuChannel);\n\n\t\n\t/**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t **/\n\tMenuChannel.$inject = [ 'BaseChannel', 'MenuChannelConstant' ];\n\t\n\t/**\n\t * Notification channel for menu resource \n\t**/\n\t/** @ngInject */\n\tfunction MenuChannel(BaseChannel, MenuChannelConstant) {\n\t\n\t\t//setup and return service            \t\n        var menuChannelService = {\n        \t\t\n    \t\tpubRetrieveConfirmed \t: pubRetrieveConfirmed,\n    \t\tsubRetrieveConfirmed\t\t: subRetrieveConfirmed,\n    \t\tpubRetrieveFailed \t\t: pubRetrieveFailed,\n    \t\tsubRetrieveFailed\t\t: subRetrieveFailed\n    \t\t\n        };\n        \n        return menuChannelService;\n\n        ////////////\n        \n        //Menu retrieve request functions\n        \n        /**\n\t\t * pubRetrieveConfirmed\n\t\t * \n\t\t * Publish the MenuRetrieveConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubRetrieveConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(MenuChannelConstant.retrieveConfirmed, args);\n    \t};\n    \t\n    \t /**\n\t\t * subRetrieveConfirmed\n\t\t * \n\t\t * subscribe for the MenuRetrieveConfirmed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveConfirmed function\n\t\t * @param \t{function} scopeHandler The callback handler for MenuRetrieveConfirmed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subRetrieveConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( MenuChannelConstant.retrieveConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n    \t\n    \t//###############\n    \t\n        \n        /**\n\t\t * pubRetrieveConfirmed\n\t\t * \n\t\t * Publish the MenuRetrieveConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubRetrieveFailed(args) {\n    \t\tBaseChannel.pubRootEmit(MenuChannelConstant.retrieveFailed, args);\n    \t};\n    \t\n    \t/**\n\t\t * subRetrieveFailed\n\t\t * \n\t\t * subscribe for the MenuRetrieveFailed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveFailed function\n\t\t * @param \t{function} scopeHandler The callback handler for MenuRetrieveFailed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subRetrieveFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( MenuChannelConstant.retrieveFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n\t};\n\n})();",";(function() {\n    'use strict';\n\n    /**\n\t *  Constants for MenuChannel\n\t *  \n\t *  NOTE: if you want to change this constant do this in a config section of angular\n\t */\n\tvar MenuChannelConstant =  {\n \t\t// Retrieve action\n \t\tretrieveConfirmed\t: 'event:drupal-menu-retrieveConfirmed',\n \t\tretrieveFailed  \t: 'event:drupal-menu-retrieveFailed',\n\t};\n    \n\t/**\n\t * Menu Channel Constant\n\t */\n\tangular\n\t    .module('d7-services.resources.menu.channelConstant', [])\n\t    .constant(\"MenuChannelConstant\", MenuChannelConstant);\n\n})();\n",";(function() {\n    'use strict';\n\n\t/**\n\t * Menu Resource Modules\n\t * \n\t * see sourcecode in services_menu/resources/menu_resource.inc\n\t * \n\t**/\n    angular.module('d7-services.resources.menu.resource', ['d7-services.commons.configurations', 'd7-services.commons.baseResource', 'd7-services.resources.menu.resourceConstant', 'd7-services.resources.menu.channel'])\n    \n\n    /**\n\t * MenuResource\n\t * \n\t * This service mirrors the Drupal menu resource of the services 3.x module.\n\t * To use this you have to set following line in your Drupal CORS module settings\n\t * \n\t**/\n    .factory('MenuResource', MenuResource);\n\n    /**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t**/\n    MenuResource.$inject = ['$http', 'DrupalApiConstant', 'BaseResource', 'MenuResourceConstant', 'MenuChannel'];\n    \n\t/** @ngInject */\n\tfunction MenuResource($http, DrupalApiConstant, BaseResource, MenuResourceConstant, MenuChannel) { \n\t\t\n\t\t//setup and return service            \t\n        var menuResourceService = {\n\t\t\tretrieve \t\t: retrieve\n        };\n        \n        return menuResourceService;\n\n        ////////////\n        \n        /**\n\t\t * retrieve\n\t\t * \n\t\t * Returns the details of currently logged in user.\n\t\t * \n\t\t * Method: GET\n\t\t * Url: http://drupal_instance/api_endpoint/menu/{MENU_NAME}\n\t\t * \n\t\t * @return \t{Promise} Object with session id, session name and a user object.\n\t\t * \n\t\t**/\n        function retrieve(data) {\n\t    \tvar errors = [];\n\t    \t\n\t\t\tvar retrievePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + MenuResourceConstant.resourcePath +'/'+data.menu_name,\n\t\t\t\trequestConfig = {\n\t\t\t\t\t\tmethod :'GET',\n\t\t\t\t\t\turl : retrievePath\n\t\t\t\t};\n\t\t\t\n\t\t\treturn BaseResource.request(requestConfig,MenuChannel.pubRetrieveConfirmed,  MenuChannel.pubRetrieveFailed);\n\t\t\t\n\t\t};\n\n\t\n\t};\n\n})();",";(function() {\n    'use strict';\n    \n    /**\n\t *  Constants for MenuResourceModules \n\t *  \n\t *  NOTE: if you want to change this constant do this in your app.js config section\n\t */\n\tvar MenuResourceConstant =  {\n\n\t \t\t// NOTE: This is the default alias aliases for your menu resources defined in Drupal\n\t \t\tresourcePath : 'menu',\n\t \t\t//actions of menu resource\n\t \t\tactions : {\n\t \t\t\t//retrieve \t : 'retrieve'\n\t \t\t}\n\n\t};\n\n\t/**\n\t * Menu Constant Modules\n\t */\n\tangular\n\t    .module('d7-services.resources.menu.resourceConstant', [])\n\t    .constant(\"MenuResourceConstant\", MenuResourceConstant);\n\t\n})();\n",";(function() {\n    'use strict';\n\n\t/**\n\t * @ngdoc object\n\t * @name d7-services.resources.geocoder:Geocoder\n\t * @description\n\t * This module bundles all modules related to drupal geocoder resource\n\t * @requires d7-services.resources.geocoder.resourceConstant:GeocoderResourceConstant\n\t * @requires d7-services.resources.geocoder.resource:GeocoderResource\n\t * @requires d7-services.resources.geocoder.channelConstant:GeocoderChannelConstant\n\t * @requires d7-services.resources.geocoder.channel:GeocoderChannel\n\t */\n\tangular.module('d7-services.resources.geocoder', \n\t\t\t['d7-services.resources.geocoder.resourceConstant', \n\t\t\t 'd7-services.resources.geocoder.resource', \n\t\t\t 'd7-services.resources.geocoder.channelConstant', \n\t\t\t 'd7-services.resources.geocoder.channel',\n\t\t\t 'd7-services.resources.geocoder.helperConstant']);\n})();",";(function() {\n\t'use strict';\n\n\t/**\n\t * Geocoder Channel Module\n\t */\n\tangular.module('d7-services.resources.geocoder.channel', ['d7-services.commons.baseChannel', 'd7-services.resources.geocoder.channelConstant'])\n\t\t   .factory('GeocoderChannel', GeocoderChannel);\n\n\t\n\t/**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t **/\n\tGeocoderChannel.$inject = [ 'BaseChannel', 'GeocoderChannelConstant' ];\n\t\n\t/**\n\t * Notification channel for geocoder resource \n\t**/\n\t\n\t/** @ngInject */\n\tfunction GeocoderChannel(BaseChannel, GeocoderChannelConstant) {\n\t\n\t\t//setup and return service            \t\n        var geocoderChannelService = {\n\n        \t\t//Retrieve event\n        \t\tpubRetrieveConfirmed\t: pubRetrieveConfirmed,\n\t\t\t\tsubRetrieveConfirmed\t: subRetrieveConfirmed,\n\t\t\t\tpubRetrieveFailed\t\t: pubRetrieveFailed,\n\t\t\t\tsubRetrieveFailed \t\t: subRetrieveFailed,\n\t\t\t\t// Index action\n\t\t\t\tpubIndexConfirmed\t\t: pubIndexConfirmed,\n\t\t\t\tsubIndexConfirmed\t\t: subIndexConfirmed,\n\t\t\t\tpubIndexFailed\t\t\t: pubIndexFailed,\n\t\t\t\tsubIndexFailed \t\t\t: subIndexFailed,\n        };\n        \n        return geocoderChannelService;\n\n        ////////////\n        \n        //Geocoder retrieve request functions\n        \n        /**\n\t\t * pubRetrieveConfirmed\n\t\t * \n\t\t * Publish the GeocoderRetrieveConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubRetrieveConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(GeocoderChannelConstant.retrieveConfirmed, args);\n    \t};\n    \t\n    \t/**\n\t\t * subRetrieveConfirmed\n\t\t * \n\t\t * subscribe for the GeocoderRetrieveConfirmed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveConfirmed function\n\t\t * @param \t{function} scopeHandler The callback handler for GeocoderRetrieveConfirmed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subRetrieveConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( GeocoderChannelConstant.retrieveConfirmed, _Scope, scopeHandler);\n    \t\t\n    \t\treturn unsubScopeHandler;\n    \t};\n    \t\n    \t//###############\n    \t\n        \n        /**\n\t\t * pubRetrieveConfirmed\n\t\t * \n\t\t * Publish the GeocoderRetrieveConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubRetrieveFailed(args) {\n    \t\tBaseChannel.pubRootEmit(GeocoderChannelConstant.retrieveFailed, args);\n    \t};\n    \t\n    \t/**\n\t\t * subRetrieveFailed\n\t\t * \n\t\t * subscribe for the GeocoderRetrieveFailed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveFailed function\n\t\t * @param \t{function} scopeHandler The callback handler for GeocoderRetrieveFailed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subRetrieveFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( GeocoderChannelConstant.retrieveFailed, _Scope, scopeHandler);\n\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n\n    \t//Geocoder index request functions\n\n    \t/**\n    \t * pubIndexConfirmed\n    \t * \n    \t * Publish the GeocoderIndexConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubIndexConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(GeocoderChannelConstant.indexConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subIndexConfirmed\n    \t * \n    \t * subscribe for the GeocoderIndexConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for GeocoderIndexConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subIndexConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( GeocoderChannelConstant.indexConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubIndexConfirmed\n    \t * \n    \t * Publish the GeocoderIndexConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubIndexFailed(args) {\n    \t\tBaseChannel.pubRootEmit(GeocoderChannelConstant.indexFailed, args);\n    \t};\n\n    \t/**\n    \t * subIndexFailed\n    \t * \n    \t * subscribe for the GeocoderIndexFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexFailed function\n    \t * @param \t{function} scopeHandler The callback handler for GeocoderIndexFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subIndexFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( GeocoderChannelConstant.indexFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n\n\t};\n\n})();",";(function() {\n    'use strict';\n\n    /**\n\t *  Constants for GeocoderChannel\n\t *  \n\t *  NOTE: if you want to change this constant do this in a config section of angular\n\t */\n\tvar GeocoderChannelConstant =  {\n\t\t\t// Retrieve action\n\t\t\tretrieveConfirmed\t\t: 'event:drupal-geocoder-retrieveConfirmed',\n\t\t\tretrieveFailed  \t\t: 'event:drupal-geocoder-retrieveFailed',\n\t\t\t// Index action\n\t\t\tindexConfirmed\t\t\t: 'event:drupal-geocoder-indexConfirmed',\n\t\t\tindexFailed  \t\t\t: 'event:drupal-geocoder-indexFailed'\n\t};\n    \n\t/**\n\t * Geocoder Channel Constant\n\t */\n\tangular\n\t    .module('d7-services.resources.geocoder.channelConstant', [])\n\t    .constant(\"GeocoderChannelConstant\", GeocoderChannelConstant);\n\n})();\n",";(function() {\n    'use strict';\n\n    /**\n     *  Helper constants for GeocoderResourceModules\n     *\n     *  NOTE: if you want to change this constant do this in your app.js config section\n     */\n    var GeocoderHelperConstant =  {\n        //default handlers\n        \"handlers\": {\n            \"exif\": \"Image/exif - Get a location from an image that was taken with a GPS enabled phone or camera\",\n            \"yahoo\": \"Yahoo Placefinder - Geocodes via Yahoo Placefinder\",\n            \"mapquest_nominatim\": \"MapQuest Nominatim - Geocodes via MapQuest Nominatim\",\n            \"latlon\": \"Latitude / Longitude - Parse location from freeform latitude and longitude string\",\n            \"openstreetmap_nominatim\": \"OpenStreetMap Nominatim - Geocodes via OpenStreetMap Nominatim\",\n            \"wkt\": \"WKT - Get the geometry of a WKT string\",\n            \"google\": \"Google Geocoder - Geocodes via google geocoder\",\n            \"json\": \"GeoJSON - Get the geometry of a GeoJSON string, file, or URL\",\n            \"kml\": \"KML - Get the geometry out of a KML string, file, or URL. Supports KMZ files upload as well.\",\n            \"yandex\": \"Yandex (??????.????) - Geocodes addresses via Yandex (??????.????)\",\n            \"gpx\": \"GPX - Get the geometry of a GPX string or file\",\n            \"bing\": \"Bing - Geocodes via Bing\"\n        },\n        //default output-formats\n        \"output_formats\": {\n            \"wkt\": \"WKT\",\n            \"ewkt\": \"EWKT\",\n            \"wkb\": \"WKB\",\n            \"ewkb\": \"EWKB\",\n            \"json\": \"GeoJSON\",\n            \"kml\": \"KML\",\n            \"gpx\": \"GPX\",\n            \"georss\": \"GeoRSS\",\n            \"google_geocode\": \"GoogleGeocode\",\n            \"geohash\": \"GeoHash\"\n        }\n\n    };\n\n    /**\n     * Geocoder Helper Constant Modules\n     */\n    angular\n        .module('d7-services.resources.geocoder.helperConstant', [])\n        .constant(\"GeocoderHelperConstant\", GeocoderHelperConstant);\n\n})();\n",";(function() {\n\t'use strict';\n\n\t/**\n\t * Geocoder Resource Modules\n\t *\n\t * see sourcecode in services/resources/geocoder_resource.inc\n\t **/\n\tangular.module('d7-services.resources.geocoder.resource', ['d7-services.commons.configurations', 'd7-services.resources.geocoder', 'd7-services.resources', 'd7-services.commons.baseResource'])\n\n\t/**\n\t * GeocoderResource\n\t *\n\t * This service mirrors the Drupal geocoder resource of the services 3.x module.\n\t * To use this you have to set following line in your Drupal CORS module settings\n\t * your_api_endpoint/geocoder/*|<mirror>|POST|Content-Type,Authorization|true\n\t *\n\t **/\n\t\t.factory('GeocoderResource', GeocoderResource);\n\n\t/**\n\t * Manually identify dependencies for minification-safe code\n\t *\n\t **/\n\tGeocoderResource.$inject = ['$http', 'BaseResource', 'DrupalApiConstant', 'GeocoderResourceConstant', 'GeocoderChannel'];\n\n\t/** @ngInject */\n\tfunction GeocoderResource($http, BaseResource, DrupalApiConstant, GeocoderResourceConstant, GeocoderChannel) {\n\n\t\t//setup and return service            \t\n\t\tvar geocoderResourceService = {\n\t\t\t//actions\n\t\t\tretrieve \t: retrieve,\n\t\t\tindex \t\t: index\n\t\t};\n\n\t\treturn geocoderResourceService;\n\n\t\t////////////\n\n\t\t/**\n\t\t * retrieve\n\t\t *\n\t\t * Geocode data\n\t\t *\n\t\t * Method: GET\n\t\t * Url: http://drupal_instance/api_endpoint/geocoder/{HANDLER}\n\t\t *\n\t\t * @params  {Object} data The requests data\n\t\t * \t\t\t@key \t{String} handler The geocoder handler to use - google, gpx, kml etc., required:true, source:path\n\t\t * \t\t\t@key \t{String} data Value to geocode., required:true, source:param\n\t\t * \t\t\t@key \t{String} output Output Format (GPX, WKT, etc.), required:false, source:param\n\t\t *\n\t\t * @return \t{Promise} A geocoder object\n\t\t *\n\t\t **/\n\t\tfunction retrieve(data) {\n\t\t\tvar retrievePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + GeocoderResourceConstant.resourcePath + '/' + data.handler;\n\t\t\tdelete data.handler;\n\t\t\tretrievePath += '?'+BaseResource.prepareGetParams(data, true,'json');\n\t\t\treturn BaseResource.retrieve( retrievePath,GeocoderChannel.pubRetrieveConfirmed,  GeocoderChannel.pubRetrieveFailed);\n\t\t};\n\n\t\t/**\n\t\t * index\n\t\t *\n\t\t * List Geocoder Capabilities\n\t\t *\n\t\t * Method: GET\n\t\t * Url: http://drupal_instance/api_endpoint/geocoder/\n\t\t *\n\t\t * @return \t{Promise} A geocoder object\n\t\t *\n\t\t **/\n\t\tfunction index() {\n\t\t\tvar indexPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + GeocoderResourceConstant.resourcePath ;\n\t\t\treturn BaseResource.retrieve(indexPath, GeocoderChannel.pubIndexConfirmed, GeocoderChannel.pubIndexFailed);\n\t\t};\n\n\t}\n\n})();\n\t",";(function() {\n    'use strict';\n    \n    /**\n\t *  Constants for GeocoderResourceModules\n\t *  \n\t *  NOTE: if you want to change this constant do this in your app.js config section\n\t */\n\tvar GeocoderResourceConstant =  {\n\n\t\t// NOTE: if you set custom aliases for your recources in [your.domain.org]/admin/structure/services/list/[machinereadable_name_of_endpoint]/resources change value here\n\t\tresourcePath : 'geocoder',\n\t\t//actions of geocoder resource\n\t\tactions : {\n\t\t\t//retrieve \t: 'retrieve',\n\t\t\t//index \t: 'index'\n\t\t}\n\n\t};\n\n\t/**\n\t * Geocoder Constant Modules\n\t */\n\tangular\n\t    .module('d7-services.resources.geocoder.resourceConstant', [])\n\t    .constant(\"GeocoderResourceConstant\", GeocoderResourceConstant);\n\t\n})();\n",";(function() {\n    'use strict';\n\n\t/**\n\t * @ngdoc object\n\t * @name d7-services.resources.definition:Definition\n\t * @description\n\t * This module bundles all modules related to drupal definition resource\n\t * @requires d7-services.resources.definition.resourceConstant:DefinitionResourceConstant\n\t * @requires d7-services.resources.definition.resource:DefinitionResource\n\t * @requires d7-services.resources.definition.channelConstant:DefinitionChannelConstant\n\t * @requires d7-services.resources.definition.channel:DefinitionChannel\n\t */\n\tangular.module('d7-services.resources.definition', \n\t\t\t['d7-services.resources.definition.resourceConstant', \n\t\t\t 'd7-services.resources.definition.resource', \n\t\t\t 'd7-services.resources.definition.channelConstant', \n\t\t\t 'd7-services.resources.definition.channel']);\n})();",";(function() {\n\t'use strict';\n\n\t/**\n\t * Definition Channel Module\n\t */\n\tangular.module('d7-services.resources.definition.channel', ['d7-services.commons.baseChannel', 'd7-services.resources.definition.channelConstant'])\n\t\t   .factory('DefinitionChannel', DefinitionChannel);\n\n\t\n\t/**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t **/\n\tDefinitionChannel.$inject = [ 'BaseChannel', 'DefinitionChannelConstant' ];\n\t\n\t/**\n\t * Notification channel for definition resource \n\t**/\n\t\n\t/** @ngInject */\n\tfunction DefinitionChannel(BaseChannel, DefinitionChannelConstant) {\n\t\n\t\t//setup and return service            \t\n        var definitionChannelService = {\n\n        \t//definition index request\n        \tpubIndexConfirmed \t\t: pubIndexConfirmed,\n        \tsubIndexConfirmed\t\t: subIndexConfirmed,\n        \tpubIndexFailed \t\t\t: pubIndexFailed,\n        \tsubIndexFailed\t\t\t: subIndexFailed\n        };\n        \n        return definitionChannelService;\n\n        ////////////\n\n    \t//Definition index request functions\n\n    \t/**\n    \t * pubIndexConfirmed\n    \t * \n    \t * Publish the DefinitionIndexConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubIndexConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(DefinitionChannelConstant.indexConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subIndexConfirmed\n    \t * \n    \t * subscribe for the DefinitionIndexConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for DefinitionIndexConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subIndexConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( DefinitionChannelConstant.indexConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubIndexConfirmed\n    \t * \n    \t * Publish the DefinitionIndexConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubIndexFailed(args) {\n    \t\tBaseChannel.pubRootEmit(DefinitionChannelConstant.indexFailed, args);\n    \t};\n\n    \t/**\n    \t * subIndexFailed\n    \t * \n    \t * subscribe for the DefinitionIndexFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexFailed function\n    \t * @param \t{function} scopeHandler The callback handler for DefinitionIndexFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subIndexFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( DefinitionChannelConstant.indexFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n\t};\n\n})();",";(function() {\n    'use strict';\n\n    /**\n\t *  Constants for DefinitionChannel\n\t *  \n\t *  NOTE: if you want to change this constant do this in a config section of angular\n\t */\n\tvar DefinitionChannelConstant =  {\n \t\t\t// Index action\n \t\t\tindexConfirmed  \t\t: 'event:drupal-definition-indexConfirmed',\n \t\t\tindexFailed  \t\t\t: 'event:drupal-definition-indexFailed'\n\t};\n    \n\t/**\n\t * Definition Channel Constant\n\t */\n\tangular\n\t    .module('d7-services.resources.definition.channelConstant', [])\n\t    .constant(\"DefinitionChannelConstant\", DefinitionChannelConstant);\n\n})();\n",";(function() {\n    'use strict';\n\n\t/**\n\t * Definition Resource Modules\n\t * \n\t * see sourcecode in services/resources/definition_resource.inc\n\t**/\n    angular.module('d7-services.resources.definition.resource', ['d7-services.commons.configurations', 'd7-services.resources.definition.resourceConstant', 'd7-services.resources.definition.channel', 'd7-services.commons.baseResource'])\n    \n    /**\n\t * DefinitionResource\n\t * \n\t * This service mirrors the Drupal definition resource of the services 3.x module.\n\t * To use this you have to set following line in your Drupal CORS module settings\n\t * your_api_endpoint/definition/*|<mirror>|POST|Content-Type,Authorization|true\n\t * \n\t**/\n    .factory('DefinitionResource', DefinitionResource);\n\n    /**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t**/\n    DefinitionResource.$inject = ['$http', 'BaseResource', 'DrupalApiConstant', 'DefinitionResourceConstant', 'DefinitionChannel'];\n    \n\t/** @ngInject */\n\tfunction DefinitionResource($http, BaseResource, DrupalApiConstant, DefinitionResourceConstant, DefinitionChannel) { \n\t\t\n\t\t//setup and return service            \t\n        var definitionResourceService = {\n        \t//CRUD operations\n    \t    index \t\t: index\n        };\n        \n        return definitionResourceService;\n\n        ////////////\n\n\t    /**\n\t     * index\n\t     * \n\t     * List all definitions\n\t     * \n\t     * Method: GET\n\t\t * Url: http://drupal_instance/api_endpoint/definition\n\t\t * \n\t\t * @params  {Object} data the requests data\n\t\t *\n\t     * \n\t     * @return \t{Promise}\n\t     *\n\t    **/\n\t    function index() {\n\t    \tvar indexPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + DefinitionResourceConstant.resourcePath + '/';\n\t    \treturn BaseResource.retrieve(indexPath, DefinitionChannel.pubIndexConfirmed, DefinitionChannel.pubIndexFailed);\n\t    };\n\n\t};\n\n})();",";(function() {\n    'use strict';\n    \n    /**\n\t *  Constants for DefinitionResourceModules\n\t *  \n\t *  NOTE: if you want to change this constant do this in your app.js config section\n\t */\n\tvar DefinitionResourceConstant =  {\n\n\t\t// NOTE: This is the default alias aliases for your system resources defined in Drupal\n\t\tresourcePath : 'definition',\n\t\t//actions of user resource\n\t\tactions : {\n\t\t\t//following actions are defined over their request method (GET) so they are commented out\n\t\t    //index \t: 'index'\n\t\t}\n\n\t};\n\n\t/**\n\t * Definition Constant Modules\n\t */\n\tangular\n\t    .module('d7-services.resources.definition.resourceConstant', [])\n\t    .constant(\"DefinitionResourceConstant\", DefinitionResourceConstant);\n\t\n})();\n",";\n(function () {\n  'use strict';\n\n  /**\n   * @ngdoc object\n   * @name d7-services.resources.taxonomy_vocabulary:TaxonomyVocabulary\n   * @description\n   * This Module bundles all modules related to drupal taxonomy_vocabulary resource\n   * @requires d7-services.resources.taxonomy_vocabulary.resourceConstant:TaxonomyVocabularyResourceConstant\n   * @requires d7-services.resources.taxonomy_vocabulary.resource:TaxonomyVocabularyResource\n   * @requires d7-services.resources.taxonomy_vocabulary.channelConstant:TaxonomyVocabularyChannelConstant\n   * @requires d7-services.resources.taxonomy_vocabulary.channel:TaxonomyVocabularyChannel\n   */\n  angular\n    .module('d7-services.resources.taxonomy_vocabulary', [\n      'd7-services.resources.taxonomy_vocabulary.resourceConstant',\n      'd7-services.resources.taxonomy_vocabulary.resource',\n      'd7-services.resources.taxonomy_vocabulary.channelConstant',\n      'd7-services.resources.taxonomy_vocabulary.channel']);\n})();",";(function() {\n\t'use strict';\n\n\t/**\n\t * TaxonomyVocabulary Channel Module\n\t */\n\tangular.module('d7-services.resources.taxonomy_vocabulary.channel', ['d7-services.commons.baseChannel', 'd7-services.resources.taxonomy_vocabulary.channelConstant'])\n\t\t   .factory('TaxonomyVocabularyChannel', TaxonomyVocabularyChannel);\n\n\t\n\t/**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t **/\n\tTaxonomyVocabularyChannel.$inject = [ 'BaseChannel', 'TaxonomyVocabularyChannelConstant' ];\n\t\n\t/**\n\t * Notification channel for taxonomy_vocabulary resource \n\t**/\n\t\n\t/** @ngInject */\n\tfunction TaxonomyVocabularyChannel(BaseChannel, TaxonomyVocabularyChannelConstant) {\n\t\n\t\t//setup and return service            \t\n        var taxonomy_vocabularyChannelService = {\n        \t\t\n        \t//taxonomy_vocabulary retrieve request\n    \t\tpubRetrieveConfirmed \t: pubRetrieveConfirmed,\n    \t\tsubRetrieveConfirmed\t: subRetrieveConfirmed,\n    \t\tpubRetrieveFailed \t\t: pubRetrieveFailed,\n    \t\tsubRetrieveFailed\t\t: subRetrieveFailed,\n    \t\t\n        \t//taxonomy_vocabulary create request\n        \tpubCreateConfirmed \t\t: pubCreateConfirmed,\n        \tsubCreateConfirmed\t\t: subCreateConfirmed,\n        \tpubCreateFailed \t\t: pubCreateFailed,\n        \tsubCreateFailed\t\t\t: subCreateFailed,\n        \t\n        \t//taxonomy_vocabulary update request\n        \tpubUpdateConfirmed \t\t: pubUpdateConfirmed,\n        \tsubUpdateConfirmed\t\t: subUpdateConfirmed,\n        \tpubUpdateFailed \t\t: pubUpdateFailed,\n        \tsubUpdateFailed\t\t\t: subUpdateFailed,\n        \t\n        \t//taxonomy_vocabulary delete request\n        \tpubDeleteConfirmed \t\t: pubDeleteConfirmed,\n        \tsubDeleteConfirmed\t\t: subDeleteConfirmed,\n        \tpubDeleteFailed \t\t: pubDeleteFailed,\n        \tsubDeleteFailed\t\t\t: subDeleteFailed,\n        \t\n        \t//taxonomy_vocabulary index request\n        \tpubIndexConfirmed \t\t: pubIndexConfirmed,\n        \tsubIndexConfirmed\t\t: subIndexConfirmed,\n        \tpubIndexFailed \t\t\t: pubIndexFailed,\n        \tsubIndexFailed\t\t\t: subIndexFailed,\n        \t\n        \t//taxonomy_vocabulary getTree request\n        \tpubGetTreeConfirmed \t\t: pubGetTreeConfirmed,\n        \tsubGetTreeConfirmed\t\t\t: subGetTreeConfirmed,\n        \tpubGetTreeFailed \t\t\t: pubGetTreeFailed,\n        \tsubGetTreeFailed\t\t\t: subGetTreeFailed,\n\n\t\t\t//taxonomy_vocabulary retrieveByMachineNameConfirmed request\n\t\t\tpubRetrieveByMachineNameConfirmed \t\t: pubRetrieveByMachineNameConfirmed,\n\t\t\tsubRetrieveByMachineNameConfirmed\t\t: subRetrieveByMachineNameConfirmed,\n\t\t\tpubRetrieveByMachineNameFailed \t\t\t: pubRetrieveByMachineNameFailed,\n\t\t\tsubRetrieveByMachineNameFailed\t\t\t: subRetrieveByMachineNameFailed,\n\n        };\n        \n        return taxonomy_vocabularyChannelService;\n\n        ////////////\n        \n        //TaxonomyVocabulary retrieve request functions\n        \n        /**\n\t\t * pubRetrieveConfirmed\n\t\t * \n\t\t * Publish the TaxonomyVocabularyRetrieveConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubRetrieveConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.retrieveConfirmed, args);\n    \t};\n    \t\n    \t/**\n\t\t * subRetrieveConfirmed\n\t\t * \n\t\t * subscribe for the TaxonomyVocabularyRetrieveConfirmed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveConfirmed function\n\t\t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyRetrieveConfirmed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subRetrieveConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.retrieveConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n    \t\n    \t//###############\n    \t\n        \n        /**\n\t\t * pubRetrieveConfirmed\n\t\t * \n\t\t * Publish the TaxonomyVocabularyRetrieveConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubRetrieveFailed(args) {\n    \t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.retrieveFailed, args);\n    \t};\n    \t\n    \t/**\n\t\t * subRetrieveFailed\n\t\t * \n\t\t * subscribe for the TaxonomyVocabularyRetrieveFailed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveFailed function\n\t\t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyRetrieveFailed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subRetrieveFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.retrieveFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n    \t//TaxonomyVocabulary create request functions\n\n    \t/**\n    \t * pubCreateConfirmed\n    \t * \n    \t * Publish the TaxonomyVocabularyCreateConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubCreateConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.createConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subCreateConfirmed\n    \t * \n    \t * subscribe for the TaxonomyVocabularyCreateConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyCreateConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subCreateConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.createConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubCreateConfirmed\n    \t * \n    \t * Publish the TaxonomyVocabularyCreateConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubCreateFailed(args) {\n    \t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.createFailed, args);\n    \t};\n\n    \t/**\n    \t * subCreateFailed\n    \t * \n    \t * subscribe for the TaxonomyVocabularyCreateFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateFailed function\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyCreateFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subCreateFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.createFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n\n    \t//TaxonomyVocabulary update request functions\n\n    \t/**\n    \t * pubUpdateConfirmed\n    \t * \n    \t * Publish the TaxonomyVocabularyUpdateConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubUpdateConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.updateConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subUpdateConfirmed\n    \t * \n    \t * subscribe for the TaxonomyVocabularyUpdateConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyUpdateConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subUpdateConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.updateConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n    \t/**\n    \t * pubUpdateConfirmed\n    \t * \n    \t * Publish the TaxonomyVocabularyUpdateConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubUpdateFailed(args) {\n    \t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.updateFailed, args);\n    \t};\n\n    \t/**\n    \t * subUpdateFailed\n    \t * \n    \t * subscribe for the TaxonomyVocabularyUpdateFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateFailed function\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyUpdateFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subUpdateFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.updateFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n    \t//TaxonomyVocabulary delete request functions\n\n    \t/**\n    \t * pubDeleteConfirmed\n    \t * \n    \t * Publish the TaxonomyVocabularyDeleteConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubDeleteConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.deleteConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subDeleteConfirmed\n    \t * \n    \t * subscribe for the TaxonomyVocabularyDeleteConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyDeleteConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subDeleteConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.deleteConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubDeleteConfirmed\n    \t * \n    \t * Publish the TaxonomyVocabularyDeleteConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubDeleteFailed(args) {\n    \t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.deleteFailed, args);\n    \t};\n\n    \t/**\n    \t * subDeleteFailed\n    \t * \n    \t * subscribe for the TaxonomyVocabularyDeleteFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteFailed function\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyDeleteFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subDeleteFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.deleteFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n\n    \t//TaxonomyVocabulary index request functions\n\n    \t/**\n    \t * pubIndexConfirmed\n    \t * \n    \t * Publish the TaxonomyVocabularyIndexConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubIndexConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.indexConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subIndexConfirmed\n    \t * \n    \t * subscribe for the TaxonomyVocabularyIndexConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyIndexConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subIndexConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.indexConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubIndexConfirmed\n    \t * \n    \t * Publish the TaxonomyVocabularyIndexConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubIndexFailed(args) {\n    \t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.indexFailed, args);\n    \t};\n\n    \t/**\n    \t * subIndexFailed\n    \t * \n    \t * subscribe for the TaxonomyVocabularyIndexFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexFailed function\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyIndexFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subIndexFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.indexFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n\n\t\t//TaxonomyVocabulary getTree request functions\n\n\t\t/**\n\t\t * pubGetTreeConfirmed\n\t\t *\n\t\t * Publish the TaxonomyVocabularyGetTreeConfirmed event with giver args\n\t\t *\n\t\t * @param \t{Object} args The events arguments\n\t\t *\n\t\t *\n\t\t **/\n\t\tfunction pubGetTreeConfirmed(args) {\n\t\t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.getTreeConfirmed, args);\n\t\t};\n\n\t\t/**\n\t\t * subGetTreeConfirmed\n\t\t *\n\t\t * subscribe for the TaxonomyVocabularyGetTreeConfirmed event\n\t\t *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subGetTreeConfirmed function\n\t\t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyGetTreeConfirmed event\n\t\t *\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t *\n\t\t **/\n\t\tfunction subGetTreeConfirmed(_Scope, scopeHandler) {\n\t\t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.getTreeConfirmed, _Scope, scopeHandler);\n\t\t\treturn unsubScopeHandler;\n\t\t};\n\n\t\t//###############\n\n\n\t\t/**\n\t\t * pubGetTreeConfirmed\n\t\t *\n\t\t * Publish the TaxonomyVocabularyGetTreeConfirmed event with giver args\n\t\t *\n\t\t * @param \t{Object} args The events arguments\n\t\t *\n\t\t *\n\t\t **/\n\t\tfunction pubGetTreeFailed(args) {\n\t\t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.getTreeFailed, args);\n\t\t};\n\n\t\t/**\n\t\t * subGetTreeFailed\n\t\t *\n\t\t * subscribe for the TaxonomyVocabularyGetTreeFailed event\n\t\t *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subGetTreeFailed function\n\t\t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyGetTreeFailed event\n\t\t *\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t *\n\t\t **/\n\t\tfunction subGetTreeFailed(_Scope, scopeHandler) {\n\t\t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.getTreeFailed, _Scope, scopeHandler);\n\t\t\treturn unsubsSopeHandler;\n\t\t};\n\n\t\t//________________________________________________________________________________________________________________________________________\n\n\t\t//TaxonomyVocabulary retrieveByMachineNameConfirmed request functions\n\n\t\t/**\n\t\t * pubRetrieveByMachineNameConfirmedConfirmed\n\t\t *\n\t\t * Publish the TaxonomyVocabularyRetrieveByMachineNameConfirmedConfirmed event with giver args\n\t\t *\n\t\t * @param \t{Object} args The events arguments\n\t\t *\n\t\t *\n\t\t **/\n\t\tfunction pubRetrieveByMachineNameConfirmedConfirmed(args) {\n\t\t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.retrieveByMachineNameConfirmedConfirmed, args);\n\t\t};\n\n\t\t/**\n\t\t * subRetrieveByMachineNameConfirmedConfirmed\n\t\t *\n\t\t * subscribe for the TaxonomyVocabularyRetrieveByMachineNameConfirmedConfirmed event\n\t\t *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveByMachineNameConfirmedConfirmed function\n\t\t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyRetrieveByMachineNameConfirmedConfirmed event\n\t\t *\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t *\n\t\t **/\n\t\tfunction subRetrieveByMachineNameConfirmed(_Scope, scopeHandler) {\n\t\t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.retrieveByMachineNameConfirmed, _Scope, scopeHandler);\n\t\t\treturn unsubScopeHandler;\n\t\t};\n\n\t\t//###############\n\n\n\t\t/**\n\t\t * pubRetrieveByMachineNameConfirmedConfirmed\n\t\t *\n\t\t * Publish the TaxonomyVocabularyRetrieveByMachineNameConfirmedConfirmed event with giver args\n\t\t *\n\t\t * @param \t{Object} args The events arguments\n\t\t *\n\t\t *\n\t\t **/\n\t\tfunction pubRetrieveByMachineNameConfirmedFailed(args) {\n\t\t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.retrieveByMachineNameConfirmedFailed, args);\n\t\t};\n\n\t\t/**\n\t\t * subRetrieveByMachineNameConfirmedFailed\n\t\t *\n\t\t * subscribe for the TaxonomyVocabularyRetrieveByMachineNameConfirmedFailed event\n\t\t *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveByMachineNameConfirmedFailed function\n\t\t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyRetrieveByMachineNameConfirmedFailed event\n\t\t *\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t *\n\t\t **/\n\t\tfunction subRetrieveByMachineNameFailed(_Scope, scopeHandler) {\n\t\t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.retrieveByMachineNameFailed, _Scope, scopeHandler);\n\t\t\treturn unsubScopeHandler;\n\t\t};\n    \t\n\t};\n\n})();",";(function() {\n    'use strict';\n\n    /**\n\t *  Constants for TaxonomyVocabularyChannel\n\t *  \n\t *  NOTE: if you want to change this constant do this in a config section of angular\n\t */\n\tvar TaxonomyVocabularyChannelConstant =  {\n\t\t\t//CRUD\n\t \t\t// Retrieve operation\n \t\t\tretrieveConfirmed\t\t: 'event:drupal-taxonomy_vocabulary-retrieveConfirmed',\n \t\t\tretrieveFailed\t\t\t: 'event:drupal-taxonomy_vocabulary-retrieveFailed',\n \t\t\t// Create operation\n \t\t\tcreateConfirmed\t\t\t: 'event:drupal-taxonomy_vocabulary-createConfirmed',\n \t\t\tcreateFailed\t\t\t: 'event:drupal-taxonomy_vocabulary-createFailed',\n \t\t\t// Update operation\n \t\t\tupdateConfirmed\t\t\t: 'event:drupal-taxonomy_vocabulary-updateConfirmed',\n \t\t\tupdateFailed\t\t\t: 'event:drupal-taxonomy_vocabulary-updateFailed',\n \t\t\t// Delete operation\n \t\t\tdeleteConfirmed\t\t\t: 'event:drupal-taxonomy_vocabulary-deleteConfirmed',\n \t\t\tdeleteFailed\t\t\t: 'event:drupal-taxonomy_vocabulary-deleteFailed',\n \t\t\t// Index action\n \t\t\tindexConfirmed\t\t\t: 'event:drupal-taxonomy_vocabulary-indexConfirmed',\n \t\t\tindexFailed\t\t\t\t: 'event:drupal-taxonomy_vocabulary-indexFailed',\n \t\t\t// getTree action\n \t\t\tgetTreeConfirmed\t: 'event:drupal-taxonomy_vocabulary-getTreeConfirmed',\n \t\t\tgetTreeFailed\t\t: 'event:drupal-taxonomy_vocabulary-getTreeFailed',\n\t\t\t// retrieveByMachineName action\n\t\t\tretrieveByMachineNameConfirmed\t\t: 'event:drupal-taxonomy_vocabulary-retrieveByMachineNameConfirmed',\n\t\t\tretrieveByMachineNameFailed\t\t: 'event:drupal-taxonomy_vocabulary-retrieveByMachineNameFailed',\n\n\n\t};\n    \n\t/**\n\t * TaxonomyVocabulary Channel Constant\n\t */\n\tangular\n\t    .module('d7-services.resources.taxonomy_vocabulary.channelConstant', [])\n\t    .constant(\"TaxonomyVocabularyChannelConstant\", TaxonomyVocabularyChannelConstant);\n\n})();\n",";(function() {\n    'use strict';\n\n\t/**\n\t * TaxonomyVocabulary Resource Modules\n\t * \n\t * see sourcecode in services/resources/taxonomy_vocabulary_resource.inc\n\t**/\n    angular.module('d7-services.resources.taxonomy_vocabulary.resource', ['d7-services.commons.configurations', 'd7-services.resources.taxonomy_vocabulary.resourceConstant', 'd7-services.resources.taxonomy_vocabulary.channel', 'd7-services.commons.baseResource'])\n    \n    /**\n\t * TaxonomyVocabularyResource\n\t * \n\t * This service mirrors the Drupal taxonomy_vocabulary resource of the services 3.x module.\n\t * To use this you have to set following line in your Drupal CORS module settings\n\t * your_api_endpoint/taxonomy_vocabulary/*|<mirror>|POST|Content-Type,Authorization|true\n\t * \n\t**/\n    .factory('TaxonomyVocabularyResource', TaxonomyVocabularyResource);\n\n    /**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t**/\n    TaxonomyVocabularyResource.$inject = ['$http', 'BaseResource', 'DrupalApiConstant', 'TaxonomyVocabularyResourceConstant', 'TaxonomyVocabularyChannel'];\n    \n\t/** @ngInject */\n\tfunction TaxonomyVocabularyResource($http, BaseResource, DrupalApiConstant, TaxonomyVocabularyResourceConstant, TaxonomyVocabularyChannel) { \n\t\t\n\t\t//setup and return service            \t\n        var taxonomy_vocabularyResourceService = {\n        \t//CRUD operations\n        \tretrieve \t: retrieve,\n    \t\tcreate \t\t: create,\n    \t\tupdate \t\t: update,\n    \t\tdelete \t\t: _delete,\n    \t    index \t\t: index,\n    \t    //Actions\n    \t    getTree\t: getTree,\n\t\t\tretrieveByMachineName : retrieveByMachineName\n        \t\n        };\n        \n        return taxonomy_vocabularyResourceService;\n\n        ////////////\n        \n        /**\n\t\t * retrieve\n\t\t * \n\t\t * Retrieve a taxonomy vocabulary\n\t\t * \n\t\t * Method: GET \n\t\t * Url: http://drupal_instance/api_endpoint/taxonomy_vocabulary/{TID}\n\t\t * \n\t\t * @params  {Object} data The requests data\n\t\t * \t\t\t@key \t{Integer} tid The vid of the taxonomy vocabulary to get, required:true, source:path\n\t\t * \n\t\t * @return \t{Promise} A taxonomy_vocabulary object\n\t\t * \n\t\t**/\n    \tfunction retrieve(data) {\n    \t\tvar retrievePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyVocabularyResourceConstant.resourcePath + '/' + data.vid;\n    \t\treturn BaseResource.retrieve( retrievePath,TaxonomyVocabularyChannel.pubRetrieveConfirmed,  TaxonomyVocabularyChannel.pubRetrieveFailed);\n\t    };\n\t    \n\t    /**\n\t     * create\n\t     * \n\t     * Create a taxonomy vocabulary\n\t     * This function uses drupal_form_submit() and as such expects all input to match\n\t     * the submitting form in question.\n\t     * \n\t     * Method: POST\n\t     * Url: http://drupal_instance/api_endpoint/taxonomy_vocabulary\n\t     * \n\t     * @params  {Object} data The vid of the taxonomy vocabulary to get, required:true, source:post body\n\t     * \n\t\t *\n\t\t *  Roles can be passed in a roles property which is an associative\n\t\t *  array formatted with '<role id>' => '<role id>', not including the authenticated taxonomy_vocabulary role, which is given by default.\n\t     * \n\t     * @return \t{Promise} The taxonomy_vocabulary object of the newly created taxonomy_vocabulary.\n\t     *\n\t    **/\n\t    function create(data) {\n\t    \t\n\t    \tvar createPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyVocabularyResourceConstant.resourcePath;\n\n\t    \tvar createData \t= { \n\t    \t\t\tvocabulary : data \n    \t\t};\n\n    \t\treturn BaseResource.create( createData, createPath,  TaxonomyVocabularyChannel.pubCreateConfirmed, TaxonomyVocabularyChannel.pubCreateFailed);\n\n\t    };\n\t        \n\t    /**\n\t     * update\n\t     * \n\t     * Update a taxonomy vocabulary\n\t     * \n\t     * Method: PUT\n\t     * Url: http://drupal_instance/api_endpoint/taxonomy_vocabulary/{TID}\n\t     * \n\t     * @params  {Object} data The requests data\n\t     * \t\t\t@key \t{Integer} vid The unique identifier for this taxonomy vocabulary., required:true, source:path\n\t     * \t\t\t@key \t{Array}  vocabulary The taxonomy vocabulary data to update, required:true, source:post body\n\t     * \n\t     * @return \t{Promise}\n\t     *\n\t    **/\n\t    function update(data) {\n\t    \t\n\t    \tvar updatePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyVocabularyResourceConstant.resourcePath + '/' + data.vid;\n\t    \t\n    \t\tvar updateData \t= {vocabulary : data};\n    \t\t\n    \t\treturn BaseResource.update( updateData, updatePath, TaxonomyVocabularyChannel.pubUpdateConfirmed, TaxonomyVocabularyChannel.pubUpdateFailed);\n\n\t    };\n\t    \n\t    /**\n\t     * delete\n\t     * \n\t     * Delete a taxonomy vocabulary\n\t     * \n\t     * Method: DELETE\n\t     * Url: http://drupal_instance/api_endpoint/taxonomy_vocabulary/{TID}\n\t     * \n\t     * @params  {Object} data the requests data\n\t     * \t\t\t@key \t{Integer} tid The id of the taxonomy vocabulary to delete, required:true, source:path\n\t     * \n\t     * @return \t{Promise}\n\t     *\n\t    **/\n\t    function _delete(data) {\n\t    \tvar deletePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyVocabularyResourceConstant.resourcePath + '/' + data.tid\n\t    \treturn BaseResource.delete(deletePath, TaxonomyVocabularyChannel.pubDeleteConfirmed, TaxonomyVocabularyChannel.pubDeleteFailed);\n\t    };\n\t    \n\t    /**\n\t     * index\n\t     * \n\t     * List all taxonomy vocabularies\n\t     * \n\t     * Method: GET\n\t\t * Url: http://drupal_instance/api_endpoint/taxonomy_vocabulary\n\t\t * \n\t\t * @params  {Object} data the requests data\n\t\t * \t\t@key \t{Integer} page The zero-based index of the page to get. defaults to 0., required:false, source:param\n\t\t * \t\t@key \t{Integer} pagesize Number of records to get per page., required:false, source:param\n\t\t * \t\t@key \t{String} fields The fields to get., required:false, source:param\n\t\t * \t\t@key \t{Array} parameters Parameters, required:false, source:param\n\t\t * \t\t\n\t     * \n\t     * @return \t{Promise}\n\t     *\n\t    **/\n\t    function index(data) {\n\t    \tvar indexPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyVocabularyResourceConstant.resourcePath + '/';\n\t    \treturn BaseResource.index(data, indexPath,TaxonomyVocabularyChannel.pubIndexConfirmed,  TaxonomyVocabularyChannel.pubIndexFailed);\n\t    };\n\t    \n\t\t/**\n\t\t * getTree\n\t\t *\n\t\t * Returns a full list of taxonomy terms.\n\t\t *\n\t\t * Method: POST\n\t\t * Url: http://drupal_instance/api_endpoint/taxonomy_vocabulary/getTree\n\t\t *\n\t\t * @params  {Object} data the requests data\n\t\t * \t\t@key \t{Integer} vid The vocabulary id to retrieve., separated by comma., required:true, source:post body\n\t\t * \t\t@key \t{Integer} parent The term ID under which to generate the tree. If 0, generate the tree for the entire vocabulary., required:false, source:post body\n\t\t * \t\t@key \t{Integer} maxdepth The number of levels of the tree to return. Leave NULL to return all levels., required:false, source:post body\n\t\t * \t\t@key \t{Integer} load_entities Whether the tree of terms should contain full term entity objects. If 1 (TRUE), a full entity load will occur on the term objects. Otherwise they are partial objects to save execution time and memory consumption. Defaults to 0 (FALSE)., required:false, source:post body\n\t\t *\n\t\t * @return \t{Promise}\n\t\t *\n\t\t **/\n\t\tfunction getTree(data) {\n\t\t\tvar  pathToGetTree = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyVocabularyResourceConstant.resourcePath + '/' + TaxonomyVocabularyResourceConstant.actions.getTree,\n\t\t\t\t requestConfig = {\n\t\t\t\t\turl\t\t: pathToGetTree,\n\t\t\t\t\tmethod\t: 'POST',\n\t\t\t\t\tdata : data\n\t\t\t\t};\n\n\t\t\treturn BaseResource.request(requestConfig,TaxonomyVocabularyChannel.pubGetTreeConfirmed,  TaxonomyVocabularyChannel.pubGetTreeFailed);\n\n\t\t};\n\n\t\t/**\n\t\t * retrieveByMachineName\n\t\t *\n\t\t * Returns a vocabulary based on machine name.\n\t\t *\n\t\t * Method: POST\n\t\t * Url: http://drupal_instance/api_endpoint/taxonomy_vocabulary/retrieveByMachineName\n\t\t *\n\t\t * @params  {Object} data the requests data\n\t\t * \t\t@key \t{String} vid The vocabulary id to retrieve., required:true, source:post body\n\t\t *\n\t\t * @return \t{Promise}\n\t\t *\n\t\t **/\n\t\tfunction retrieveByMachineName(data) {\n\t\t\tvar  pathToRetrieveByMachineName = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyVocabularyResourceConstant.resourcePath + '/' + TaxonomyVocabularyResourceConstant.actions.retrieveByMachineName,\n\t\t\t\trequestConfig = {\n\t\t\t\t\turl\t\t: pathToRetrieveByMachineName,\n\t\t\t\t\tmethod\t: 'POST',\n\t\t\t\t\tdata : data\n\t\t\t\t};\n\n\t\t\treturn BaseResource.request(requestConfig,TaxonomyVocabularyChannel.pubRetrieveByMachineNameConfirmed,  TaxonomyVocabularyChannel.pubRetrieveByMachineNameFailed);\n\n\t\t};\n\t\t\t\t\t\n\t};\n\n})();",";(function() {\n    'use strict';\n    \n    /**\n\t *  Constants for TaxonomyVocabularyResourceModules\n\t *  \n\t *  NOTE: if you want to change this constant do this in your app.js config section\n\t */\n\tvar TaxonomyVocabularyResourceConstant =  {\n\n\t\t// NOTE: This is the default alias aliases for your system resources defined in Drupal\n\t\tresourcePath : 'taxonomy_vocabulary',\n\t\t//actions of taxonomy_vocabulary resource\n\t\tactions : {\n\t\t\t//following actions are defined over their request method (GET, POST, PUT, DELETE) so they are commented out\n\t\t\t//retrieve \t\t\t\t: 'retrieve',\n\t\t\t//create \t\t\t\t: 'create',\n\t\t\t//update \t\t\t\t: 'update',\n\t\t\t//delete \t\t\t\t: 'delete',\n\t\t    //index \t\t\t\t: 'index',\n\t\t\t//\n\t\t\tgetTree \t\t\t\t: 'getTree',\n\t\t\tretrieveByMachineName \t: 'retrieveByMachineName'\n\t\t}\n\n\t};\n\n\t/**\n\t * TaxonomyVocabulary Constant Modules\n\t */\n\tangular\n\t    .module('d7-services.resources.taxonomy_vocabulary.resourceConstant', [])\n\t    .constant(\"TaxonomyVocabularyResourceConstant\", TaxonomyVocabularyResourceConstant);\n\t\n})();\n",";(function () {\n  'use strict';\n\n  /**\n   * @ngdoc object\n   * @name d7-services.resources.user:User\n   * @description\n   * This Module bundles all modules related to drupal user resource\n   * @requires d7-services.resources.user.resourceConstant:UserResourceConstant\n   * @requires d7-services.resources.user.resource:UserResource\n   * @requires d7-services.resources.user.channelConstant:UserChannelConstant\n   * @requires d7-services.resources.user.channel:UserChannel\n   */\n  angular\n    .module('d7-services.resources.user',\n    ['d7-services.resources.user.resourceConstant',\n      'd7-services.resources.user.resource',\n      'd7-services.resources.user.channelConstant',\n      'd7-services.resources.user.channel']);\n})();",";(function() {\n\t'use strict';\n\n\t/**\n\t * User Channel Module\n\t */\n\tangular.module('d7-services.resources.user.channel', ['d7-services.commons.baseChannel', 'd7-services.resources.user.channelConstant'])\n\t\t   .factory('UserChannel', UserChannel);\n\n\t\n\t/**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t **/\n\tUserChannel.$inject = [ 'BaseChannel', 'UserChannelConstant' ];\n\t\n\t/**\n\t * Notification channel for user resource \n\t**/\n\t\n\t/** @ngInject */\n\tfunction UserChannel(BaseChannel, UserChannelConstant) {\n\t\n\t\t//setup and return service            \t\n        var userChannelService = {\n        \t\t\n        \t//user retrieve request\n    \t\tpubRetrieveConfirmed \t: pubRetrieveConfirmed,\n    \t\tsubRetrieveConfirmed\t: subRetrieveConfirmed,\n    \t\tpubRetrieveFailed \t\t: pubRetrieveFailed,\n    \t\tsubRetrieveFailed\t\t: subRetrieveFailed,\n    \t\t\n        \t//user create request\n        \tpubCreateConfirmed \t\t: pubCreateConfirmed,\n        \tsubCreateConfirmed\t\t: subCreateConfirmed,\n        \tpubCreateFailed \t\t: pubCreateFailed,\n        \tsubCreateFailed\t\t\t: subCreateFailed,\n        \t\n        \t//user update request\n        \tpubUpdateConfirmed \t\t: pubUpdateConfirmed,\n        \tsubUpdateConfirmed\t\t: subUpdateConfirmed,\n        \tpubUpdateFailed \t\t: pubUpdateFailed,\n        \tsubUpdateFailed\t\t\t: subUpdateFailed,\n        \t\n        \t//user delete request\n        \tpubDeleteConfirmed \t\t: pubDeleteConfirmed,\n        \tsubDeleteConfirmed\t\t: subDeleteConfirmed,\n        \tpubDeleteFailed \t\t: pubDeleteFailed,\n        \tsubDeleteFailed\t\t\t: subDeleteFailed,\n        \t\n        \t//user index request\n        \tpubIndexConfirmed \t\t: pubIndexConfirmed,\n        \tsubIndexConfirmed\t\t: subIndexConfirmed,\n        \tpubIndexFailed \t\t\t: pubIndexFailed,\n        \tsubIndexFailed\t\t\t: subIndexFailed,\n        \t\n        \t//user token request\n        \tpubTokenConfirmed \t\t: pubTokenConfirmed,\n        \tsubTokenConfirmed\t\t: subTokenConfirmed,\n        \tpubTokenFailed \t\t\t: pubTokenFailed,\n        \tsubTokenFailed\t\t\t: subTokenFailed,\n        \t\n        \t//user register request\n    \t\tpubRegisterConfirmed \t: pubRegisterConfirmed,\n    \t\tsubRegisterConfirmed\t: subRegisterConfirmed,\n    \t\tpubRegisterFailed \t\t: pubRegisterFailed,\n    \t\tsubRegisterFailed\t\t: subRegisterFailed,\n    \t\t\n    \t\t//user register request\n    \t\tpubResendWelcomeEmailConfirmed \t: pubResendWelcomeEmailConfirmed,\n    \t\tsubResendWelcomeEmailConfirmed\t: subResendWelcomeEmailConfirmed,\n    \t\tpubResendWelcomeEmailFailed \t: pubResendWelcomeEmailFailed,\n    \t\tsubResendWelcomeEmailFailed\t\t: subResendWelcomeEmailFailed,\n    \t\t\n    \t\t//user cancel request\n    \t\tpubCancelConfirmed \t: pubCancelConfirmed,\n    \t\tsubCancelConfirmed\t: subCancelConfirmed,\n    \t\tpubCancelFailed \t: pubCancelFailed,\n    \t\tsubCancelFailed\t\t: subCancelFailed,\n    \t\t\n        \t//user login request\n    \t\tpubLoginConfirmed \t: pubLoginConfirmed,\n    \t\tsubLoginConfirmed\t: subLoginConfirmed,\n    \t\tpubLoginFailed \t\t: pubLoginFailed,\n    \t\tsubLoginFailed\t\t: subLoginFailed,\n    \t\t\n    \t\t//user logout request\n    \t\tpubLogoutConfirmed \t\t: pubLogoutConfirmed,\n        \tsubLogoutConfirmed\t\t: subLogoutConfirmed,\n        \tpubLogoutFailed \t\t: pubLogoutFailed,\n        \tsubLogoutFailed\t\t\t: subLogoutFailed,\n        \t\n        \t//user password_reset request\n        \tpubPasswordResetConfirmed \t\t: pubPasswordResetConfirmed,\n        \tsubPasswordResetConfirmed\t\t: subPasswordResetConfirmed,\n        \tpubPasswordResetFailed \t\t\t: pubPasswordResetFailed,\n        \tsubPasswordResetFailed\t\t\t: subPasswordResetFailed,\n\n        \t//user RequestNewPassword request\n        \tpubRequestNewPasswordConfirmed \t\t: pubRequestNewPasswordConfirmed,\n        \tsubRequestNewPasswordConfirmed\t\t: subRequestNewPasswordConfirmed,\n        \tpubRequestNewPasswordFailed \t\t: pubRequestNewPasswordFailed,\n        \tsubRequestNewPasswordFailed\t\t\t: subRequestNewPasswordFailed\n\n        };\n        \n        return userChannelService;\n\n        ////////////\n        \n        //User retrieve request functions\n        \n        /**\n\t\t * pubRetrieveConfirmed\n\t\t * \n\t\t * Publish the UserRetrieveConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubRetrieveConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.retrieveConfirmed, args);\n    \t};\n    \t\n    \t/**\n\t\t * subRetrieveConfirmed\n\t\t * \n\t\t * subscribe for the UserRetrieveConfirmed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveConfirmed function\n\t\t * @param \t{function} scopeHandler The callback handler for UserRetrieveConfirmed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subRetrieveConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.retrieveConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n    \t\n    \t//###############\n    \t\n        \n        /**\n\t\t * pubRetrieveConfirmed\n\t\t * \n\t\t * Publish the UserRetrieveConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubRetrieveFailed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.retrieveFailed, args);\n    \t};\n    \t\n    \t/**\n\t\t * subRetrieveFailed\n\t\t * \n\t\t * subscribe for the UserRetrieveFailed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveFailed function\n\t\t * @param \t{function} scopeHandler The callback handler for UserRetrieveFailed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subRetrieveFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.retrieveFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n    \t//User create request functions\n\n    \t/**\n    \t * pubCreateConfirmed\n    \t * \n    \t * Publish the UserCreateConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubCreateConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.createConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subCreateConfirmed\n    \t * \n    \t * subscribe for the UserCreateConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for UserCreateConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subCreateConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.createConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubCreateConfirmed\n    \t * \n    \t * Publish the UserCreateConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubCreateFailed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.createFailed, args);\n    \t};\n\n    \t/**\n    \t * subCreateFailed\n    \t * \n    \t * subscribe for the UserCreateFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateFailed function\n    \t * @param \t{function} scopeHandler The callback handler for UserCreateFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subCreateFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.createFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n\n    \t//User update request functions\n\n    \t/**\n    \t * pubUpdateConfirmed\n    \t * \n    \t * Publish the UserUpdateConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubUpdateConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.updateConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subUpdateConfirmed\n    \t * \n    \t * subscribe for the UserUpdateConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for UserUpdateConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subUpdateConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.updateConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n    \t/**\n    \t * pubUpdateConfirmed\n    \t * \n    \t * Publish the UserUpdateConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubUpdateFailed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.updateFailed, args);\n    \t};\n\n    \t/**\n    \t * subUpdateFailed\n    \t * \n    \t * subscribe for the UserUpdateFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateFailed function\n    \t * @param \t{function} scopeHandler The callback handler for UserUpdateFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subUpdateFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.updateFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n    \t//User delete request functions\n\n    \t/**\n    \t * pubDeleteConfirmed\n    \t * \n    \t * Publish the UserDeleteConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubDeleteConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.deleteConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subDeleteConfirmed\n    \t * \n    \t * subscribe for the UserDeleteConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for UserDeleteConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subDeleteConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.deleteConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubDeleteConfirmed\n    \t * \n    \t * Publish the UserDeleteConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubDeleteFailed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.deleteFailed, args);\n    \t};\n\n    \t/**\n    \t * subDeleteFailed\n    \t * \n    \t * subscribe for the UserDeleteFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteFailed function\n    \t * @param \t{function} scopeHandler The callback handler for UserDeleteFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subDeleteFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.deleteFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n\n    \t//User index request functions\n\n    \t/**\n    \t * pubIndexConfirmed\n    \t * \n    \t * Publish the UserIndexConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubIndexConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.indexConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subIndexConfirmed\n    \t * \n    \t * subscribe for the UserIndexConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for UserIndexConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subIndexConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.indexConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubIndexConfirmed\n    \t * \n    \t * Publish the UserIndexConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubIndexFailed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.indexFailed, args);\n    \t};\n\n    \t/**\n    \t * subIndexFailed\n    \t * \n    \t * subscribe for the UserIndexFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexFailed function\n    \t * @param \t{function} scopeHandler The callback handler for UserIndexFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subIndexFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.indexFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n    \t//User login request functions\n        \n        /**\n\t\t * pubLoginConfirmed\n\t\t * \n\t\t * Publish the UserLoginConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubLoginConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.loginConfirmed, args);\n    \t};\n    \t\n    \t /**\n\t\t * subLoginConfirmed\n\t\t * \n\t\t * subscribe for the UserLoginConfirmed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subLoginConfirmed function\n\t\t * @param \t{function} scopeHandler The callback handler for UserLoginConfirmed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subLoginConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.loginConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n    \t\n    \t//###############\n    \t\n        \n        /**\n\t\t * pubLoginFailed\n\t\t * \n\t\t * Publish the UserLoginConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubLoginFailed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.loginFailed, args);\n    \t};\n    \t\n    \t/**\n\t\t * subLoginFailed\n\t\t * \n\t\t * subscribe for the UserLoginFailed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subLoginFailed function\n\t\t * @param \t{function} scopeHandler The callback handler for UserLoginFailed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subLoginFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.loginFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n\n    \t//User logout request functions\n\n    \t/**\n    \t * pubLogoutConfirmed\n    \t * \n    \t * Publish the UserLogoutConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubLogoutConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.logoutConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subLogoutConfirmed\n    \t * \n    \t * subscribe for the UserLogoutConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subLogoutConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for UserLogoutConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subLogoutConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.logoutConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubLogoutFailed\n    \t * \n    \t * Publish the UserLogoutConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubLogoutFailed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.logoutFailed, args);\n    \t};\n\n    \t/**\n    \t * subLogoutFailed\n    \t * \n    \t * subscribe for the UserLogoutFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subLogoutFailed function\n    \t * @param \t{function} scopeHandler The callback handler for UserLogoutFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subLogoutFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.logoutFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n    \t\n    \t//__________________________________________________________________________________________________________________________________________\n    \t\n    \t\n    \t//User token request functions\n\n    \t/**\n    \t * pubTokenConfirmed\n    \t * \n    \t * Publish the UserTokenConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubTokenConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.tokenConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subTokenConfirmed\n    \t * \n    \t * subscribe for the UserTokenConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subTokenConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for UserTokenConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subTokenConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.tokenConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubTokenConfirmed\n    \t * \n    \t * Publish the UserTokenConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubTokenFailed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.tokenFailed, args);\n    \t};\n\n    \t/**\n    \t * subTokenFailed\n    \t * \n    \t * subscribe for the UserTokenFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subTokenFailed function\n    \t * @param \t{function} scopeHandler The callback handler for UserTokenFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subTokenFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.tokenFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n\n    \t//User register request functions\n\n    \t/**\n    \t * pubRegisterConfirmed\n    \t * \n    \t * Publish the UserRegisterConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubRegisterConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.registerConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subRegisterConfirmed\n    \t * \n    \t * subscribe for the UserRegisterConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subRegisterConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for UserRegisterConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subRegisterConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.registerConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubRegisterFailed\n    \t * \n    \t * Publish the UserRegisterConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubRegisterFailed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.registerFailed, args);\n    \t};\n\n    \t/**\n    \t * subRegisterFailed\n    \t * \n    \t * subscribe for the UserRegisterFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subRegisterFailed function\n    \t * @param \t{function} scopeHandler The callback handler for UserRegisterFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subRegisterFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.registerFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n\n    \t//User resend_welcome_email request functions\n\n    \t/**\n    \t * pubResendWelcomeEmailConfirmed\n    \t * \n    \t * Publish the UserResendWelcomeEmailConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubResendWelcomeEmailConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.resend_welcome_emailConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subResendWelcomeEmailConfirmed\n    \t * \n    \t * subscribe for the UserResendWelcomeEmailConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subResendWelcomeEmailConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for UserResendWelcomeEmailConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subResendWelcomeEmailConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.resend_welcome_emailConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubResendWelcomeEmailFailed\n    \t * \n    \t * Publish the UserResendWelcomeEmailConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubResendWelcomeEmailFailed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.resend_welcome_emailFailed, args);\n    \t};\n\n    \t/**\n    \t * subResendWelcomeEmailFailed\n    \t * \n    \t * subscribe for the UserResendWelcomeEmailFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subResendWelcomeEmailFailed function\n    \t * @param \t{function} scopeHandler The callback handler for UserResendWelcomeEmailFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subResendWelcomeEmailFailed(_Scope, scopeHandler) {\t\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.resend_welcome_emailFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n    \t//User cancel request functions\n\n    \t/**\n    \t * pubCancelConfirmed\n    \t * \n    \t * Publish the UserCancelConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubCancelConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.cancelConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subCancelConfirmed\n    \t * \n    \t * subscribe for the UserCancelConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subCancelConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for UserCancelConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subCancelConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.cancelConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubCancelFailed\n    \t * \n    \t * Publish the UserCancelConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubCancelFailed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.cancelFailed, args);\n    \t};\n\n    \t/**\n    \t * subCancelFailed\n    \t * \n    \t * subscribe for the UserCancelFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subCancelFailed function\n    \t * @param \t{function} scopeHandler The callback handler for UserCancelFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subCancelFailed(_Scope, scopeHandler) {\t\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.cancelFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n\n    \t//User password_reset request functions\n\n    \t/**\n    \t * pubPasswordResetConfirmed\n    \t * \n    \t * Publish the UserPasswordResetConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubPasswordResetConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.password_resetConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subPasswordResetConfirmed\n    \t * \n    \t * subscribe for the UserPasswordResetConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subPasswordResetConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for UserPasswordResetConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subPasswordResetConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.password_resetConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubPasswordResetConfirmed\n    \t * \n    \t * Publish the UserPasswordResetConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubPasswordResetFailed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.password_resetFailed, args);\n    \t};\n\n    \t/**\n    \t * subPasswordResetFailed\n    \t * \n    \t * subscribe for the UserPasswordResetFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subPasswordResetFailed function\n    \t * @param \t{function} scopeHandler The callback handler for UserPasswordResetFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subPasswordResetFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.password_resetFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n    \t\n    \t//User requestNewPassword request functions\n\n    \t/**\n    \t * pubRequestNewPasswordConfirmed\n    \t * \n    \t * Publish the UserRequestNewPasswordConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubRequestNewPasswordConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.requestNewPasswordConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subRequestNewPasswordConfirmed\n    \t * \n    \t * subscribe for the UserRequestNewPasswordConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subRequestNewPasswordConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for UserRequestNewPasswordConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subRequestNewPasswordConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.requestNewPasswordConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubRequestNewPasswordConfirmed\n    \t * \n    \t * Publish the UserRequestNewPasswordConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubRequestNewPasswordFailed(args) {\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.requestNewPasswordFailed, args);\n    \t};\n\n    \t/**\n    \t * subRequestNewPasswordFailed\n    \t * \n    \t * subscribe for the UserRequestNewPasswordFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subRequestNewPasswordFailed function\n    \t * @param \t{function} scopeHandler The callback handler for UserRequestNewPasswordFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subRequestNewPasswordFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( UserChannelConstant.requestNewPasswordFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n    \t\n    \t\n\t};\n\n})();",";(function() {\n    'use strict';\n\n    /**\n\t *  Constants for UserChannel\n\t *  \n\t *  NOTE: if you want to change this constant do this in a config section of angular\n\t */\n\tvar UserChannelConstant =  {\n\t \t\t// Retrieve action\n \t\t\tretrieveConfirmed \t\t\t\t: 'event:drupal-user-retrieveConfirmed',\n \t\t\tretrieveFailed  \t\t\t\t: 'event:drupal-user-retrieveFailed',\n \t\t\t// Create action\n \t\t\tcreateConfirmed\t\t\t\t: 'event:drupal-user-createConfirmed',\n \t\t\tcreateFailed  \t\t\t\t\t: 'event:drupal-user-createFailed',\n \t\t\t// Update action\n \t\t\tupdateConfirmed\t\t\t\t: 'event:drupal-user-updateConfirmed',\n \t\t\tupdateFailed  \t\t\t\t\t: 'event:drupal-user-updateFailed',\n \t\t\t// Delete action\t\n \t\t\tdeleteConfirmed\t\t\t\t: 'event:drupal-user-deleteConfirmed',\n \t\t\tdeleteFailed  \t\t\t\t\t: 'event:drupal-user-deleteFailed',\n \t\t\t// Index action\n \t\t\tindexConfirmed  \t\t\t\t: 'event:drupal-user-indexConfirmed',\n \t\t\tindexFailed  \t\t\t\t\t: 'event:drupal-user-indexFailed',\n \t\t\t//Request new password action\n \t\t\trequestNewPasswordConfirmed  \t: 'event:drupal-user-requestNewPasswordConfirmed',\n \t\t\trequestNewPasswordFailed  \t\t: 'event:drupal-user-requestNewPasswordFailed',\n \t\t\t//Cancel action\n \t\t\tcancelConfirmed  \t\t\t\t: 'event:drupal-user-cancelConfirmed',\n \t\t\tcancelFailed  \t\t\t\t\t: 'event:drupal-user-cancelFailed',\n \t\t\t//Password Reset\n \t\t\tpasswordResetConfirmed  \t\t: 'event:drupal-user-passwordResetConfirmed',\n \t\t\tpasswordResetFailed  \t\t\t: 'event:drupal-user-passwordResetFailed',\n \t\t\t//Resend Welcome Email\n \t\t\tresendWelcomeEmailConfirmed  \t: 'event:drupal-user-resendWelcomeEmailConfirmed',\n \t\t\tresendWelcomeEmailFailed  \t\t: 'event:drupal-user-resendWelcomeEmailFailed',\n \t\t\t// Token action\n \t\t\ttokenConfirmed  \t\t\t\t: 'event:drupal-user-tokenConfirmed',\n \t\t\ttokenFailed  \t\t\t\t\t: 'event:drupal-user-tokenFailed',\n \t\t\t// Register action\n \t\t\tregisterConfirmed  \t\t\t: 'event:drupal-user-registerConfirmed',\n \t\t\tregisterFailed  \t\t\t\t: 'event:drupal-user-registerFailed',\n \t\t\t// Login action\n \t\t\tloginConfirmed  \t\t\t\t: 'event:drupal-user-loginConfirmed',\n \t\t\tloginFailed  \t\t\t\t\t: 'event:drupal-user-loginFailed',\n \t\t\t// Logout action\n \t\t\tlogoutConfirmed  \t\t\t\t: 'event:drupal-user-logoutConfirmed',\n \t\t\tlogoutFailed  \t\t\t\t\t: 'event:drupal-user-logoutFailed'\n\t \t\t\n\t};\n    \n\t/**\n\t * User Channel Constant\n\t */\n\tangular\n\t    .module('d7-services.resources.user.channelConstant', [])\n\t    .constant(\"UserChannelConstant\", UserChannelConstant);\n\n})();\n",";(function() {\n    'use strict';\n\n\t/**\n\t * User Resource Modules\n\t * \n\t * see sourcecode in services/resources/user_resource.inc\n\t**/\n    angular.module('d7-services.resources.user.resource', ['d7-services.commons.configurations', 'd7-services.resources.user.resourceConstant', 'd7-services.resources.user.channel', 'd7-services.commons.baseResource'])\n    \n    /**\n\t * UserResource\n\t * \n\t * This service mirrors the Drupal user resource of the services 3.x module.\n\t * To use this you have to set following line in your Drupal CORS module settings\n\t * your_api_endpoint/user/*|<mirror>|POST|Content-Type,Authorization|true\n\t * \n\t**/\n    .factory('UserResource', UserResource);\n\n    /**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t**/\n    UserResource.$inject = ['$http', 'BaseResource', 'DrupalApiConstant', 'UserResourceConstant', 'UserChannel'];\n    \n\t/** @ngInject */\n\tfunction UserResource($http, BaseResource, DrupalApiConstant, UserResourceConstant, UserChannel) { \n\t\t\n\t\t//setup and return service            \t\n        var userResourceService = {\n        \t//CRUD operations\n        \tretrieve \t: retrieve,\n    \t\tcreate \t\t: create,\n    \t\tupdate \t\t: update,\n    \t\tdelete \t\t: _delete,\n    \t    index \t\t: index,\n    \t    //Actions\n    \t    token\t\t: token,\n    \t\tregister \t: register,\n    \t\tresendWelcomeEmail \t: resendWelcomeEmail,\n    \t\tcancel \t\t: cancel,\n    \t\tlogin \t\t: login,\n        \tlogout \t\t: logout,\n        \tpasswordReset \t\t: passwordReset,\n        \trequestNewPassword \t: requestNewPassword\n        \t\n        };\n        \n        return userResourceService;\n\n        ////////////\n        \n        /**\n\t\t * retrieve\n\t\t * \n\t\t * Retrieve a user\n\t\t * \n\t\t * Method: GET \n\t\t * Url: http://drupal_instance/api_endpoint/user/{UID}\n\t\t * \n\t\t * @params  {Object} data The requests data\n\t\t * \t\t\t@key \t{Integer} uid UID of the user to be loaded, required:true, source:path\n\t\t * \n\t\t * @return \t{Promise} A user object\n\t\t * \n\t\t**/\n    \tfunction retrieve(data) {\n    \t\tvar retrievePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + data.uid;\n    \t\treturn BaseResource.retrieve( retrievePath,UserChannel.pubRetrieveConfirmed,  UserChannel.pubRetrieveFailed);\n\t    };\n\t    \n\t    /**\n\t     * create\n\t     * \n\t     * Create a new user.\n\t     * This function uses drupal_form_submit() and as such expects all input to match\n\t     * the submitting form in question.\n\t     * \n\t     * Method: POST\n\t     * Url: http://drupal_instance/api_endpoint/user\n\t     * \n\t     * @params  {Object} data The accout of the user to create, required:true, source:post body\n\t     * \n\t     *  The $account object should contain, at minimum, the following properties:\n\t\t *     - {String} name  The user name\n\t\t *     - {String} mail  The email address\n\t\t *     - {String} pass  The plain text unencrypted password\n\t\t *\n\t\t *  These properties can be passed but are optional\n\t\t *     - {Integer} status Value 0 for blocked, otherwise will be active by default\n\t\t *     - {Integer} notify Value 1 to notify user of new account, will not notify by default\n\t\t *\n\t\t *  Roles can be passed in a roles property which is an associative\n\t\t *  array formatted with '<role id>' => '<role id>', not including the authenticated user role, which is given by default.\n\t     * \n\t     * @return \t{Promise} The user object of the newly created user.\n\t     *\n\t    **/\n\t    function create(data) {\n\t    \t\n\t    \tvar createPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath;\n\n    \t\tvar createdata \t= {\n\t\t\t\tname : data.name,\n\t\t\t\tpass : data.pass,\n\t\t\t\tmail : data.mail\n\t\t\t}\n    \t\t\n    \t\t//optional data\n    \t\t\n    \t\tif(data.status || data.status == 0) {\n    \t\t\tcreatedata.status = (data.status)?1:0;\n    \t\t}\n    \t\t\n    \t\tif(data.notify || data.notify == 0) {\n    \t\t\tcreatedata.notify = (data.notify)?1:0;\n    \t\t}\n\n    \t\tif (data.roles) {\n    \t\t\tcreatedata.roles = BaseResource.preparePostData(data.roles, 'array_of_values');\n    \t\t}\n    \t\t\n    \t\treturn BaseResource.create( createdata, createPath,  UserChannel.pubCreateConfirmed, UserChannel.pubCreateFailed);\n\n\t    };\n\t        \n\t    /**\n\t     * update\n\t     * \n\t     * Update a user\n\t     * \n\t     * Method: PUT\n\t     * Url: http://drupal_instance/api_endpoint/user/{UID}\n\t     * \n\t     * @params  {Object} data The requests data\n\t     * \t\t\t@key \t{Integer} uid Unique identifier for this user, required:true, source:path\n\t     * \t\t\t@key \t{Array}  data The user object with updated information, required:true, source:post body\n\t     * \n\t     * @return \t{Promise}\n\t     *\n\t    **/\n\t    function update(data) {\n\t    \t\n\t    \tvar updatePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + data.uid;\n\t    \t\n\t    \tdelete data.uid;\n    \t\tvar updateData \t= data;\n    \t\t\n    \t\treturn BaseResource.update( updateData, updatePath, UserChannel.pubUpdateConfirmed, UserChannel.pubUpdateFailed);\n\n\t    };\n\t    \n\t    /**\n\t     * delete\n\t     * \n\t     * Delete a user\n\t     * \n\t     * Method: DELETE\n\t     * Url: http://drupal_instance/api_endpoint/user/{UID}\n\t     * \n\t     * @params  {Object} data the requests data\n\t     * \t\t\t@key \t{Integer} uid The id of the user to delete, required:true, source:path\n\t     * \n\t     * @return \t{Promise}\n\t     *\n\t    **/\n\t    function _delete(data) {\n\t    \tvar deletePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + data.uid\n\t    \treturn BaseResource.delete(deletePath, UserChannel.pubDeleteConfirmed, UserChannel.pubDeleteFailed);\n\t    };\n\t    \n\t    /**\n\t     * index\n\t     * \n\t     * List all users\n\t     * \n\t     * Method: GET\n\t\t * Url: http://drupal_instance/api_endpoint/user\n\t\t * \n\t\t * @params  {Object} data the requests data\n\t\t * \t\t@key \t{Integer} page The zero-based index of the page to get. defaults to 0., required:false, source:param\n\t\t * \t\t@key \t{Integer} pagesize Number of records to get per page., required:false, source:param\n\t\t * \t\t@key \t{String} fields The fields to get., required:false, source:param\n\t\t * \t\t@key \t{Array} parameters Parameters, required:false, source:param\n\t\t * \t\t\n\t     * \n\t     * @return \t{Promise}\n\t     *\n\t    **/\n\t    function index(data) {\n\t    \tvar indexPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/';\n\t    \treturn BaseResource.index(data, indexPath,UserChannel.pubIndexConfirmed,  UserChannel.pubIndexFailed);\n\t    };\n\t    \n\t    /**\n\t\t * register\n\t\t * \n\t\t * register a user\n\t\t * \n\t\t * Method: POST\n\t\t * Url: http://drupal_instance/api_endpoint/user/register\n\t\t * \n\t\t * @param {Object} data The user object, required:true, source:post body\n\t\t * \n\t\t * @return {Promise}\n\t\t * \n\t\t**/\n\t\tfunction register(data) {\n\t\t\t//undefined check\n\t    \tdata = (data)?data:{};\n\n\t\t\t var registerPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + UserResourceConstant.actions.register,\n\t\t\t \t requestConfig = {\n\t\t \t\t\tmethod: 'POST',\n\t\t\t\t\turl : registerPath,\n\t\t\t\t\tdata : data\n\t\t \t \t  };\n\t\t \n\t\t \treturn BaseResource.request(requestConfig, UserChannel.pubRegisterConfirmed, UserChannel.pubRegisterFailed);\n\t\t};\n\t\t\n\t\t \n\t    /**\n\t\t * resendWelcomeEmail\n\t\t * \n\t\t * Resend the welcome email of a user fetched by uid\n\t\t * \n\t\t * Method: POST\n\t\t * Url: http://drupal_instance/api_endpoint/user/resend_welcome_email\n\t\t * \n\t\t * @param {Object} data The user object, required:true, source:post body\n\t\t * \n\t\t * @return {Promise}\n\t\t * \n\t\t**/\n\t\tfunction resendWelcomeEmail(data) {\n\t\t\t//undefined check\n\t    \tdata = (data)?data:{};\n\n\t\t\t var resendWelcomeEmailPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + data.uid  + '/' + UserResourceConstant.actions.resend_welcome_email,\n\t\t\t \t requestConfig = {\n\t\t \t\t\tmethod: 'POST',\n\t\t\t\t\turl : resendWelcomeEmailPath\n\t\t \t \t  };\n\t\t \n\t\t \treturn BaseResource.request(requestConfig, UserChannel.pubResendWelcomeEmailConfirmed, UserChannel.pubResendWelcomeEmailFailed);\n\t\t};\n\t\t\n\t\t/**\n\t\t * cancel\n\t\t * \n\t\t * Cancel a user\n\t\t * \n\t\t * Method: POST\n\t\t * Url: http://drupal_instance/api_endpoint/user/cancel\n\t\t * \n\t\t * @param {Object} data The user object, required:true, source:post body\n\t\t * \n\t\t * @return {Promise}\n\t\t * \n\t\t**/\n\t\tfunction cancel(data) {\n\t\t\t//undefined check\n\t    \tdata = (data)?data:{};\n\n\t\t\t var cancelPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + data.uid  + '/' + UserResourceConstant.actions.cancel,\n\t\t\t \t requestConfig = {\n\t\t \t\t\tmethod: 'POST',\n\t\t\t\t\turl : cancelPath\n\t\t \t \t  };\n\t\t \n\t\t \treturn BaseResource.request(requestConfig, UserChannel.pubCancelConfirmed, UserChannel.pubCancelFailed);\n\t\t};\n\t\t\n\t\t/**\n\t\t * PasswordReset\n\t\t * \n\t\t * PasswordReset a user\n\t\t * \n\t\t * Method: POST\n\t\t * Url: http://drupal_instance/api_endpoint/user/password_reset\n\t\t * \n\t\t * @param {Object} data The user object, required:true, source:post body\n\t\t * \n\t\t * @return {Promise}\n\t\t * \n\t\t**/\n\t\tfunction passwordReset(data) {\n\t\t\t//undefined check\n\t    \tdata = (data)?data:{};\n\n\t\t\t var passwordResetPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + data.uid  + '/' + UserResourceConstant.actions.password_reset,\n\t\t\t \t requestConfig = {\n\t\t \t\t\tmethod: 'POST',\n\t\t\t\t\turl : passwordResetPath\n\t\t \t \t  };\n\t\t \n\t\t \treturn BaseResource.request(requestConfig, UserChannel.pubPasswordResetConfirmed, UserChannel.pubPasswordResetFailed);\n\t\t};\n\t\t\n\t\t/**\n\t\t * requestNewPassword\n\t\t * \n\t\t * Request a new password, given a user name or e-mail address\n\t\t * \n\t\t * Method: POST\n\t\t * Url: http://drupal_instance/api_endpoint/user/request_new_password\n\t\t * \n\t\t * @param {Object} data The user object\n\t\t * \t\t\t@key {String} name A valid user name or e-mail address, required:true, source:post body\n\t\t * \n\t\t * \n\t\t * @return {Promise}\n\t\t * \n\t\t**/\n\t\tfunction requestNewPassword(data) {\n\t\t\t//undefined check\n\t    \tdata = (data)?data:{};\n\n\t\t\t var requestNewPasswordPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + data.uid  + '/' + UserResourceConstant.actions.request_new_password,\n\t\t\t \t requestConfig = {\n\t\t \t\t\tmethod: 'POST',\n\t\t\t\t\turl : requestNewPasswordPath,\n\t\t\t\t\tdata : {\n\t\t\t\t\t\tname : data.name\n\t\t\t\t\t}\n\t\t \t \t  };\n\t\t \n\t\t \treturn BaseResource.request(requestConfig, UserChannel.pubRequestNewPasswordConfirmed, UserChannel.pubRequestNewPasswordFailed);\n\t\t};\n\t    \n\t    \n\t\t/**\n\t\t * login\n\t\t * \n\t\t * Login a user for a new session\n\t\t * \n\t\t * Method: POST\n\t\t * Url: http://drupal_instance/api_endpoint/user/login\n\t\t * \n\t\t * @params  {Object} data The requests data\n\t\t * \t\t\t@key \t{String} username A valid username, required:true, source:post body\n\t\t * \t\t\t@key \t{String} password A valid password, required:true, source:post body\n\t\t * \n\t\t * @return \t{Promise} \n\t\t * \n\t\t**/\t\n\t    function login( data ) {\n\t\t\t//undefined check\n\t    \tdata = (data)?data:{};\n\n\t\t\tvar pathToLogin = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + UserResourceConstant.actions.login,\n\t\t\t\trequestConfig = {\n\t\t\t\t\t\turl : pathToLogin,\n\t\t\t\t\t\tmethod :'POST',\n\t\t\t\t\t\tdata : data\n\t\t\t\t};\n\t    \t\n\t\t\treturn BaseResource.request(requestConfig, UserChannel.pubLoginConfirmed, UserChannel.pubLoginFailed);\n\n\t\t};\n\t\t\n\t\t/**\n\t\t * logout\n\t\t * \n\t\t * Logout a user session\n\t\t * \n\t\t * Method: POST\n\t\t * Url: http://drupal_instance/api_endpoint/user/logout\n\t\t * \n\t\t * @return \t{Promise}\n\t\t * \n\t\t**/\t\n\t\tfunction logout() {\n\t\t\t \n\t\t\tvar pathToLogout = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + UserResourceConstant.actions.logout,\n\t\t\t \trequestConfig = {\n\t\t\t \t\t\turl \t: pathToLogout,\n\t\t\t \t\t\tmethod\t: 'POST'\n\t\t\t\t};\n\t\t\t \n\t\t\treturn BaseResource.request(requestConfig, UserChannel.pubLogoutConfirmed, UserChannel.pubLogoutFailed);\n\n\t\t};\n\t\t\n\t\t/**\n\t\t * token\n\t\t * \n\t\t * Returns the CSRF token of the current session.\n\t\t * \n\t\t * Method: POST\n\t\t * Url: http://drupal_instance/api_endpoint/user/token\n\t\t * \n\t\t * @return \t{Promise}\n\t\t * \n\t\t**/\n\t\tfunction token() {\n\t\t\tvar  pathToToken = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + UserResourceConstant.actions.token,\n\t\t\t\t requestConfig = {\n\t\t\t     \turl\t\t: pathToToken,\n\t\t\t     \tmethod\t: 'POST'\n\t\t\t\t};\n\t\t\t\n\t\t\treturn BaseResource.request(requestConfig,UserChannel.pubTokenConfirmed,  UserChannel.pubTokenFailed);\n\n\t\t};\n\t\t\t\t\t\n\t};\n\n})();",";(function() {\n    'use strict';\n    \n    /**\n\t *  Constants for UserResourceModules\n\t *  \n\t *  NOTE: if you want to change this constant do this in your app.js config section\n\t */\n\tvar UserResourceConstant =  {\n\n\t\t// NOTE: This is the default alias aliases for your system resources defined in Drupal\n\t\tresourcePath : 'user',\n\t\t//actions of user resource\n\t\tactions : {\n\t\t\t//following actions are defined over their request method (GET, POST, PUT, DELETE) so they are commented out\n\t\t\t//retrieve \t\t\t\t: 'retrieve',\n\t\t\t//create \t\t\t\t: 'create',\n\t\t\t//update \t\t\t\t: 'update',\n\t\t\t//delete \t\t\t\t: 'delete',\n\t\t    //index \t\t\t\t: 'index',\n\t\t\t//\n\t\t\tlogin \t\t\t\t\t: 'login',\n\t\t\tlogout \t\t\t\t\t: 'logout',\n\t\t\ttoken \t\t\t\t\t: 'token',\n\t\t\trequest_new_password \t: 'request_new_password',\n\t\t\tregister \t\t\t\t: 'register',\n\t\t\tcancel \t\t\t\t\t: 'cancel',\n\t\t\tpassword_reset \t\t\t: 'password_reset',\n\t\t\tresend_welcome_email \t: 'resend_welcome_email'\n\t\t}\n\n\t};\n\n\t/**\n\t * User Constant Modules\n\t */\n\tangular\n\t    .module('d7-services.resources.user.resourceConstant', [])\n\t    .constant(\"UserResourceConstant\", UserResourceConstant);\n\t\n})();\n",";(function () {\n  'use strict';\n\n  /**\n   * @ngdoc object\n   * @name d7-services.resources.views:Views\n   * @description\n   * This Module bundles all modules related to drupal views resource\n   * @requires d7-services.resources.views.resourceConstant:ViewsResourceConstant\n   * @requires d7-services.resources.views.resource:ViewsResource\n   * @requires d7-services.resources.views.channelConstant:ViewsChannelConstant\n   * @requires d7-services.resources.views.channel:ViewsChannel\n   * @requires d7-services.resources.views.operatorsConstant:OperatorsConstant\n   */\n  angular.module('d7-services.resources.views',\n    ['d7-services.resources.views.resourceConstant',\n      'd7-services.resources.views.resource',\n      'd7-services.resources.views.channelConstant',\n      'd7-services.resources.views.channel',\n      'd7-services.resources.views.operatorsConstant']);\n})();\n",";(function() {\n\t'use strict';\n\n\t/**\n\t * Views Channel Module\n\t */\n\tangular.module('d7-services.resources.views.channel', ['d7-services.commons.baseChannel', 'd7-services.resources.views.channelConstant'])\n\t\t   .factory('ViewsChannel', ViewsChannel);\n\n\t/**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t **/\n\tViewsChannel.$inject = [ 'BaseChannel', 'ViewsChannelConstant' ];\n\t\n\t/**\n\t * Notification channel for views resource \n\t**/\n\t/** @ngInject */\n\tfunction ViewsChannel(BaseChannel, ViewsChannelConstant) {\n\t\n\t\t//setup and return service            \t\n        var viewsChannelService = {\n  \n    \t\tpubRetrieveConfirmed \t: pubRetrieveConfirmed,\n    \t\tsubRetrieveConfirmed\t\t: subRetrieveConfirmed,\n    \t\tpubRetrieveFailed \t\t: pubRetrieveFailed,\n    \t\tsubRetrieveFailed\t\t: subRetrieveFailed\n    \t\t\n        };\n        \n        return viewsChannelService;\n\n        ////////////\n        \n        //Views retrieve request functions\n        \n        /**\n\t\t * pubRetrieveConfirmed\n\t\t * \n\t\t * Publish the ViewsRetrieveConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubRetrieveConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(ViewsChannelConstant.retrieveConfirmed, args);\n    \t};\n    \t\n    \t /**\n\t\t * subRetrieveConfirmed\n\t\t * \n\t\t * subscribe for the ViewsRetrieveConfirmed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveConfirmed function\n\t\t * @param \t{function} scopeHandler The callback handler for ViewsRetrieveConfirmed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subRetrieveConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( ViewsChannelConstant.retrieveConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n    \t\n    \t//###############\n    \t\n        \n        /**\n\t\t * pubRetrieveConfirmed\n\t\t * \n\t\t * Publish the ViewsRetrieveConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubRetrieveFailed(args) {\n    \t\tBaseChannel.pubRootEmit(ViewsChannelConstant.retrieveFailed, args);\n    \t};\n    \t\n    \t/**\n\t\t * subRetrieveFailed\n\t\t * \n\t\t * subscribe for the ViewsRetrieveFailed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveFailed function\n\t\t * @param \t{function} scopeHandler The callback handler for ViewsRetrieveFailed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subRetrieveFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( ViewsChannelConstant.retrieveFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n    \t\n    \t//__________________________________________________________________________________________________________________\n\t};\n\n})();",";(function() {\n    'use strict';\n\n    /**\n\t *  Constants for ViewsChannel\n\t *  \n\t *  NOTE: if you want to change this constant do this in a config section of angular\n\t */\n\tvar ViewsChannelConstant =  {\n \t\t// Connect action\n\t\tretrieveConfirmed\t: 'event:drupal-views-retrieveConfirmed',\n\t\tretrieveFailed  \t: 'event:drupal-views-retrieveFailed',\n\t};\n    \n\t/**\n\t * Views Channel Constant\n\t */\n\tangular\n\t    .module('d7-services.resources.views.channelConstant', [])\n\t    .constant(\"ViewsChannelConstant\", ViewsChannelConstant);\n\n})();\n",";(function() {\n    'use strict';\n    \n    /**\n\t *  Constants for views request option names\n\t *  \n\t *  NOTE: if you want to change this constant do this in your app.js config section\n\t */\n\tvar ViewsOperatorsConstant =  {\n\t\t\tsort_operators : {\n\t\t\t\tasc\t\t: \"ASC\",\n\t\t\t\tdesc\t: \"DESC\"\n\t\t\t},\n\t\t\tfilter_operators : {\n\t\t\t\tis_less_than\t\t\t\t: \"<\",\n\t\t\t\tis_less_than_or_equal_to\t: \"<=\",\n\t\t\t\tis_equal_to\t\t\t\t\t: \"=\",\n\t\t\t\tis_not_equal_to\t\t\t\t: \"!=\",\n\t\t\t\tis_greater_than_or_equal_to\t: \">=\",\n\t\t\t\tis_greater_than\t\t\t\t: \">\",\n\t\t\t\tis_between\t\t\t\t\t: \"between\",\n\t\t\t\tis_not_between\t\t\t\t: \"not+between\",\n\t\t\t\tregular_expression\t\t\t: \"regular_expression\"\n\t \t\t}\n\t};\n\n\t/**\n\t * Views Constant Modules\n\t */\n\tangular\n\t    .module('d7-services.resources.views.operatorsConstant', [])\n\t    .constant(\"ViewsOperatorsConstant\", ViewsOperatorsConstant);\n\t\n})();\n",";(function() {\n    'use strict';\n\n\t/**\n\t * Views Resource Modules\n\t * \n\t * see sourcecode in services/resources/views_resource.inc\n\t * \n\t**/\n    angular.module('d7-services.resources.views.resource', ['d7-services.commons.configurations', 'd7-services.commons.baseResource', 'd7-services.resources.views.resourceConstant', 'd7-services.resources.views.channel'])\n    \n    /**\n\t * ViewsResource\n\t * \n\t * This service mirrors the Drupal views resource of the services 3.x module.\n\t * To use this you have to set following line in your Drupal CORS module settings\n\t * \n\t**/\n    .factory('ViewsResource', ViewsResource);\n\n    /**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t**/\n    ViewsResource.$inject = ['$http', 'DrupalApiConstant', 'BaseResource', 'ViewsResourceConstant', 'ViewsChannel'];\n    \n\t/** @ngInject */\n\tfunction ViewsResource($http, DrupalApiConstant, BaseResource, ViewsResourceConstant, ViewsChannel) { \n\t\t\n\t\t//setup and return service            \t\n        var viewsResourceService = {\n        \tretrieve : retrieve\n        };\n        \n        return viewsResourceService;\n\n        ////////////\n\n\t\t/**\n\t\t * retrieve\n\t\t * \n\t\t * Retrieves a view.\n\t\t * \n\t\t * Method: GET \n\t\t * Url: http://drupal_instance/api_endpoint/views/{VIEW_NAME}\n\t\t * \n\t\t * @params  {Object} data The requests data\n\t\t * \t\t\t@key {String} view_name The name of the view to get., required:true, source:path\n\t\t * \t\t\t@key {String} display_id The display ID of the view to get., required:false, source:param\n\t\t * \t\t\t@key {Array} args A list of arguments to pass to the view., required:false, source:param\n\t\t * \t\t\t@key {Integer} offset The number of the entry for the page begin with., required:false, source:param\n\t\t * \t\t\t@key {Integer} limit The total number of entries to list., required:false, source:param\n\t\t * \t\t\t@key {Boolean} format_output Whether to return the raw data results or style the results., required:false, source:param\n\t\t * \t\t\t@key {Array} exposed_sortss A list of sort options to pass to the view. These are defined by the exposed sorts on your view, required:false, source:param\n\t\t * \t\t\t@key {Array} exposed_filters A list of filters to pass to the view. These are defined by the exposed filters on your view, required:false, source:param\n\t\t * \n\t\t * \n\t\t * @return \t{Promise}\n\t\t * \n\t\t * Custom view settings\n\t\t * exposed filters: \n\t\t * \tcreate them in the view under \"Filter criteria\". Expose them for users. Under the more tab in \"Configure filter criterion\" in the field \"Filter identifier\" you can change the field name. Use it like => comment_count=4\n\t\t * order by : create them in the view under \"Sort criteria\".  Expose it for users and use it like => sort_by=created&sort_order=ASC\n\t\t * \n\t\t *\n\t\t **/\n\t\t function retrieve(data){\n\t\t\tvar _data = {};\n\n\t\t\t//we angular.merge \"deep copy\" because we don't want to change the views/controllers values\n\t\t\tangular.merge(_data, data);\n\t\t\n\t\t\tvar retrievePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + ViewsResourceConstant.resourcePath + '/' + _data.view_name;\n\t\t\t\n\t\t\tdelete _data.view_name;\t\t\t\n\t\t\t\n\t\t\t//prepare params\n\t\t\tvar format = undefined,\n\t\t\t\tpreparedParams  = undefined,\n\t\t\t\tpreparedParamsArray = [];\n\t\t\t\n\t\t\tvar exposedFiltersFieldsWithOperators = [];\n\t\t\t//collect all exposed filters with operators\n\t\t\tif(_data.exposed_filters) {\n\t\t\t\tvar fieldName = undefined;\n\t\t\t\tangular.forEach(_data.exposed_filters , function(value, key)  {\n\t\t\t\t\t//if a key ends with _op\n\t\t\t\t\tif(key.substr(key.length - 3) == '_op') {\n\t\t\t\t\t\tfieldName = key.split('_op').shift();\n\t\t\t\t\t\texposedFiltersFieldsWithOperators.push(fieldName);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\n\t\t\t//prepare exposed filters fields that have operators\n\t\t\tangular.forEach(_data.exposed_filters , function(value, key)  {\n\t\t\t\t//if a key is in exposedFiltersFieldsWithOperators array\n\t\t\t\tif(exposedFiltersFieldsWithOperators.indexOf(key) > -1) {\n\t\t\t\t\tdelete _data.exposed_filters[key];\n\t\t\t\t\tpreparedParamsArray.push(BaseResource.prepareGetParams(value, key, 'array_key_value'));\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t\n\t\t\tangular.forEach(_data, function(value , key) {\n\t\t\t\tif(key === 'exposed_filters' || key === 'exposed_sorts') { format = 'json'; }\n\t\t\t\t\n\t\t\t\tpreparedParams = BaseResource.prepareGetParams(value, key, format);\n\t\t\t\tif(preparedParams) {\n\t\t\t\t\tpreparedParamsArray.push(preparedParams);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tformat = undefined;\n\t\t    });\n\t\t\t\t\n\t\t\tif(preparedParamsArray.length > 0) {\n\t\t\t\tretrievePath += '?'+ preparedParamsArray.join('&');\n\t\t\t}\n\t\t\t\n    \t\treturn BaseResource.retrieve( retrievePath, ViewsChannel.pubRetrieveConfirmed,  ViewsChannel.pubRetrieveFailed);\n\n\t\t};\n\t\t\t\n\t};\n\n})();",";(function() {\n    'use strict';\n    \n    /**\n\t *  Constants for ViewsResourceModules \n\t *  \n\t *  NOTE: if you want to change this constant do this in your app.js config section\n\t */\n\tvar ViewsResourceConstant =  {\n\n\t \t\t// NOTE: This is the default alias aliases for your views resources defined in Drupal\n\t \t\tresourcePath : 'views',\n\t \t\t//actions of node resource\n\t \t\tactions : {\n\t \t\t\t//retrieve \t: 'retrieve'\n\t \t\t},\n\n\t};\n\n\t/**\n\t * Views Constant Modules\n\t */\n\tangular\n\t    .module('d7-services.resources.views.resourceConstant', [])\n\t    .constant(\"ViewsResourceConstant\", ViewsResourceConstant);\n\t\n})();\n",";\n(function () {\n  'use strict';\n\n  /**\n   * @ngdoc object\n   * @name d7-services.resources.taxonomy_term:TaxonomyTerm\n   * @description\n   * This Module bundles all modules related to drupal taxonomy_term resource\n   * @requires d7-services.resources.taxonomy_term.resourceConstant:TaxonomyTermResourceConstant\n   * @requires d7-services.resources.taxonomy_term.resource:TaxonomyTermResource\n   * @requires d7-services.resources.taxonomy_term.channelConstant:TaxonomyTermChannelConstant\n   * @requires d7-services.resources.taxonomy_term.channel:TaxonomyTermChannel\n   */\n  angular\n    .module('d7-services.resources.taxonomy_term', [\n      'd7-services.resources.taxonomy_term.resourceConstant',\n      'd7-services.resources.taxonomy_term.resource',\n      'd7-services.resources.taxonomy_term.channelConstant',\n      'd7-services.resources.taxonomy_term.channel']);\n})();",";(function() {\n\t'use strict';\n\n\t/**\n\t * TaxonomyTerm Channel Module\n\t */\n\tangular.module('d7-services.resources.taxonomy_term.channel', ['d7-services.commons.baseChannel', 'd7-services.resources.taxonomy_term.channelConstant'])\n\t\t   .factory('TaxonomyTermChannel', TaxonomyTermChannel);\n\n\t\n\t/**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t **/\n\tTaxonomyTermChannel.$inject = [ 'BaseChannel', 'TaxonomyTermChannelConstant' ];\n\t\n\t/**\n\t * Notification channel for taxonomy_term resource \n\t**/\n\t\n\t/** @ngInject */\n\tfunction TaxonomyTermChannel(BaseChannel, TaxonomyTermChannelConstant) {\n\t\n\t\t//setup and return service            \t\n        var taxonomy_termChannelService = {\n        \t\t\n        \t//taxonomy_term retrieve request\n    \t\tpubRetrieveConfirmed \t: pubRetrieveConfirmed,\n    \t\tsubRetrieveConfirmed\t: subRetrieveConfirmed,\n    \t\tpubRetrieveFailed \t\t: pubRetrieveFailed,\n    \t\tsubRetrieveFailed\t\t: subRetrieveFailed,\n    \t\t\n        \t//taxonomy_term create request\n        \tpubCreateConfirmed \t\t: pubCreateConfirmed,\n        \tsubCreateConfirmed\t\t: subCreateConfirmed,\n        \tpubCreateFailed \t\t: pubCreateFailed,\n        \tsubCreateFailed\t\t\t: subCreateFailed,\n        \t\n        \t//taxonomy_term update request\n        \tpubUpdateConfirmed \t\t: pubUpdateConfirmed,\n        \tsubUpdateConfirmed\t\t: subUpdateConfirmed,\n        \tpubUpdateFailed \t\t: pubUpdateFailed,\n        \tsubUpdateFailed\t\t\t: subUpdateFailed,\n        \t\n        \t//taxonomy_term delete request\n        \tpubDeleteConfirmed \t\t: pubDeleteConfirmed,\n        \tsubDeleteConfirmed\t\t: subDeleteConfirmed,\n        \tpubDeleteFailed \t\t: pubDeleteFailed,\n        \tsubDeleteFailed\t\t\t: subDeleteFailed,\n        \t\n        \t//taxonomy_term index request\n        \tpubIndexConfirmed \t\t: pubIndexConfirmed,\n        \tsubIndexConfirmed\t\t: subIndexConfirmed,\n        \tpubIndexFailed \t\t\t: pubIndexFailed,\n        \tsubIndexFailed\t\t\t: subIndexFailed,\n        \t\n        \t//taxonomy_term selectNodes request\n        \tpubSelectNodesConfirmed \t\t: pubSelectNodesConfirmed,\n        \tsubSelectNodesConfirmed\t\t\t: subSelectNodesConfirmed,\n        \tpubSelectNodesFailed \t\t\t: pubSelectNodesFailed,\n        \tsubSelectNodesFailed\t\t\t: subSelectNodesFailed,\n        \t\n        };\n        \n        return taxonomy_termChannelService;\n\n        ////////////\n        \n        //TaxonomyTerm retrieve request functions\n        \n        /**\n\t\t * pubRetrieveConfirmed\n\t\t * \n\t\t * Publish the TaxonomyTermRetrieveConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubRetrieveConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.retrieveConfirmed, args);\n    \t};\n    \t\n    \t/**\n\t\t * subRetrieveConfirmed\n\t\t * \n\t\t * subscribe for the TaxonomyTermRetrieveConfirmed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveConfirmed function\n\t\t * @param \t{function} scopeHandler The callback handler for TaxonomyTermRetrieveConfirmed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subRetrieveConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.retrieveConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n    \t\n    \t//###############\n    \t\n        \n        /**\n\t\t * pubRetrieveConfirmed\n\t\t * \n\t\t * Publish the TaxonomyTermRetrieveConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubRetrieveFailed(args) {\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.retrieveFailed, args);\n    \t};\n    \t\n    \t/**\n\t\t * subRetrieveFailed\n\t\t * \n\t\t * subscribe for the TaxonomyTermRetrieveFailed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveFailed function\n\t\t * @param \t{function} scopeHandler The callback handler for TaxonomyTermRetrieveFailed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subRetrieveFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.retrieveFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n    \t//TaxonomyTerm create request functions\n\n    \t/**\n    \t * pubCreateConfirmed\n    \t * \n    \t * Publish the TaxonomyTermCreateConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubCreateConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.createConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subCreateConfirmed\n    \t * \n    \t * subscribe for the TaxonomyTermCreateConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyTermCreateConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subCreateConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.createConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubCreateConfirmed\n    \t * \n    \t * Publish the TaxonomyTermCreateConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubCreateFailed(args) {\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.createFailed, args);\n    \t};\n\n    \t/**\n    \t * subCreateFailed\n    \t * \n    \t * subscribe for the TaxonomyTermCreateFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateFailed function\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyTermCreateFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subCreateFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.createFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n\n    \t//TaxonomyTerm update request functions\n\n    \t/**\n    \t * pubUpdateConfirmed\n    \t * \n    \t * Publish the TaxonomyTermUpdateConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubUpdateConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.updateConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subUpdateConfirmed\n    \t * \n    \t * subscribe for the TaxonomyTermUpdateConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyTermUpdateConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subUpdateConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.updateConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n    \t/**\n    \t * pubUpdateConfirmed\n    \t * \n    \t * Publish the TaxonomyTermUpdateConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubUpdateFailed(args) {\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.updateFailed, args);\n    \t};\n\n    \t/**\n    \t * subUpdateFailed\n    \t * \n    \t * subscribe for the TaxonomyTermUpdateFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateFailed function\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyTermUpdateFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subUpdateFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.updateFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n    \t//TaxonomyTerm delete request functions\n\n    \t/**\n    \t * pubDeleteConfirmed\n    \t * \n    \t * Publish the TaxonomyTermDeleteConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubDeleteConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.deleteConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subDeleteConfirmed\n    \t * \n    \t * subscribe for the TaxonomyTermDeleteConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyTermDeleteConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subDeleteConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.deleteConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubDeleteConfirmed\n    \t * \n    \t * Publish the TaxonomyTermDeleteConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubDeleteFailed(args) {\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.deleteFailed, args);\n    \t};\n\n    \t/**\n    \t * subDeleteFailed\n    \t * \n    \t * subscribe for the TaxonomyTermDeleteFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteFailed function\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyTermDeleteFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subDeleteFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.deleteFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n\n    \t//TaxonomyTerm index request functions\n\n    \t/**\n    \t * pubIndexConfirmed\n    \t * \n    \t * Publish the TaxonomyTermIndexConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubIndexConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.indexConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subIndexConfirmed\n    \t * \n    \t * subscribe for the TaxonomyTermIndexConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyTermIndexConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subIndexConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.indexConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubIndexConfirmed\n    \t * \n    \t * Publish the TaxonomyTermIndexConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubIndexFailed(args) {\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.indexFailed, args);\n    \t};\n\n    \t/**\n    \t * subIndexFailed\n    \t * \n    \t * subscribe for the TaxonomyTermIndexFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexFailed function\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyTermIndexFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subIndexFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.indexFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n    \t//TaxonomyTerm selectNodes request functions\n\n    \t/**\n    \t * pubSelectNodesConfirmed\n    \t * \n    \t * Publish the TaxonomyTermSelectNodesConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubSelectNodesConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.selectNodesConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subSelectNodesConfirmed\n    \t * \n    \t * subscribe for the TaxonomyTermSelectNodesConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subSelectNodesConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyTermSelectNodesConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subSelectNodesConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.selectNodesConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubSelectNodesConfirmed\n    \t * \n    \t * Publish the TaxonomyTermSelectNodesConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubSelectNodesFailed(args) {\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.selectNodesFailed, args);\n    \t};\n\n    \t/**\n    \t * subSelectNodesFailed\n    \t * \n    \t * subscribe for the TaxonomyTermSelectNodesFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subSelectNodesFailed function\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyTermSelectNodesFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subSelectNodesFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.selectNodesFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n    \t\n\t};\n\n})();",";(function() {\n    'use strict';\n\n    /**\n\t *  Constants for TaxonomyTermChannel\n\t *  \n\t *  NOTE: if you want to change this constant do this in a config section of angular\n\t */\n\tvar TaxonomyTermChannelConstant =  {\n\t \t\t// Retrieve action\n \t\t\tretrieveConfirmed\t\t: 'event:drupal-taxonomy_term-retrieveConfirmed',\n \t\t\tretrieveFailed\t\t\t: 'event:drupal-taxonomy_term-retrieveFailed',\n \t\t\t// Create action\n \t\t\tcreateConfirmed\t\t\t: 'event:drupal-taxonomy_term-createConfirmed',\n \t\t\tcreateFailed\t\t\t: 'event:drupal-taxonomy_term-createFailed',\n \t\t\t// Update action\n \t\t\tupdateConfirmed\t\t\t: 'event:drupal-taxonomy_term-updateConfirmed',\n \t\t\tupdateFailed\t\t\t: 'event:drupal-taxonomy_term-updateFailed',\n \t\t\t// Delete action\t\n \t\t\tdeleteConfirmed\t\t\t: 'event:drupal-taxonomy_term-deleteConfirmed',\n \t\t\tdeleteFailed\t\t\t: 'event:drupal-taxonomy_term-deleteFailed',\n \t\t\t// Index action\n \t\t\tindexConfirmed\t\t\t: 'event:drupal-taxonomy_term-indexConfirmed',\n \t\t\tindexFailed\t\t\t\t: 'event:drupal-taxonomy_term-indexFailed',\n \t\t\t// SelectNodes action\n \t\t\tselectNodesConfirmed\t: 'event:drupal-taxonomy_term-selectNodesConfirmed',\n \t\t\tselectNodesFailed\t\t: 'event:drupal-taxonomy_term-selectNodesFailed',\n\n\t};\n    \n\t/**\n\t * TaxonomyTerm Channel Constant\n\t */\n\tangular\n\t    .module('d7-services.resources.taxonomy_term.channelConstant', [])\n\t    .constant(\"TaxonomyTermChannelConstant\", TaxonomyTermChannelConstant);\n\n})();\n",";(function() {\n    'use strict';\n\n\t/**\n\t * TaxonomyTerm Resource Modules\n\t * \n\t * see sourcecode in services/resources/taxonomy_term_resource.inc\n\t**/\n    angular.module('d7-services.resources.taxonomy_term.resource', ['d7-services.commons.configurations', 'd7-services.resources.taxonomy_term.resourceConstant', 'd7-services.resources.taxonomy_term.channel', 'd7-services.commons.baseResource'])\n    \n    /**\n\t * TaxonomyTermResource\n\t * \n\t * This service mirrors the Drupal taxonomy_term resource of the services 3.x module.\n\t * To use this you have to set following line in your Drupal CORS module settings\n\t * your_api_endpoint/taxonomy_term/*|<mirror>|POST|Content-Type,Authorization|true\n\t * \n\t**/\n    .factory('TaxonomyTermResource', TaxonomyTermResource);\n\n    /**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t**/\n    TaxonomyTermResource.$inject = ['$http', 'BaseResource', 'DrupalApiConstant', 'TaxonomyTermResourceConstant', 'TaxonomyTermChannel'];\n    \n\t/** @ngInject */\n\tfunction TaxonomyTermResource($http, BaseResource, DrupalApiConstant, TaxonomyTermResourceConstant, TaxonomyTermChannel) { \n\t\t\n\t\t//setup and return service            \t\n        var taxonomy_termResourceService = {\n        \t//CRUD operations\n        \tretrieve \t: retrieve,\n    \t\tcreate \t\t: create,\n    \t\tupdate \t\t: update,\n    \t\tdelete \t\t: _delete,\n    \t    index \t\t: index,\n    \t    //Actions\n    \t    selectNodes\t: selectNodes,\n        \t\n        };\n        \n        return taxonomy_termResourceService;\n\n        ////////////\n        \n        /**\n\t\t * retrieve\n\t\t * \n\t\t * Retrieve a term\n\t\t * \n\t\t * Method: GET \n\t\t * Url: http://drupal_instance/api_endpoint/taxonomy_term/{TID}\n\t\t * \n\t\t * @params  {Object} data The requests data\n\t\t * \t\t\t@key \t{Integer} tid TID of the taxonomy_term to get, required:true, source:path\n\t\t * \n\t\t * @return \t{Promise} A taxonomy_term object\n\t\t * \n\t\t**/\n    \tfunction retrieve(data) {\n    \t\tvar retrievePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyTermResourceConstant.resourcePath + '/' + data.tid;\n    \t\treturn BaseResource.retrieve( retrievePath,TaxonomyTermChannel.pubRetrieveConfirmed,  TaxonomyTermChannel.pubRetrieveFailed);\n\t    };\n\t    \n\t    /**\n\t     * create\n\t     * \n\t     * Create a term\n\t     * This function uses drupal_form_submit() and as such expects all input to match\n\t     * the submitting form in question.\n\t     * \n\t     * Method: POST\n\t     * Url: http://drupal_instance/api_endpoint/taxonomy_term\n\t     * \n\t     * @params  {Object} term The data of the taxonomy_term to create, required:true, source:post body\n\t     * \n\t\t *\n\t\t *  Roles can be passed in a roles property which is an associative\n\t\t *  array formatted with '<role id>' => '<role id>', not including the authenticated taxonomy_term role, which is given by default.\n\t     * \n\t     * @return \t{Promise} The taxonomy_term object of the newly created taxonomy_term.\n\t     *\n\t    **/\n\t    function create(term) {\n\t    \t\n\t    \tvar createPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyTermResourceConstant.resourcePath;\n\n\t    \tvar createData \t= { \n    \t\t\t\tterm : term \n    \t\t};\n\n    \t\treturn BaseResource.create( createData, createPath,  TaxonomyTermChannel.pubCreateConfirmed, TaxonomyTermChannel.pubCreateFailed);\n\n\t    };\n\t        \n\t    /**\n\t     * update\n\t     * \n\t     * Update a term\n\t     * \n\t     * Method: PUT\n\t     * Url: http://drupal_instance/api_endpoint/taxonomy_term/{TID}\n\t     * \n\t     * @params  {Object} data The requests data\n\t     * \t\t\t@key \t{Integer} tid The unique identifier for this taxonomy term., required:true, source:path\n\t     * \t\t\t@key \t{Array}  data The taxonomy term data to update, required:true, source:post body\n\t     * \n\t     * @return \t{Promise}\n\t     *\n\t    **/\n\t    function update(data) {\n\t    \t\n\t    \tvar updatePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyTermResourceConstant.resourcePath + '/' + data.tid;\n\t    \t\n    \t\tvar updateData \t= {term : data};\n    \t\t\n    \t\treturn BaseResource.update( updateData, updatePath, TaxonomyTermChannel.pubUpdateConfirmed, TaxonomyTermChannel.pubUpdateFailed);\n\n\t    };\n\t    \n\t    /**\n\t     * delete\n\t     * \n\t     * Delete the term\n\t     * \n\t     * Method: DELETE\n\t     * Url: http://drupal_instance/api_endpoint/taxonomy_term/{TID}\n\t     * \n\t     * @params  {Object} data the requests data\n\t     * \t\t\t@key \t{Integer} tid The id of the taxonomy_term to delete, required:true, source:path\n\t     * \n\t     * @return \t{Promise}\n\t     *\n\t    **/\n\t    function _delete(data) {\n\t    \tvar deletePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyTermResourceConstant.resourcePath + '/' + data.tid\n\t    \treturn BaseResource.delete(deletePath, TaxonomyTermChannel.pubDeleteConfirmed, TaxonomyTermChannel.pubDeleteFailed);\n\t    };\n\t    \n\t    /**\n\t     * index\n\t     * \n\t     * List all taxonomy_terms\n\t     * \n\t     * Method: GET\n\t\t * Url: http://drupal_instance/api_endpoint/taxonomy_term\n\t\t * \n\t\t * @params  {Object} data the requests data\n\t\t * \t\t@key \t{Integer} page The zero-based index of the page to get. defaults to 0., required:false, source:param\n\t\t * \t\t@key \t{Integer} pagesize Number of records to get per page., required:false, source:param\n\t\t * \t\t@key \t{String} fields The fields to get., required:false, source:param\n\t\t * \t\t@key \t{Array} parameters Parameters, required:false, source:param\n\t\t * \t\t\n\t     * \n\t     * @return \t{Promise}\n\t     *\n\t    **/\n\t    function index(data) {\n\t    \tvar indexPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyTermResourceConstant.resourcePath + '/';\n\t    \treturn BaseResource.index(data, indexPath,TaxonomyTermChannel.pubIndexConfirmed,  TaxonomyTermChannel.pubIndexFailed);\n\t    };\n\t    \n\t\t/**\n\t\t * selectNodes\n\t\t * \n\t\t * Returns all nodes with provided taxonomy id.\n\t\t * \n\t\t * Method: POST\n\t\t * Url: http://drupal_instance/api_endpoint/taxonomy_term/selectNodes\n\t\t * \n\t\t * @params  {Object} data the requests data\n\t\t * \t\t@key \t{Integer} tid The vocabulary ids to retrieve, separated by comma., required:true, source:post body\n\t\t * \t\t@key \t{Integer} pager Whether the nodes are to be used with a pager (the case on most Drupal pages) or not (in an XML feed, for example)., required:false, source:post body\n\t\t * \t\t@key \t{String} limit Maximum number of nodes to find., required:false, source:post body\n\t\t * \t\t@key \t{Array} order The order clause for the query that retrieve the nodes., required:false, source:post body\n\t\t * \t\t\n\t\t * \n\t\t * @return \t{Promise}\n\t\t * \n\t\t**/\n\t\tfunction selectNodes(data) {\n\t\t\tvar  pathToSelectNodes = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyTermResourceConstant.resourcePath + '/' + TaxonomyTermResourceConstant.actions.selectNodes,\n\t\t\t\t requestConfig = {\n\t\t\t     \turl\t\t: pathToSelectNodes,\n\t\t\t     \tmethod\t: 'POST',\n\t\t\t     \tdata : data\n\t\t\t\t};\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\treturn BaseResource.request(requestConfig,TaxonomyTermChannel.pubSelectNodesConfirmed,  TaxonomyTermChannel.pubSelectNodesFailed);\n\n\t\t};\n\t\t\t\t\t\n\t};\n\n})();",";(function() {\n    'use strict';\n    \n    /**\n\t *  Constants for TaxonomyTermResourceModules\n\t *  \n\t *  NOTE: if you want to change this constant do this in your app.js config section\n\t */\n\tvar TaxonomyTermResourceConstant =  {\n\n\t\t// NOTE: This is the default alias aliases for your system resources defined in Drupal\n\t\tresourcePath : 'taxonomy_term',\n\t\t//actions of taxonomy_term resource\n\t\tactions : {\n\t\t\t//following actions are defined over their request method (GET, POST, PUT, DELETE) so they are commented out\n\t\t\t//retrieve \t\t\t\t: 'retrieve',\n\t\t\t//create \t\t\t\t: 'create',\n\t\t\t//update \t\t\t\t: 'update',\n\t\t\t//delete \t\t\t\t: 'delete',\n\t\t    //index \t\t\t\t: 'index',\n\t\t\t//\n\t\t\tselectNodes \t\t\t: 'selectNodes',\n\t\t}\n\n\t};\n\n\t/**\n\t * TaxonomyTerm Constant Modules\n\t */\n\tangular\n\t    .module('d7-services.resources.taxonomy_term.resourceConstant', [])\n\t    .constant(\"TaxonomyTermResourceConstant\", TaxonomyTermResourceConstant);\n\t\n})();\n",";(function () {\n  'use strict';\n\n  /**\n   * @ngdoc object\n   * @name d7-services.resources.system:System\n   * @description\n   * This Module bundles all modules related to drupal system resource\n   * @requires d7-services.resources.system.resourceConstant:SystemResourceConstant\n   * @requires d7-services.resources.system.resource:SystemResource\n   * @requires d7-services.resources.system.channelConstant:SystemChannelConstant\n   * @requires d7-services.resources.system.channel:SystemChannel\n   */\n  angular.module('d7-services.resources.system', [\n    'd7-services.resources.system.resourceConstant',\n    'd7-services.resources.system.resource',\n    'd7-services.resources.system.channelConstant',\n    'd7-services.resources.system.channel']);\n})();",";(function () {\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name d7-services.resources.system.channel:SystemChannel\n   * @description\n   * Notification channel for system resource.\n   * This service is used as a SystemResource specific eventbus. It can publish and subscribe to all SystemResources requests events.\n   * Every request have its confirm os failed event\n   * @requires d7-services.resources.system.channelConstant:SystemChannelConstant\n   * @requires d7-services.commons.baseChannel:BaseChannel\n   */\n  angular.module('d7-services.resources.system.channel', ['d7-services.commons.baseChannel', 'd7-services.resources.system.channelConstant'])\n    .factory('SystemChannel', SystemChannel);\n\n\n  SystemChannel.$inject = ['BaseChannel', 'SystemChannelConstant'];\n\n  /** @ngInject */\n  function SystemChannel(BaseChannel, SystemChannelConstant) {\n\n\n    var systemChannelService = {\n\n      pubConnectConfirmed: pubConnectConfirmed,\n      subConnectConfirmed: subConnectConfirmed,\n      pubConnectFailed: pubConnectFailed,\n      subConnectFailed: subConnectFailed,\n\n      pubGetVariableConfirmed: pubGetVariableConfirmed,\n      subGetVariableConfirmed: subGetVariableConfirmed,\n      pubGetVariableFailed: pubGetVariableFailed,\n      subGetVariableFailed: subGetVariableFailed,\n\n      pubSetVariableConfirmed: pubSetVariableConfirmed,\n      subSetVariableConfirmed: subSetVariableConfirmed,\n      pubSetVariableFailed: pubSetVariableFailed,\n      subSetVariableFailed: subSetVariableFailed,\n\n      pubDelVariableConfirmed : pubDelVariableConfirmed,\n      subDelVariableConfirmed : subDelVariableConfirmed,\n      pubDelVariableFailed  : pubDelVariableFailed,\n      subDelVariableFailed  : subDelVariableFailed\n\n    }\n\n    return systemChannelService;\n\n    ////////////\n\n\n    /**\n     * @ngdoc method\n     * @name pubConnectConfirmed\n     * @methodOf d7-services.resources.system.channel:SystemChannel\n     * @description\n     * Publish the SystemConnectConfirmed event with given args\n     *\n     * @param  {Object} args - The events arguments\n     *\n     * @example\n     * publish data with the connectConfirmed event\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .controller('myController', function($scope, SystemChannel) {\n     *    SystemChannel.pubConnectConfirmed($scope, function(data){ ... });\n     *  });\n     * </pre>\n     *\n     */\n    function pubConnectConfirmed(args) {\n      BaseChannel.pubRootEmit(SystemChannelConstant.connectConfirmed, args);\n    }\n\n    /**\n     * @ngdoc method\n     * @name subConnectConfirmed\n     * @methodOf d7-services.resources.system.channel:SystemChannel\n     * @description\n     * subscribe for the connectConfirmed event\n     * unsubscribes automatically on scopes destroy event\n     *\n     * @param {object} _Scope - scope that subscribes to event\n     * @param {Function} scopeHandler - Callback function for the event\n     *\n     * @returns {Function} The unsubscribe function from the $rootScope.on() call\n     *\n     * @example\n     * subscribe to the connectConfirmed event\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .controller('myController', function($scope, SystemChannel) {\n     *    SystemChannel.subConnectConfirmed($scope, function(data){ ... });\n     *  });\n     * </pre>\n     *\n     * unsubscribe from the connectConfirmed event\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .controller('myController', function($scope, SystemChannel) {\n     *    var unsub = SystemChannel.subConnectConfirmed($scope, function(data){ ... });\n     *    //unsubscribe here\n     *    unsub();\n     *  });\n     * </pre>\n     *\n     */\n    function subConnectConfirmed(_Scope, scopeHandler) {\n      var unsubScopeHandler = BaseChannel.subRootEmit(SystemChannelConstant.connectConfirmed, _Scope, scopeHandler);\n      return unsubScopeHandler;\n    }\n\n    //###############\n\n    /**\n     * @ngdoc method\n     * @name pubConnectFailed\n     * @methodOf d7-services.resources.system.channel:SystemChannel\n     * @description\n     * Publish the connectFailed event with given args\n     *\n     * @param  {Object} args - The events arguments\n     *\n     * @example\n     * publish data with the connectConfirmed event\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .controller('myController', function($scope, SystemChannel) {\n     *    SystemChannel.pubConnectFailed($scope, function(data){ ... });\n     *  });\n     * </pre>\n     */\n    function pubConnectFailed(args) {\n      BaseChannel.pubRootEmit(SystemChannelConstant.connectFailed, args);\n    }\n\n    /**\n     * @ngdoc method\n     * @name subConnectFailed\n     * @methodOf d7-services.resources.system.channel:SystemChannel\n     * @description\n     * subscribe for the connectFailed event\n     *\n     * @param {object} _Scope - scope that subscribes to event\n     * @param {Function} scopeHandler - Callback function for the event\n     *\n     * @returns {Function} The unsubscribe function from the $rootScope.on() call\n     *\n     * @example\n     * subscribe to the subConnectFailed event\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .controller('myController', function($scope, SystemChannel) {\n     *    SystemChannel.subConnectFailed($scope, function(data){ ... });\n     *  });\n     * </pre>\n     *\n     * unsubscribe from the subConnectFailed event\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .controller('myController', function($scope, SystemChannel) {\n     *    var unsub = SystemChannel.subConnectFailed($scope, function(data){ ... });\n     *    //unsubscribe here\n     *    unsub();\n     *  });\n     * </pre>\n     *\n     */\n    function subConnectFailed(_Scope, scopeHandler) {\n      var unsubScopeHandler = BaseChannel.subRootEmit(SystemChannelConstant.connectFailed, _Scope, scopeHandler);\n      return unsubScopeHandler;\n    }\n\n    //________________________________________________________________________________________________________________________________________\n\n    //System get_variable request functions\n\n    /**\n     * @ngdoc method\n     * @name pubGetVariableConfirmed\n     * @methodOf d7-services.resources.system.channel:SystemChannel\n     * @description\n     * Publish the getVariableConfirmed event with given args\n     *\n     * @param  {Object} args - The events arguments\n     *\n     */\n    function pubGetVariableConfirmed(args) {\n      BaseChannel.pubRootEmit(SystemChannelConstant.getVariableConfirmed, args);\n    }\n\n    /**\n     * @ngdoc method\n     * @name subGetVariableConfirmed\n     * @methodOf d7-services.resources.system.channel:SystemChannel\n     * @description\n     * subscribe for the getVariableConfirmed event\n     *\n     * @param {object} _Scope - scope that subscribes to event\n     * @param {Function} scopeHandler - Callback function for the event\n     *\n     * @returns {Function} The unsubscribe function from the $rootScope.on() call\n     *\n     * @example\n     * subscribe to the subGetVariableConfirmed event\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .controller('myController', function($scope, SystemChannel) {\n     *    SystemChannel.subGetVariableConfirmed($scope, function(data){ ... });\n     *  });\n     * </pre>\n     *\n     * unsubscribe from the subGetVariableConfirmed event\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .controller('myController', function($scope, SystemChannel) {\n     *    var unsub = SystemChannel.subGetVariableConfirmed($scope, function(data){ ... });\n     *    //unsubscribe here\n     *    unsub();\n     *  });\n     * </pre>\n     *\n     */\n    function subGetVariableConfirmed(_Scope, scopeHandler) {\n      var unsubScopeHandler = BaseChannel.subRootEmit(SystemChannelConstant.getVariableConfirmed, _Scope, scopeHandler);\n      return unsubScopeHandler;\n    }\n\n    //###############\n\n    /**\n     * pubGetVariableFailed\n     *\n     * Publish the SystemGetVariableFailed event with given args\n     *\n     * @param  {Object} args The events arguments\n     *\n     *\n     **/\n    function pubGetVariableFailed(args) {\n      BaseChannel.pubRootEmit(SystemChannelConstant.getVariableFailed, args);\n    }\n\n    /**\n     * @ngdoc method\n     * @name subGetVariableFailed\n     * @methodOf d7-services.resources.system.channel:SystemChannel\n     * @description\n     * subscribe for the getVariableFailed event\n     *\n     * @param {object} _Scope - scope that subscribes to event\n     * @param {Function} scopeHandler - Callback function for the event\n     *\n     * @returns {Function} The unsubscribe function from the $rootScope.on() call\n     *\n     * @example\n     * subscribe to the subGetVariableFailed event\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .controller('myController', function($scope, SystemChannel) {\n     *    SystemChannel.subGetVariableFailed($scope, function(data){ ... });\n     *  });\n     * </pre>\n     *\n     * unsubscribe from the subGetVariableFailed event\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .controller('myController', function($scope, SystemChannel) {\n     *    var unsub = SystemChannel.subGetVariableFailed($scope, function(data){ ... });\n     *    //unsubscribe here\n     *    unsub();\n     *  });\n     * </pre>\n     *\n     */\n    function subGetVariableFailed(_Scope, scopeHandler) {\n      var unsubScopeHandler = BaseChannel.subRootEmit(SystemChannelConstant.getVariableFailed, _Scope, scopeHandler);\n      return unsubScopeHandler;\n    }\n\n    //________________________________________________________________________________________________________________________________________\n\n    //System set_variable request functions\n\n    /**\n     * pubSetVariableConfirmed\n     *\n     * Publish the SystemSetVariableConfirmed event with given args\n     *\n     * @param  {Object} args The events arguments\n     *\n     *\n     **/\n    function pubSetVariableConfirmed(args) {\n      BaseChannel.pubRootEmit(SystemChannelConstant.setVariableConfirmed, args);\n    }\n\n    /**\n     * @ngdoc method\n     * @name subSetVariableConfirmed\n     * @methodOf d7-services.resources.system.channel:SystemChannel\n     * @description\n     * subscribe for the setVariableConfirmed event\n     *\n     * @param {object} _Scope - scope that subscribes to event\n     * @param {Function} scopeHandler - Callback function for the event\n     *\n     * @returns {Function} The unsubscribe function from the $rootScope.on() call\n     *\n     * @example\n     * subscribe to the subSetVariableConfirmed event\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .controller('myController', function($scope, SystemChannel) {\n     *    SystemChannel.subSetVariableConfirmed($scope, function(data){ ... });\n     *  });\n     * </pre>\n     *\n     * unsubscribe from the subSetVariableConfirmed event\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .controller('myController', function($scope, SystemChannel) {\n     *    var unsub = SystemChannel.subSetVariableConfirmed($scope, function(data){ ... });\n     *    //unsubscribe here\n     *    unsub();\n     *  });\n     * </pre>\n     *\n     */\n    function subSetVariableConfirmed(_Scope, scopeHandler) {\n      var unsubScopeHandler = BaseChannel.subRootEmit(SystemChannelConstant.setVariableConfirmed, _Scope, scopeHandler);\n      return unsubScopeHandler;\n    }\n\n    //###############\n\n    /**\n     * pubSetVariableFailed\n     *\n     * Publish the SystemSetVariableFailed event with given args\n     *\n     * @param  {Object} args The events arguments\n     *\n     *\n     **/\n    function pubSetVariableFailed(args) {\n      BaseChannel.pubRootEmit(SystemChannelConstant.setVariableFailed, args);\n    }\n\n    /**\n     * @ngdoc method\n     * @name subSetVariableFailed\n     * @methodOf d7-services.resources.system.channel:SystemChannel\n     * @description\n     * subscribe for the setVariableFailed event\n     *\n     * @param {object} _Scope - scope that subscribes to event\n     * @param {Function} scopeHandler - Callback function for the event\n     *\n     * @returns {Function} The unsubscribe function from the $rootScope.on() call\n     *\n     * @example\n     * subscribe to the subSetVariableFailed event\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .controller('myController', function($scope, SystemChannel) {\n     *    SystemChannel.subSetVariableFailed($scope, function(data){ ... });\n     *  });\n     * </pre>\n     *\n     * unsubscribe from the subSetVariableFailed event\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .controller('myController', function($scope, SystemChannel) {\n     *    var unsub = SystemChannel.subSetVariableFailed($scope, function(data){ ... });\n     *    //unsubscribe here\n     *    unsub();\n     *  });\n     * </pre>\n     *\n     */\n    function subSetVariableFailed(_Scope, scopeHandler) {\n      var unsubScopeHandler = BaseChannel.subRootEmit(SystemChannelConstant.setVariableFailed, _Scope, scopeHandler);\n      return unsubScopeHandler;\n    }\n\n    //________________________________________________________________________________________________________________________________________\n\n    //System del_variable request functions\n\n    /**\n     * pubDelVariableConfirmed\n     *\n     * Publish the SystemDelVariableConfirmed event with given args\n     *\n     * @param  {Object} args The events arguments\n     *\n     *\n     **/\n    function pubDelVariableConfirmed(args) {\n      BaseChannel.pubRootEmit(SystemChannelConstant.delVariableConfirmed, args);\n    }\n\n    /**\n     * @ngdoc method\n     * @name subDelVariableConfirmed\n     * @methodOf d7-services.resources.system.channel:SystemChannel\n     * @description\n     * subscribe for the delVariableConfirmed event\n     *\n     * @param {object} _Scope - scope that subscribes to event\n     * @param {Function} scopeHandler - Callback function for the event\n     *\n     * @returns {Function} The unsubscribe function from the $rootScope.on() call\n     *\n     * @example\n     * subscribe to the subDelVariableConfirmed event\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .controller('myController', function($scope, SystemChannel) {\n     *    SystemChannel.subDelVariableConfirmed($scope, function(data){ ... });\n     *  });\n     * </pre>\n     *\n     * unsubscribe from the subDelVariableConfirmed event\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .controller('myController', function($scope, SystemChannel) {\n     *    var unsub = SystemChannel.subDelVariableConfirmed($scope, function(data){ ... });\n     *    //unsubscribe here\n     *    unsub();\n     *  });\n     * </pre>\n     *\n     */\n    function subDelVariableConfirmed(_Scope, scopeHandler) {\n      var unsubScopeHandler = BaseChannel.subRootEmit(SystemChannelConstant.delVariableConfirmed, _Scope, scopeHandler);\n      return unsubScopeHandler;\n    }\n\n    //###############\n\n    /**\n     * pubDelVariableFailed\n     *\n     * Publish the SystemDelVariableFailed event with given args\n     *\n     * @param  {Object} args The events arguments\n     *\n     *\n     **/\n    function pubDelVariableFailed(args) {\n      BaseChannel.pubRootEmit(SystemChannelConstant.delVariableFailed, args);\n    }\n\n    /**\n     * @ngdoc method\n     * @name subDelVariableFailed\n     * @methodOf d7-services.resources.system.channel:SystemChannel\n     * @description\n     * subscribe for the delVariableFailed event\n     *\n     * @param {object} _Scope - scope that subscribes to event\n     * @param {Function} scopeHandler - Callback function for the event\n     *\n     * @returns {Function} The unsubscribe function from the $rootScope.on() call\n     *\n     * @example\n     * subscribe to the subDelVariableFailed event\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .controller('myController', function($scope, SystemChannel) {\n     *    SystemChannel.subDelVariableFailed($scope, function(data){ ... });\n     *  });\n     * </pre>\n     *\n     * unsubscribe from the subDelVariableFailed event\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .controller('myController', function($scope, SystemChannel) {\n     *    var unsub = SystemChannel.subDelVariableFailed($scope, function(data){ ... });\n     *    //unsubscribe here\n     *    unsub();\n     *  });\n     * </pre>\n     *\n     */\n    function subDelVariableFailed(_Scope, scopeHandler) {\n      var unsubScopeHandler = BaseChannel.subRootEmit(SystemChannelConstant.delVariableFailed, _Scope, scopeHandler);\n      return unsubScopeHandler;\n    }\n\n  }\n\n})();",";(function () {\n  'use strict';\n\n  var SystemChannelConstant = {\n    // Connect action\n    connectConfirmed: 'event:drupal-system-connectConfirmed',\n    connectFailed: 'event:drupal-system-connectFailed',\n    // Get variable action\n    getVariableConfirmed: 'event:drupal-system-getVariableConfirmed',\n    getVariableFailed: 'event:drupal-system-getVariableFailed',\n    // Set variable action\n    setVariableConfirmed: 'event:drupal-system-setVariableConfirmed',\n    setVariableFailed: 'event:drupal-system-setVariableFailed',\n    // Del variable action\n    delVariableConfirmed: 'event:drupal-system-delVariableConfirmed',\n    delVariableFailed: 'event:drupal-system-delVariableFailed'\n  };\n\n  /**\n   * @ngdoc object\n   * @name d7-services.resources.system.channelConstant:SystemChannelConstant\n   * @description\n   *   Constant for the System channel\n   * @property {string} connectConfirmed - event name of connect confirm event\n   * @property {string} connectFailed - event name of connect failed event\n\n   * @property {string} getVariableConfirmed - event name of getVariable confirm event\n   * @property {string} getVariableFailed - event name of getVariable failed event\n\n   * @property {string} setVariableConfirmed - event name of setVariable confirm event\n   * @property {string} setVariableFailed - event name of setVariable failed event\n\n   * @property {string} delVariableConfirmed - event name of delVariable confirm event\n   * @property {string} delVariableFailed - event name of delVariable failed event\n   *\n   * @example\n   *\n   * SystemChannelConstant is editable in config phase\n   * <pre>\n   * angular\n   *  .module('myModule', ['d7-services.resources.system'])\n   *  .config(function (SystemChannelConstant) {\n   *     SystemChannelConstant.connectConfirmed = 'MY_EVENT_NAME';\n   * }\n   * </pre>\n   *\n   * SystemChannelConstant injectable\n   * <pre>\n   * angular\n   *  .module('myModule', ['d7-services.resources.system'])\n   *  .controller(function (SystemChannelConstant) {\n   *     console.log(SystemChannelConstant.connectConfirmed);\n   * }\n   * </pre>\n   */\n  angular\n    .module('d7-services.resources.system.channelConstant', [])\n    .constant(\"SystemChannelConstant\", SystemChannelConstant);\n\n})();\n",";(function () {\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name d7-services.resources.system.resource:SystemResource\n   * @description\n   * This service mirrors the Drupal system resource of the services 3.x module.\n   * To use this you have to set following line in your Drupal CORS module settings\n   * @requires d7-services.resources.system.resourceConstant:SystemResourceConstant\n   * @requires d7-services.resources.system.channelConstant:SystemChannelConstant\n   * @requires d7-services.commons.baseResource:BaseResource\n   * @requires d7-services.commons.configurations:DrupalApiConstant\n   */\n  angular\n    .module('d7-services.resources.system.resource', ['d7-services.commons.configurations', 'd7-services.commons.baseResource', 'd7-services.resources.system.resourceConstant', 'd7-services.resources.system.channel'])\n    .factory('SystemResource', SystemResource);\n\n\n  SystemResource.$inject = ['DrupalApiConstant', 'BaseResource', 'SystemResourceConstant', 'SystemChannel'];\n\n  /** @ngInject */\n  function SystemResource(DrupalApiConstant, BaseResource, SystemResourceConstant, SystemChannel) {\n\n    var systemResourceService = {\n      connect: connect,\n      get_variable: get_variable,\n      set_variable: set_variable,\n      del_variable: del_variable\n    };\n\n    return systemResourceService;\n\n    ////////////\n\n    /**\n     * @ngdoc method\n     * @name connect\n     * @methodOf d7-services.resources.system.resource:SystemResource\n     * @description\n     * Returns the details of currently logged in user.\n     *\n     * Method: POST\n     * Url: http://drupal_instance/api_endpoint/system/connect\n     *\n     * @returns  {Promise} Object with session id, session name and a user object.\n     *\n     * @example\n     *\n     * performing a system connect request and handling data in promise callback\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .config(function (SystemResource) {\n     *    SystemResource.connect()\n     *      .then(\n     *        function(confirmData) {...},\n     *        function(failData) {...}\n     *      );\n     * }\n     * </pre>\n     *\n     * performing a system connect request and handling data in event callback\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .config(function ($scope, SystemResource, SystemChannel) {\n     *    SystemResource.connect();\n     *    //subscribe to confirm event\n     *    SystemChannel.subConnectConfirmed($scope, function(confirmData) {...});\n     *    //subscribe to fail event\n     *    SystemChannel.subConnectFailed($scope, function(failData) {...});\n     * });\n     * </pre>\n     */\n    function connect() {\n\n      var connectPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + SystemResourceConstant.resourcePath + '/' + SystemResourceConstant.actions.connect,\n        requestConfig = {\n          method: 'POST',\n          url: connectPath\n        };\n\n      return BaseResource.request(requestConfig, SystemChannel.pubConnectConfirmed, SystemChannel.pubConnectFailed);\n\n    }\n\n    /**\n     * @ngdoc method\n     * @name get_variable\n     * @methodOf d7-services.resources.system.resource:SystemResource\n     * @description\n     * Returns a persistent variable.\n     * Case-sensitivity of the variable_* functions depends on the database collation used. To avoid problems, always use lower case for persistent variable names.\n     *\n     * Method: POST\n     * Url: http://drupal_instance/api_endpoint/system/get_variable\n     *\n     * @param {Object} data - The requests data\n     * @param {String} data.name - The name of the variable to return, required:true, source:post body\n     * @param {String} data._default - The default value to use if this variable has never been set, required:false, source:post body\n     *\n     * @returns  {Promise} Object with session id, session name and a user object.\n     *\n     * @example\n     *\n     * performing a system get_variable request and handling data in promise callback\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .config(function (SystemResource) {\n     *    SystemResource.get_variable()\n     *      .then(\n     *        function(confirmData) {...},\n     *        function(failData) {...}\n     *      );\n     * }\n     * </pre>\n     *\n     * performing a system get_variable request and handling data in event callback\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .config(function ($scope, SystemResource, SystemChannel) {\n     *    SystemResource.get_variable();\n     *\n     *    //subscribe to confirm event\n     *    SystemChannel.subGetVariableConfirmed($scope, function(confirmData) {...});\n     *    //subscribe to fail event\n     *    SystemChannel.subGetVariableFailed($scope, function(failData) {...});\n     * });\n     * </pre>\n     *\n     */\n    function get_variable(data) {\n\n      var getVariablePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + SystemResourceConstant.resourcePath + '/' + SystemResourceConstant.actions.get_variable,\n          requestConfig   = {\n            method: 'POST',\n            url: getVariablePath,\n            data: {\n              name: data.name\n            }\n          };\n\n      if('default' in data) {\n        requestConfig.data.default = data.default;\n      }\n\n      return BaseResource.request(requestConfig, SystemChannel.pubGetVariableConfirmed, SystemChannel.pubGetVariableFailed);\n\n    }\n\n    /**\n     * @ngdoc method\n     * @name set_variable\n     * @methodOf d7-services.resources.system.resource:SystemResource\n     * @description\n     * Sets a persistent variable.\n     * Case-sensitivity of the variable_* functions depends on the database collation used. To avoid problems, always use lower case for persistent variable names.\n     *\n     * The data object for this request looks something like this:\n     * {\n     *   name : 'my_variable_name'\n     * }\n     *\n     * Method: POST\n     * Url: http://drupal_instance/api_endpoint/system/set_variable\n     *\n     * @param {Object} data - The requests data\n     * @param {String} data.name - The name of the variable to set, required:true, source:post body\n     * @param {String} data.value - The value to set. This can be any PHP data type; these functions take care of serialization as necessary, required:true, source:post body\n     *\n     * @returns  {Promise} True if successful false if not\n     *\n     * @example\n     *\n     * performing a system set_variable request and handling data in promise callback\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .config(function (SystemResource) {\n     *    SystemResource.set_variable()\n     *      .then(\n     *        function(confirmData) {...},\n     *        function(failData) {...}\n     *      );\n     * }\n     * </pre>\n     *\n     * performing a system set_variable request and handling data in event callback\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .config(function ($scope, SystemResource, SystemChannel) {\n     *    SystemResource.set_variable({});\n     *\n     *    //subscribe to confirm event\n     *    SystemChannel.subSetVariableConfirmed($scope, function(confirmData) {...});\n     *    //subscribe to fail event\n     *    SystemChannel.subSetVariableFailed($scope, function(failData) {...});\n     * });\n     * </pre>\n     *\n     */\n    function set_variable(data) {\n\n      var setVariablePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + SystemResourceConstant.resourcePath + '/' + SystemResourceConstant.actions.set_variable,\n        requestConfig = {\n          method: 'POST',\n          url: setVariablePath,\n          data: {\n            name: data.name,\n            value: data.value\n          }\n        };\n\n      return BaseResource.request(requestConfig, SystemChannel.pubSetVariableConfirmed, SystemChannel.pubSetVariableFailed);\n\n    }\n\n    /**\n     * @ngdoc method\n     * @name del_variable\n     * @methodOf d7-services.resources.system.resource:SystemResource\n     * @description\n     * Unsets a persistent variable.\n     * Case-sensitivity of the variable_* functions depends on the database collation used. To avoid problems, always use lower case for persistent variable names.\n     *\n     * Method: POST\n     * Url: http://drupal_instance/api_endpoint/system/del_variable\n     *\n     * @param {Object} data - The requests data\n     * @param {String} data.name - The name of the variable to undefine, required:true, source:post body\n     *\n     *\n     * @returns  {Promise} True if successful false if not\n     *\n     * @example\n     *\n     * performing a system del_variable request and handling data in promise callback\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .config(function (SystemResource) {\n     *    SystemResource.del_variable({})\n     *      .then(\n     *        function(confirmData) {...},\n     *        function(failData) {...}\n     *      );\n     * }\n     * </pre>\n     *\n     * performing a system del_variable request and handling data in event callback\n     * <pre>\n     * angular\n     *  .module('myModule', ['d7-services.resources.system'])\n     *  .config(function ($scope, SystemResource, SystemChannel) {\n     *    SystemResource.del_variable({});\n     *\n     *    //subscribe to confirm event\n     *    SystemChannel.subDelVariableConfirmed($scope, function(confirmData) {...});\n     *    //subscribe to fail event\n     *    SystemChannel.subDelVariableFailed($scope, function(failData) {...});\n     * });\n     * </pre>\n     */\n    function del_variable(data) {\n\n      var delVariablePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + SystemResourceConstant.resourcePath + '/' + SystemResourceConstant.actions.del_variable,\n        requestConfig = {\n          method: 'POST',\n          url: delVariablePath,\n          data: {\n            name: data.name\n          }\n        };\n\n      return BaseResource.request(requestConfig, SystemChannel.pubDelVariableConfirmed, SystemChannel.pubDelVariableFailed);\n\n    }\n\n  }\n\n})();",";\n(function () {\n  'use strict';\n\n  var SystemResourceConstant = {\n    resourcePath: 'system',\n    actions: {\n      connect: 'connect',\n      get_variable: 'get_variable',\n      set_variable: 'set_variable',\n      del_variable: 'del_variable'\n    }\n  };\n\n  /**\n   * @ngdoc object\n   * @name d7-services.resources.system.resourceConstant:SystemResourceConstant\n   * @description\n   *   Constant for the System resource\n   * @property {string} resourcePath - This is the default alias of Drupal. If you set custom alisa override also this property.\n   * @property {object} actions - Subpaths provided for this resource\n   * @property {string} actions.connect - connect path\n   * @property {string} actions.get_variable - get_variable path\n   * @property {string} actions.del_variable - del_variable path\n   *\n   * @example\n   *\n   * SystemResourceConstant is editable in config phase\n   * <pre>\n   * angular\n   *  .module('myModule', ['d7-services.resources.system'])\n   *  .config(function (SystemResourceConstant) {\n   *     SystemResourceConstant.resourcePath = 'my/path';\n   * }\n   * </pre>\n   *\n   * SystemResourceConstant injectable\n   * <pre>\n   * angular\n   *  .module('myModule', ['d7-services.resources.system'])\n   *  .controller(function (SystemResourceConstant) {\n   *     console.log(SystemResourceConstant.resourcePath);\n   * }\n   * </pre>\n   */\n  angular\n    .module('d7-services.resources.system.resourceConstant', [])\n    .constant(\"SystemResourceConstant\", SystemResourceConstant);\n\n})();\n",";\n(function () {\n  'use strict';\n\n  /**\n   * @ngdoc object\n   * @name d7-services.resources.node:Node\n   * @description\n   * This Module bundles all modules related to drupal node resource\n   * @requires d7-services.resources.node.resourceConstant:NodeResourceConstant\n   * @requires d7-services.resources.node.resource:NodeResource\n   * @requires d7-services.resources.node.channelConstant:NodeChannelConstant\n   * @requires d7-services.resources.node.channel:NodeChannel\n   */\n  angular.module('d7-services.resources.node', [\n    'd7-services.resources.node.resourceConstant',\n    'd7-services.resources.node.resource',\n    'd7-services.resources.node.channelConstant',\n    'd7-services.resources.node.channel']);\n})();",";(function() {\n\t'use strict';\n\n\t/**\n\t * Node Channel Module\n\t */\n\tangular.module('d7-services.resources.node.channel', ['d7-services.commons.baseChannel', 'd7-services.resources.node.channelConstant'])\n\t\t   .factory('NodeChannel', NodeChannel);\n\n\t\n\t/**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t **/\n\tNodeChannel.$inject = [ 'BaseChannel', 'NodeChannelConstant' ];\n\t\n\t/**\n\t * Notification channel for node resource \n\t**/\n\t\n\t/** @ngInject */\n\tfunction NodeChannel(BaseChannel, NodeChannelConstant) {\n\t\n\t\t//setup and return service            \t\n        var nodeChannelService = {\n        \t\t\n        \t//node retrieve request\n    \t\tpubRetrieveConfirmed \t: pubRetrieveConfirmed,\n    \t\tsubRetrieveConfirmed\t: subRetrieveConfirmed,\n    \t\tpubRetrieveFailed \t\t: pubRetrieveFailed,\n    \t\tsubRetrieveFailed\t\t: subRetrieveFailed,\n    \t\t\n        \t//node create request\n        \tpubCreateConfirmed \t\t: pubCreateConfirmed,\n        \tsubCreateConfirmed\t\t: subCreateConfirmed,\n        \tpubCreateFailed \t\t: pubCreateFailed,\n        \tsubCreateFailed\t\t\t: subCreateFailed,\n        \t\n        \t//node update request\n        \tpubUpdateConfirmed \t\t: pubUpdateConfirmed,\n        \tsubUpdateConfirmed\t\t: subUpdateConfirmed,\n        \tpubUpdateFailed \t\t: pubUpdateFailed,\n        \tsubUpdateFailed\t\t\t: subUpdateFailed,\n        \t\n        \t//node delete request\n        \tpubDeleteConfirmed \t\t: pubDeleteConfirmed,\n        \tsubDeleteConfirmed\t\t: subDeleteConfirmed,\n        \tpubDeleteFailed \t\t: pubDeleteFailed,\n        \tsubDeleteFailed\t\t\t: subDeleteFailed,\n        \t\n        \t//node index request\n        \tpubIndexConfirmed \t\t: pubIndexConfirmed,\n        \tsubIndexConfirmed\t\t: subIndexConfirmed,\n        \tpubIndexFailed \t\t\t: pubIndexFailed,\n        \tsubIndexFailed\t\t\t: subIndexFailed,\n        \t\n        \t// Files action\n     \t   \tpubFilesConfirmed\t\t: pubFilesConfirmed,\n     \t   \tsubFilesConfirmed\t\t: subFilesConfirmed,\n     \t   \tpubFilesFailed\t\t\t: pubFilesFailed,\n     \t   \tsubFilesFailed \t\t\t: subFilesFailed,\n     \t   \t\n     \t   \t// Comments action\n     \t   \tpubCommentsConfirmed\t: pubCommentsConfirmed,\n     \t   \tsubCommentsConfirmed\t: subCommentsConfirmed,\n     \t   \tpubCommentsFailed\t\t: pubCommentsFailed,\n     \t   \tsubCommentsFailed \t\t: subCommentsFailed,\n     \t   \t\n     \t   \t// Attachfile action\n     \t   \tpubAttachFileConfirmed\t: pubAttachFileConfirmed,\n     \t   \tsubAttachFileConfirmed\t: subAttachFileConfirmed,\n     \t   \tpubAttachFileFailed\t\t: pubAttachFileFailed,\n     \t   \tsubAttachFileFailed \t: subAttachFileFailed\n\n        };\n        \n        return nodeChannelService;\n\n        ////////////\n        \n        //Node retrieve request functions\n        \n        /**\n\t\t * pubRetrieveConfirmed\n\t\t * \n\t\t * Publish the NodeRetrieveConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubRetrieveConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.retrieveConfirmed, args);\n    \t};\n    \t\n    \t/**\n\t\t * subRetrieveConfirmed\n\t\t * \n\t\t * subscribe for the NodeRetrieveConfirmed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveConfirmed function\n\t\t * @param \t{function} scopeHandler The callback handler for NodeRetrieveConfirmed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subRetrieveConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.retrieveConfirmed, _Scope, scopeHandler);\n    \t\t\n    \t\treturn unsubScopeHandler;\n    \t};\n    \t\n    \t//###############\n    \t\n        \n        /**\n\t\t * pubRetrieveConfirmed\n\t\t * \n\t\t * Publish the NodeRetrieveConfirmed event with giver args \n\t     *\n\t\t * @param \t{Object} args The events arguments \n\t\t * \n\t\t * \n\t\t**/\n    \tfunction pubRetrieveFailed(args) {\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.retrieveFailed, args);\n    \t};\n    \t\n    \t/**\n\t\t * subRetrieveFailed\n\t\t * \n\t\t * subscribe for the NodeRetrieveFailed event\n\t     *\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveFailed function\n\t\t * @param \t{function} scopeHandler The callback handler for NodeRetrieveFailed event\n\t\t * \n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n\t\t * \n\t\t**/\n    \tfunction subRetrieveFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.retrieveFailed, _Scope, scopeHandler);\n\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n    \t//Node create request functions\n\n    \t/**\n    \t * pubCreateConfirmed\n    \t * \n    \t * Publish the NodeCreateConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubCreateConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.createConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subCreateConfirmed\n    \t * \n    \t * subscribe for the NodeCreateConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for NodeCreateConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subCreateConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.createConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubCreateConfirmed\n    \t * \n    \t * Publish the NodeCreateConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubCreateFailed(args) {\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.createFailed, args);\n    \t};\n\n    \t/**\n    \t * subCreateFailed\n    \t * \n    \t * subscribe for the NodeCreateFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateFailed function\n    \t * @param \t{function} scopeHandler The callback handler for NodeCreateFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subCreateFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.createFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n\n    \t//Node update request functions\n\n    \t/**\n    \t * pubUpdateConfirmed\n    \t * \n    \t * Publish the NodeUpdateConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubUpdateConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.updateConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subUpdateConfirmed\n    \t * \n    \t * subscribe for the NodeUpdateConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for NodeUpdateConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subUpdateConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.updateConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n    \t/**\n    \t * pubUpdateConfirmed\n    \t * \n    \t * Publish the NodeUpdateConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubUpdateFailed(args) {\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.updateFailed, args);\n    \t};\n\n    \t/**\n    \t * subUpdateFailed\n    \t * \n    \t * subscribe for the NodeUpdateFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateFailed function\n    \t * @param \t{function} scopeHandler The callback handler for NodeUpdateFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subUpdateFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.updateFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n    \t//Node delete request functions\n\n    \t/**\n    \t * pubDeleteConfirmed\n    \t * \n    \t * Publish the NodeDeleteConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubDeleteConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.deleteConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subDeleteConfirmed\n    \t * \n    \t * subscribe for the NodeDeleteConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for NodeDeleteConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subDeleteConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.deleteConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubDeleteConfirmed\n    \t * \n    \t * Publish the NodeDeleteConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubDeleteFailed(args) {\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.deleteFailed, args);\n    \t};\n\n    \t/**\n    \t * subDeleteFailed\n    \t * \n    \t * subscribe for the NodeDeleteFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteFailed function\n    \t * @param \t{function} scopeHandler The callback handler for NodeDeleteFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subDeleteFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.deleteFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n\n    \t//Node index request functions\n\n    \t/**\n    \t * pubIndexConfirmed\n    \t * \n    \t * Publish the NodeIndexConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubIndexConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.indexConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subIndexConfirmed\n    \t * \n    \t * subscribe for the NodeIndexConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for NodeIndexConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subIndexConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.indexConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubIndexConfirmed\n    \t * \n    \t * Publish the NodeIndexConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubIndexFailed(args) {\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.indexFailed, args);\n    \t};\n\n    \t/**\n    \t * subIndexFailed\n    \t * \n    \t * subscribe for the NodeIndexFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexFailed function\n    \t * @param \t{function} scopeHandler The callback handler for NodeIndexFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subIndexFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.indexFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n    \t//Node files request functions\n\n    \t/**\n    \t * pubFilesConfirmed\n    \t * \n    \t * Publish the NodeFilesConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubFilesConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.filesConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subFilesConfirmed\n    \t * \n    \t * subscribe for the NodeFilesConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subFilesConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for NodeFilesConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subFilesConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.filesConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubFilesConfirmed\n    \t * \n    \t * Publish the NodeFilesConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubFilesFailed(args) {\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.filesFailed, args);\n    \t};\n\n    \t/**\n    \t * subFilesFailed\n    \t * \n    \t * subscribe for the NodeFilesFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subFilesFailed function\n    \t * @param \t{function} scopeHandler The callback handler for NodeFilesFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subFilesFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.filesFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n\n    \t//Node comments request functions\n\n    \t/**\n    \t * pubCommentsConfirmed\n    \t * \n    \t * Publish the NodeCommentsConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubCommentsConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.commentsConfirmed, args);\n    \t};\n\n    \t/**\n    \t * subCommentsConfirmed\n    \t * \n    \t * subscribe for the NodeCommentsConfirmed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subCommentsConfirmed function\n    \t * @param \t{function} scopeHandler The callback handler for NodeCommentsConfirmed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subCommentsConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.commentsConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t * pubCommentsConfirmed\n    \t * \n    \t * Publish the NodeCommentsConfirmed event with giver args \n    \t *\n    \t * @param \t{Object} args The events arguments \n    \t * \n    \t * \n    \t**/\n    \tfunction pubCommentsFailed(args) {\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.commentsFailed, args);\n    \t};\n\n    \t/**\n    \t * subCommentsFailed\n    \t * \n    \t * subscribe for the NodeCommentsFailed event\n    \t *\n    \t * @param \t{Object} _Scope The scope that calls the channels subCommentsFailed function\n    \t * @param \t{function} scopeHandler The callback handler for NodeCommentsFailed event\n    \t * \n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t * \n    \t**/\n    \tfunction subCommentsFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.commentsFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n\n\n    \t//Node attachFile request functions\n\n    \t/**\n    \t* pubAttachFileConfirmed\n    \t* \n    \t* Publish the NodeAttachFileConfirmed event with giver args \n    \t*\n    \t* @param \t{Object} args The events arguments \n    \t* \n    \t* \n    \t**/\n    \tfunction pubAttachFileConfirmed(args) {\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.attachFileConfirmed, args);\n    \t};\n\n    \t/**\n    \t* subAttachFileConfirmed\n    \t* \n    \t* subscribe for the NodeAttachFileConfirmed event\n    \t*\n    \t* @param \t{Object} _Scope The scope that calls the channels subAttachFileConfirmed function\n    \t* @param \t{function} scopeHandler The callback handler for NodeAttachFileConfirmed event\n    \t* \n    \t* @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t* \n    \t**/\n    \tfunction subAttachFileConfirmed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.attachFileConfirmed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//###############\n\n\n    \t/**\n    \t* pubAttachFileConfirmed\n    \t* \n    \t* Publish the NodeAttachFileConfirmed event with giver args \n    \t*\n    \t* @param \t{Object} args The events arguments \n    \t* \n    \t* \n    \t**/\n    \tfunction pubAttachFileFailed(args) {\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.attachFileFailed, args);\n    \t};\n\n    \t/**\n    \t* subAttachFileFailed\n    \t* \n    \t* subscribe for the NodeAttachFileFailed event\n    \t*\n    \t* @param \t{Object} _Scope The scope that calls the channels subAttachFileFailed function\n    \t* @param \t{function} scopeHandler The callback handler for NodeAttachFileFailed event\n    \t* \n    \t* @return \t{function} The unsubscribe function from the $rootScope.on() call\n    \t* \n    \t**/\n    \tfunction subAttachFileFailed(_Scope, scopeHandler) {\n    \t\tvar unsubScopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.attachFileFailed, _Scope, scopeHandler);\n    \t\treturn unsubScopeHandler;\n    \t};\n\n    \t//________________________________________________________________________________________________________________________________________\n    \t\n\t};\n\n})();",";(function() {\n    'use strict';\n\n    /**\n\t *  Constants for NodeChannel\n\t *  \n\t *  NOTE: if you want to change this constant do this in a config section of angular\n\t */\n\tvar NodeChannelConstant =  {\n\t \t\t// Retrieve action\n \t\t\tretrieveConfirmed \t\t: 'event:drupal-node-retrieveConfirmed',\n \t\t\tretrieveFailed  \t\t: 'event:drupal-node-retrieveFailed',\n \t\t\t// Create action\n \t\t\tcreateConfirmed\t\t: 'event:drupal-node-createConfirmed',\n \t\t\tcreateFailed  \t\t\t: 'event:drupal-node-createFailed',\n \t\t\t// Update action\n \t\t\tupdateConfirmed\t\t: 'event:drupal-node-updateConfirmed',\n \t\t\tupdateFailed  \t\t\t: 'event:drupal-node-updateFailed',\n \t\t\t// Delete action\t\n \t\t\tdeleteConfirmed\t\t: 'event:drupal-node-deleteConfirmed',\n \t\t\tdeleteFailed  \t\t\t: 'event:drupal-node-deleteFailed',\n \t\t\t// Index action\n \t\t\tindexConfirmed  \t\t: 'event:drupal-node-indexConfirmed',\n \t\t\tindexFailed  \t\t\t: 'event:drupal-node-indexFailed',\n \t\t\t// Files action\n \t\t\tfilesConfirmed\t\t\t: 'event:drupal-node-filesConfirmed',\n \t\t\tfilesFailed  \t\t\t: 'event:drupal-node-filesFailed',\n \t\t\t// Comments action\n \t\t\tcommentsConfirmed\t\t: 'event:drupal-node-commentsConfirmed',\n \t\t\tcommentsFailed  \t\t: 'event:drupal-node-commentsFailed',\n \t\t\t// Attach file action\n \t\t\tattachFileConfirmed\t: 'event:drupal-node-attachFileConfirmed',\n \t\t\tattachFileFailed  \t\t: 'event:drupal-node-attachFileFailed'\n\t \t\t\n\t};\n    \n\t/**\n\t * Node Channel Constant\n\t */\n\tangular\n\t    .module('d7-services.resources.node.channelConstant', [])\n\t    .constant(\"NodeChannelConstant\", NodeChannelConstant);\n\n})();\n",";(function() {\n    'use strict';\n\n\t/**\n\t * Node Resource Modules\n\t * \n\t * see sourcecode in services/resources/node_resource.inc\n\t**/\n    angular.module('d7-services.resources.node.resource', ['d7-services.commons.configurations', 'd7-services.resources.node.resourceConstant', 'd7-services.resources.node.channel', 'd7-services.commons.baseResource'])\n    \n    /**\n\t * NodeResource\n\t * \n\t * This service mirrors the Drupal node resource of the services 3.x module.\n\t * To use this you have to set following line in your Drupal CORS module settings\n\t * your_api_endpoint/node/*|<mirror>|POST|Content-Type,Authorization|true\n\t * \n\t**/\n    .factory('NodeResource', NodeResource);\n\n    /**\n\t * Manually identify dependencies for minification-safe code\n\t * \n\t**/\n    NodeResource.$inject = ['$http', 'BaseResource', 'DrupalApiConstant', 'NodeResourceConstant', 'NodeChannel'];\n    \n\t/** @ngInject */\n\tfunction NodeResource($http, BaseResource, DrupalApiConstant, NodeResourceConstant, NodeChannel) { \n\t\t\n\t\t//setup and return service            \t\n        var nodeResourceService = {\n        \t//CRUD operations\n        \tretrieve \t: retrieve,\n    \t\tcreate \t\t: create,\n    \t\tupdate \t\t: update,\n    \t\tdelete \t\t: _delete,\n    \t    index \t\t: index,\n    \t    //Actions\n    \t    files\t\t: files,\n\t\t\tcomments \t: comments,\n\t\t\tattachFile : attachFile\n        };\n        \n        return nodeResourceService;\n\n        ////////////\n        \n        /**\n\t\t * retrieve\n\t\t * \n\t\t * Retrieve a node\n\t\t * \n\t\t * Method: GET \n\t\t * Url: http://drupal_instance/api_endpoint/node/{NID}\n\t\t * \n\t\t * @params  {Object} data The requests data\n\t\t * \t\t\t@key \t{Integer} nid NID of the node to be loaded, required:true, source:path\n\t\t * \n\t\t * @return \t{Promise} A node object\n\t\t * \n\t\t**/\n    \tfunction retrieve(data) {\n    \t\tvar retrievePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath + '/' + data.nid;\n    \t\treturn BaseResource.retrieve( retrievePath,NodeChannel.pubRetrieveConfirmed,  NodeChannel.pubRetrieveFailed);\n\t    };\n\t    \n\t    /**\n\t     * create\n\t     * \n\t     * Create a new node.\n\t     * This function uses drupal_form_submit() and as such expects all input to match\n\t     * the submitting form in question.\n\t     * \n\t     * Method: POST\n\t     * Url: http://drupal_instance/api_endpoint/node\n\t     * \n\t     * @params  {Object} data The data of the node to create, required:true, source:post body\n\t     * \n\t     * \n\t     * @return \t{Promise} The node object of the newly created node.\n\t     *\n\t    **/\n\t    function create(data) {\n\t    \t\n\t    \tvar createPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath,\n\t    \t\tcreateData \t= {\n\t\t\t\t\tnode : data\n\t\t\t\t};\n\n    \t\treturn BaseResource.create( createData, createPath, NodeChannel.pubCreateConfirmed, NodeChannel.pubCreateFailed);\n\n\t    };\n\t        \n\t    /**\n\t     * update\n\t     * \n\t     * Update a node\n\t     * \n\t     * Method: PUT\n\t     * Url: http://drupal_instance/api_endpoint/node/{NID}\n\t     * \n\t     * @params  {Object} data The requests data\n\t     * \t\t\t@key \t{Integer} nid Unique identifier for this node, required:true, source:path\n\t     * \t\t\t@key \t{Array}  data The node object with updated information, required:true, source:post body\n\t     * \n\t     * @return \t{Promise}\n\t     *\n\t    **/\n\t    function update(data) {\n\t    \t\n\t    \tvar updatePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath + '/' + data.nid;\n\t    \t\n\t    \tdelete data.nid;\n    \t\tvar updateData = { node: data };\n    \t\t\n    \t\t\n    \t\treturn BaseResource.update( updateData, updatePath, NodeChannel.pubUpdateConfirmed, NodeChannel.pubUpdateFailed);\n\n\t    };\n\t    \n\t    /**\n\t     * delete\n\t     * \n\t     * Delete a node\n\t     * \n\t     * Method: DELETE\n\t     * Url: http://drupal_instance/api_endpoint/node/{NID}\n\t     * \n\t     * @params  {Object} data the requests data\n\t     * \t\t\t@key \t{Integer} nid The id of the node to delete, required:true, source:path\n\t     * \n\t     * @return \t{Promise}\n\t     *\n\t    **/\n\t    function _delete(data) {\n\t    \tvar deletePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath + '/' + data.nid\n\t    \treturn BaseResource.delete(deletePath, NodeChannel.pubDeleteConfirmed,  NodeChannel.pubDeleteFailed);\n\t    };\n\t    \n\t    /**\n\t     * index\n\t     * \n\t     * List all nodes\n\t     * \n\t     * Method: GET\n\t\t * Url: http://drupal_instance/api_endpoint/node\n\t\t * \n\t\t * @params  {Object} data the requests data\n\t\t * \t\t@key \t{Integer} page The zero-based index of the page to get. defaults to 0., required:false, source:param\n\t\t * \t\t@key \t{Integer} pagesize Number of records to get per page., required:false, source:param\n\t\t * \t\t@key \t{String} fields The fields to get., required:false, source:param\n\t\t * \t\t@key \t{Array} parameters Parameters, required:false, source:param\n\t\t * \t\t\n\t     * \n\t     * @return \t{Promise}\n\t     *\n\t    **/\n\t    function index(data) {\n\t    \tvar indexPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath + '/';\n\t    \treturn BaseResource.index(data, indexPath, NodeChannel.pubIndexConfirmed, NodeChannel.pubIndexFailed);\n\t    };\n\t    \n\t    /**\n\t     * files\n\t     * \n\t     * This method returns files associated with a node.\n\t     * \n\t     * Method: GET\n\t     * Url: http://drupal_instance/api_endpoint/node/files/{NID}/{FILE_CONTENTS}/{IMAGE_STYLES}\n\t     * \n\t     * @params  {Object} data the requests data\n\t     * \t\t\t @key {Integer} nid The nid of the node whose files we are getting, required:true, source:path\n\t\t * \t\t     @key {Integer} file_contents To return file contents or not., required:false, source:path\n\t\t * \t\t\t @key {Integer} image_styles To return image styles or not., required:false, source:path\n\t     * \n\t     * @return \t{Promise}\n\t     *\n\t    **/\n\t    function files(data) {\n\t    \tvar filesPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath + '/' + data.nid + '/' + NodeResourceConstant.actions.files;\n\t    \t\n    \t\t//set file_contents value\n    \t\tfilesPath += '/'+( (data.file_contents)?1:0);\n    \t\t//set image_styles value\n    \t\tfilesPath += '/'+( (data.image_styles)?1:0);\n\t    \t\n\t    \tvar requestConfig = {\n\t    \t\t\turl : filesPath,\n\t    \t\t\tmethod : 'GET'\n\t    \t}\n\t    \t\n\t    \treturn BaseResource.request(requestConfig, NodeChannel.pubFilesConfirmed, NodeChannel.pubFilesFailed);\n\t    \t\n\t    };\n\t    \n\t    /**\n\t     * comments\n\t     * \n\t     * This method returns the number of new comments on a given node.\n\t     * \n\t     * Method: GET\n\t     * Url: http://drupal_instance/api_endpoint/node/comments/{NID}\n\t     * \n\t     * @params  {Object} data the requests data\n\t     * \t\t\t@key {Integer} nid The node id to load comments for., required:true, source:path\n\t\t * \t\t\t@key {Integer} count Number of comments to load., required:false, source:param\n\t\t * \t\t\t@key {Integer} offset If count is set to non-zero value, you can pass also non-zero value for start. For example to get comments from 5 to 15, pass count=10 and start=5., required:false, source:param\n\t\t * \n\t     * @return \t{Promise}\n\t     *\n\t    **/\n\t    function comments(data) {\n\t    \n\t    \tvar commentsPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath + '/' + data.nid + '/' + NodeResourceConstant.actions.comments,\n\t    \t\trequestConfig = {\n\t    \t\t\turl : commentsPath,\n\t    \t\t\tmethod : 'GET'\n\t    \t\t};\n\t    \t\n\t    \tif( data.count || data.count == 0 || data.offset || data.offset == 0 ) {\n\t    \t\tcommentsPath += '?';\n\t    \t}\n\t    \t\n\t    \t//optional data\n    \t\tif(data.count || data.count == 0) {\n    \t\t\tcommentsPath += 'count='+data.count+',';\n    \t\t}\n    \t\t//@TODO check if we need count set to non-zero to use offset value\n    \t\tif(data.offset || data.offset == 0 ) {\n    \t\t\tcommentsPath += 'offset='+data.offset+',';\n    \t\t}\n\n\t    \treturn BaseResource.request(requestConfig, NodeChannel.pubCommentsConfirmed, NodeChannel.pubCommentsFailed);\n\t\t\n\t    };\n\t    \n\t    /**\n\t     * attachFile\n\t     * \n\t     * This method returns the number of new comments on a given node.\n\t     * \n\t     * Method: POST \n\t     * Url: http://drupal_instance/api_endpoint/node/attach_file/{NID}\n\t     * \n\t     * @params  {Object} data the requests data\n\t     * \t\t\t@key {Integer} nid The nid of the node to attach a file to, required:true, source:path\n\t\t * \t\t\t@key {Sting} field_name The file field name, required:true, source:post body\n\t\t * \t\t\t@key {Integer} attach Attach the file(s) to the node. If FALSE, this clears ALL files attached, and attaches the files, required:false, source:post body\n\t\t * \t\t\t@key {Array} field_values The extra field values, required:false, source:post body\n\t\t * \n\t     * @return \t{Promise}\n\t     *\n\t    **/\n\t    function attachFile(data) {\n\t    \t//@TODO check how it works\n\t    \t\n\t    \tvar attachFilePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath + '/' + data.nid + '/' + NodeResourceConstant.actions.attachFile,\n\t    \t\trequestConfig = {\n\t    \t\t\turl : attachFilePath,\n\t    \t\t\tmethod : 'POST ',\n\t    \t\t\tdata : {\n\t    \t\t\t\tfield_name \t\t: field_name,\n\t    \t\t\t\tattach \t\t\t: data.attach,\n\t\t    \t\t\tfield_values \t: data.field_values\n\t    \t\t\t}\n\t    \t\t};\n\t    \t\n\t    \treturn BaseResource.request(attachFilePath, NodeChannel.pubAttachFileConfirmed, NodeChannel.pubAttachFileFailed);\n\t    };\n\t\t\n\t\t\t\t\t\n\t};\n\n})();\n",";(function() {\n    'use strict';\n    \n    /**\n\t *  Constants for NodeResourceModules\n\t *  \n\t *  NOTE: if you want to change this constant do this in your app.js config section\n\t */\n\tvar NodeResourceConstant =  {\n\n\t\t// NOTE: This is the default alias aliases for your system resources defined in Drupal\n\t\tresourcePath : 'node',\n\t\t//actions of user resource\n\t\tactions : {\n\t\t\t//following actions are defined over their request method (GET, POST, PUT, DELETE) so they are commented out\n\t\t\t//retrieve \t: 'retrieve',\n\t\t\t//create \t: 'create',\n\t\t\t//update \t: 'update',\n\t\t\t//delete \t: 'delete',\n\t\t    //index \t: 'index',\n\t\t\t//\n\t\t\tfiles\t\t: 'files',\n\t\t\tcomments \t: 'comments',\n\t\t\tattach_file : 'attach_file'\n\t\t}\n\n\t};\n\n\t/**\n\t * Node Constant Modules\n\t */\n\tangular\n\t    .module('d7-services.resources.node.resourceConstant', [])\n\t    .constant(\"NodeResourceConstant\", NodeResourceConstant);\n\t\n})();\n"],"sourceRoot":"/source/"}