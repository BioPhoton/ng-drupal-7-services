{"version":3,"sources":["src/ng-drupal-7-services.bundle.js","src/commons/commons.baseChannel.js","src/commons/commons.baseResource.js","src/commons/commons.bundle.js","src/commons/commons.drupalApiConfig.js","src/commons/commons.helperService.js","src/commons/commons.validationConstant.js","src/resources/resources.bundle.js","src/commons/authentication/authentication.bundle.js","src/commons/authentication/authentication.channel.js","src/commons/authentication/authentication.channelConstant.js","src/commons/authentication/authentication.httpIntercepter.js","src/commons/authentication/authentication.service.js","src/commons/authentication/authentication.serviceConstant.js","src/commons/http/http.bundle.js","src/commons/http/http.configurations.js","src/commons/http/http.requestAcceptIntercepter.js","src/commons/directives/directives.bundle.js","src/commons/directives/directives.toggleByAccessLevel.js","src/resources/comment/comment.bundle.js","src/resources/comment/comment.channel.js","src/resources/comment/comment.channelConstant.js","src/resources/comment/comment.resource.js","src/resources/comment/comment.resourceConstant.js","src/resources/node/node.bundle.js","src/resources/node/node.channel.js","src/resources/node/node.channelConstant.js","src/resources/node/node.resource.js","src/resources/node/node.resourceConstant.js","src/resources/file/file.bundle.js","src/resources/file/file.channel.js","src/resources/file/file.channelConstant.js","src/resources/file/file.resource.js","src/resources/file/file.resourceConstant.js","src/resources/taxonomy_term/taxonomy_term.bundle.js","src/resources/taxonomy_term/taxonomy_term.channel.js","src/resources/taxonomy_term/taxonomy_term.channelConstant.js","src/resources/taxonomy_term/taxonomy_term.resource.js","src/resources/taxonomy_term/taxonomy_term.resourceConstant.js","src/resources/system/system.bundle.js","src/resources/system/system.channel.js","src/resources/system/system.channelConstant.js","src/resources/system/system.resource.js","src/resources/system/system.resourceConstant.js","src/resources/taxonomy_vocabulary/taxonomy_vocabulary.bundle.js","src/resources/taxonomy_vocabulary/taxonomy_vocabulary.channel.js","src/resources/taxonomy_vocabulary/taxonomy_vocabulary.channelConstant.js","src/resources/taxonomy_vocabulary/taxonomy_vocabulary.resource.js","src/resources/taxonomy_vocabulary/taxonomy_vocabulary.resourceConstant.js","src/resources/user/user.bundle.js","src/resources/user/user.channel.js","src/resources/user/user.channelConstant.js","src/resources/user/user.resource.js","src/resources/user/user.resourceConstant.js","src/resources/views/views.bundle.js","src/resources/views/views.channel.js","src/resources/views/views.channelConstant.js","src/resources/views/views.operatorsConstant.js","src/resources/views/views.resource.js","src/resources/views/views.resourceConstant.js"],"names":["angular","module","BaseChannel","$rootScope","subRootEmit","eventName","_Scope","scopeHandler","mapArgs","unsubsSopeHandler","$on","event","args","pubRootEmit","$emit","baseChannelService","factory","$inject","BaseResource","$http","$q","DrupalApiConstant","request","requestConfig","pubSuccess","pubError","errors","length","reject","success","responseData","status","headers","config","error","responseError","retrieve","retrievePath","url","method","create","data","createPath","update","updatePath","_delete","deletePath","index","indexPath","options","page","pagesize","Object","keys","parameters","fields","prepareIndexGetParams","type","getParamsString","prepaeredParams","forEach","value","key","prepareGetParams","preparePostData","values","format","postData","undefined","formats","array_of_keys","array_of_values","arrayValues","k","this","push","getParams","array","array_keys","array_key_value","json","parseInt","NaN","join","BaseResourceService","delete","drupal_instance","api_endpoint","responseFormat","session_expiration_time","session_expiration_unite","publicFilePath","privateFilePath","imageStyles","large","medium","thumbnail","LANGUAGE_NONE","constant","DrupalHelperService","getApiPath","getDrupalPath","getPathToImgByStyle","style","isPrivate","structureField","label","language","prepatedData","isObject","mergeItems","newItems","currentItems","callback","obj","newItem","isUnique","uniqueNodes","currentItem","nid","concat","sprintf","regex","a","arguments","i","pad","str","len","chr","leftJustify","padding","Array","justify","prefix","minWidth","zeroPad","customPadChar","diff","slice","formatBaseX","base","precision","number","2","8","16","toString","formatString","doFormat","substring","valueIndex","flags","textTransform","j","positivePrefix","prefixBaseX","flagsl","charAt","isFinite","Error","indexOf","String","fromCharCode","toUpperCase","Math","round","abs","toLowerCase","replace","drupalHelperService","ValidationConstant","isRequired","isInteger","AuthenticationChannel","AuthenticationChannelConstant","pubLoginConfirmed","loginConfirmed","subLoginConfirmed","prepArgs","pubLoginFailed","loginFailed","subLoginFailed","pubLogoutConfirmed","logoutConfirmed","subLogoutConfirmed","pubLogoutFailed","logoutFailed","subLogoutFailed","pubRefreshConnectionConfirmed","refreshConnectionConfirmed","subRefreshConnectionConfirmed","pubRefreshConnectionFailed","refreshConnectionFailed","subRefreshConnectionFailed","pubTryConnectConfirmed","tryConnectConfirmed","subTryConnectConfirmed","pubTryConnectFailed","tryConnectFailed","subTryConnectFailed","pubConnectionStateUpdated","connectionStateUpdated","subConnectionStateUpdated","pubCurrentUserUpdated","currentUserUpdated","subCurrentUserUpdated","authenticationChannelService","AuthenticationHttpInterceptor","$injector","doRequestCongiguration","tokenHeaders","invoke","AuthenticationService","getAuthenticationHeaders","extend","withCredentials","intercepter","AuthenticationServiceConstant","SystemResource","UserResource","$cookies","isUser","userOrUid","currentUser","getCurrentUser","uid","isAuthorized","accessLevelRoles","userRoles","roles","isArray","prop","login","loginData","setAuthenticationHeaders","token","setLastConnectTime","Date","now","setConnectionState","user","setCookies","sessid","session_name","setCurrentUser","logout","delAuthenticationHeaders","delCookies","anonymousUser","refreshConnection","defer","refreshTokenFromServer","then","response","tryConnect","resolve","promise","connect","newUser","getConnectionState","newState","userIsConected","authenticationHeaders","newToken","newData","Authorization","X-CSRF-TOKEN","newSessid","newSession_name","put","sessionCookieOptions","remove","path","getLastConnectTime","lastConnectTime","newTimeInMs","domain","authenticationService","anonymous_user","id","role","authenticated_user","administrator","publicLevel","anonLevel","userLevel","adminLevel","cache","timestamp","accessLevels","public","anon","admin","hTTPConfigurations","$httpProvider","interceptors","RequestIntercepterAccept","FileResourceConstant","resourcePath","toggleByAccesslevel","restrict","link","$scope","element","attrs","updateCSS","accessLevel","toggleAction","css","prevDisp","currentUserUpdatedHandler","$observe","al","$eval","directive","CommentChannel","CommentChannelConstant","pubRetrieveConfirmed","retrieveConfirmed","subRetrieveConfirmed","pubRetrieveFailed","retrieveFailed","subRetrieveFailed","pubCreateConfirmed","createConfirmed","subCreateConfirmed","pubCreateFailed","createFailed","subCreateFailed","pubUpdateConfirmed","updateConfirmed","subUpdateConfirmed","pubUpdateFailed","updateFailed","subUpdateFailed","pubDeleteConfirmed","deleteConfirmed","subDeleteConfirmed","pubDeleteFailed","deleteFailed","subDeleteFailed","pubIndexConfirmed","indexConfirmed","subIndexConfirmed","pubIndexFailed","indexFailed","subIndexFailed","pubCountAllConfirmed","countAllConfirmed","subCountAllConfirmed","pubCountAllFailed","countAllFailed","subCountAllFailed","pubCountNewConfirmed","countNewConfirmed","subCountNewConfirmed","pubCountNewFailed","countNewFailed","subCountNewFailed","commentChannelService","CommentResource","CommentResourceConstant","cid","createData","comment","updateData","countAll","pathTocountAll","actions","countNew","pathTocountNew","commentResourceService","NodeChannel","NodeChannelConstant","pubFilesConfirmed","filesConfirmed","subFilesConfirmed","pubFilesFailed","filesFailed","subFilesFailed","pubCommentsConfirmed","commentsConfirmed","subCommentsConfirmed","pubCommentsFailed","commentsFailed","subCommentsFailed","pubAttachFileConfirmed","attachFileConfirmed","subAttachFileConfirmed","pubAttachFileFailed","attachFileFailed","subAttachFileFailed","nodeChannelService","NodeResource","NodeResourceConstant","node","files","filesPath","comments","commentsPath","count","offset","attachFile","attachFilePath","field_name","attach","field_values","nodeResourceService","attach_file","FileChannel","FileChannelConstant","pubCreateRawConfirmed","createRawConfirmed","subCreateRawConfirmed","pubCreateRawFailed","createRawFailed","subCreateRawFailed","fileChannelService","FileResource","fid","file_contents","image_styles","formData","FormData","filename","append","file","filesize","image_file_name","transformRequest","identity","Content-Type","createRaw","createRawPath","fileResourceService","TaxonomyTermChannel","TaxonomyTermChannelConstant","pubSelectNodesConfirmed","selectNodesConfirmed","subSelectNodesConfirmed","pubSelectNodesFailed","selectNodesFailed","subSelectNodesFailed","taxonomy_termChannelService","TaxonomyTermResource","TaxonomyTermResourceConstant","tid","term","selectNodes","pathToSelectNodes","taxonomy_termResourceService","SystemChannel","SystemChannelConstant","pubConnectConfirmed","connectConfirmed","subConnectConfirmed","pubConnectFailed","connectFailed","subConnectFailed","pubGetVariableConfirmed","getVariableConfirmed","subGetVariableConfirmed","pubGetVariableFailed","getVariableFailed","subGetVariableFailed","pubSetVariableConfirmed","setVariableConfirmed","subSetVariableConfirmed","pubSetVariableFailed","setVariableFailed","subSetVariableFailed","pubDelVariableConfirmed","delVariableConfirmed","subDelVariableConfirmed","pubDelVariableFailed","delVariableFailed","subDelVariableFailed","systemChannelService","SystemResourceConstant","connectPath","get_variable","getVariablePath","name","set_variable","setVariablePath","del_variable","delVariablePath","systemResourceService","TaxonomyVocabularyChannel","TaxonomyVocabularyChannelConstant","pubGetTreeConfirmed","getTreeConfirmed","subGetTreeConfirmed","pubGetTreeFailed","getTreeFailed","subGetTreeFailed","taxonomy_vocabularyChannelService","TaxonomyVocabularyResource","TaxonomyVocabularyResourceConstant","vid","vocabulary","getTree","pathToGetTree","taxonomy_vocabularyResourceService","UserChannel","UserChannelConstant","pubTokenConfirmed","tokenConfirmed","subTokenConfirmed","pubTokenFailed","tokenFailed","subTokenFailed","pubRegisterConfirmed","registerConfirmed","subRegisterConfirmed","pubRegisterFailed","registerFailed","subRegisterFailed","pubResendWelcomeEmailConfirmed","resend_welcome_emailConfirmed","subResendWelcomeEmailConfirmed","pubResendWelcomeEmailFailed","resend_welcome_emailFailed","subResendWelcomeEmailFailed","pubCancelConfirmed","cancelConfirmed","subCancelConfirmed","pubCancelFailed","cancelFailed","subCancelFailed","pubPasswordResetConfirmed","password_resetConfirmed","subPasswordResetConfirmed","pubPasswordResetFailed","password_resetFailed","subPasswordResetFailed","pubRequestNewPasswordConfirmed","requestNewPasswordConfirmed","subRequestNewPasswordConfirmed","pubRequestNewPasswordFailed","requestNewPasswordFailed","subRequestNewPasswordFailed","userChannelService","passwordResetConfirmed","passwordResetFailed","resendWelcomeEmailConfirmed","resendWelcomeEmailFailed","UserResourceConstant","createdata","pass","mail","notify","register","registerPath","resendWelcomeEmail","resendWelcomeEmailPath","resend_welcome_email","cancel","cancelPath","passwordReset","passwordResetPath","password_reset","requestNewPassword","requestNewPasswordPath","request_new_password","pathToLogin","username","password","pathToLogout","pathToToken","userResourceService","ViewsChannel","ViewsChannelConstant","viewsChannelService","ViewsOperatorsConstant","sort_operators","asc","desc","filter_operators","is_less_than","is_less_than_or_equal_to","is_equal_to","is_not_equal_to","is_greater_than_or_equal_to","is_greater_than","is_between","is_not_between","regular_expression","ViewsResource","ViewsResourceConstant","_data","merge","view_name","preparedParams","preparedParamsArray","exposedFiltersFieldsWithOperators","exposed_filters","fieldName","substr","split","shift","viewsResourceService"],"mappings":"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","file":"ng-drupal-7-services.js","sourcesContent":[";(function() {\r\n    'use strict';\r\n    \r\n\t/**\r\n\t * User modules bundle\r\n\t**/\r\n\tangular\r\n\t    .module('d7-services', \r\n\t    \t\t['d7-services.resources', \r\n\t    \t\t 'd7-services.commons'\r\n\t    \t\t ]);\r\n})();",";(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * Base Channel Module\r\n\t */\r\n\tangular.module('d7-services.commons.baseChannel', [])\r\n\t\t   .factory('BaseChannel', BaseChannel);\r\n\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\tBaseChannel.$inject = [ '$rootScope' ];\r\n\t\r\n\t/**\r\n\t * The channels basic publish and subscribe functions\r\n\t * \r\n\t **/\r\n\t/** @ngInject */\r\n\tfunction BaseChannel($rootScope) {\r\n\t\t\r\n\t\tvar baseChannelService = {\r\n\t\t\t\tpubRootEmit : pubRootEmit,\r\n        \t\tsubRootEmit\t: subRootEmit\r\n\t\t};\r\n       \r\n        return baseChannelService;\r\n\r\n        ////////////\r\n\r\n        /**\r\n\t\t * subRootEmit\r\n\t\t * \r\n\t\t * subscribe for an event published over $rootScope.$emit(event, args)\r\n\t     *\r\n\t\t * @param \t{String} eventName The events name\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subscribe function\r\n\t\t * @param \t{function} scopeHandler The callback handler normally defined in the $scopes controller or directive or service\r\n\t\t * @param \t{function} $mapArgs A mapper function to customize the given event arguments \r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n     \tfunction subRootEmit(eventName, _Scope, scopeHandler, mapArgs) {\r\n     \t\t\r\n     \t\t//subscribe with rootScope to event and cache unsubscribe function\r\n     \t\tvar unsubsSopeHandler = $rootScope.$on(eventName, function(event, args) {\r\n     \t\t\t\tif(typeof mapArgs === 'function') {\r\n     \t\t\t\t\tscopeHandler(mapArgs(args));\r\n     \t\t\t\t} else {\r\n     \t\t\t\t\tscopeHandler(args);\r\n     \t\t\t\t}\r\n\t     \t\t\t\r\n\t     \t\t});\r\n     \t\t \r\n     \t\t//unsubscribe rootScope listener after scope destruction\r\n     \t\t_Scope.$on('$destroy', function() {\r\n     \t\t\tunsubsSopeHandler();\r\n     \t\t});\r\n     \t\t\r\n     \t\t//return he unsubscribe function from the $rootScope.on() call\r\n     \t\treturn unsubsSopeHandler;\r\n     \t};\r\n     \t\r\n     \t/**\r\n\t\t * pubRootEmit\r\n\t\t * \r\n\t\t * publish an event only to $rootScope\r\n\t     *\r\n\t\t * @param \t{String} eventName The events name\r\n\t\t * @param \t{object} args The events arguments \r\n\t\t * \r\n\t\t**/\r\n     \tfunction pubRootEmit(eventName, args) {\r\n     \t\t $rootScope.$emit(eventName, args);\r\n     \t};\r\n     \t\r\n\t};\r\n\r\n})();",";(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * System Channel Module\r\n\t */\r\n\tangular.module('d7-services.commons.baseResource', ['d7-services.commons.configurations'])\r\n\t\t   .factory('BaseResource', BaseResource);\r\n\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\tBaseResource.$inject = ['$http', '$q', 'DrupalApiConstant'];\r\n\t\r\n\t/**\r\n\t * The resource basic functions\r\n\t * \r\n\t**/\r\n\t/** @ngInject */\r\n\tfunction BaseResource($http, $q, DrupalApiConstant) {\r\n\t\t\r\n\t\tvar BaseResourceService = {\r\n\t\t\tprepareGetParams : prepareGetParams,\t\r\n\t\t\tpreparePostData: preparePostData,\r\n\t\t\t//base \r\n\t\t\trequest \t: request,\r\n\t\t\tretrieve \t: retrieve,\r\n\t\t\tcreate \t\t: create,\r\n\t\t\tupdate \t\t: update,\r\n\t\t\tdelete \t\t: _delete,\r\n\t\t\tindex \t\t: index\r\n\t\t};\r\n       \r\n        return BaseResourceService;\r\n\r\n        ////////////\r\n        \r\n        /**\r\n         * request\r\n         * \r\n         * generic function for drupals retrieve request\r\n         * \r\n         * @param {Object} data The requests data\r\n         * @param {Object} requestConfig The requests url\r\n         * @param {Function} pubError The requests error publish function\r\n         * @param {Function} pubSuccess The requests success publish function\r\n         * \r\n         * @return {Promise} Promise of the retrieve request\r\n         * \r\n         */\r\n        function request(requestConfig,  pubSuccess, pubError) {\r\n\r\n\t    \tvar errors = [];\t\t\r\n\t    \t\r\n\t    \tif(errors.length != 0) {\r\n\t    \t\tpubError(errors)\r\n\t    \t\treturn $q.reject(errors);\r\n\t    \t};\r\n\t\t\t\r\n    \t\treturn $http(requestConfig)\r\n\t\t    \t.success(function(responseData, status, headers, config){\r\n\t\t    \t\tif(typeof pubSuccess === 'function') {\r\n\t\t    \t\t\tpubSuccess(responseData);\r\n\t\t    \t\t}\r\n\t\t    \t\t\r\n\t\t    \t})\r\n\t\t    \t.error(function(responseError, status, headers, config){\r\n\t\t    \t\tif(typeof pubError === 'function') {\r\n\t\t    \t\t\tpubError(responseError);\r\n\t\t    \t\t}\r\n\t\t    \t});\r\n        \t\r\n        };\r\n        \r\n        /**\r\n         * retrieve\r\n         * \r\n         * generic function for drupals retrieve request\r\n         * \r\n         * @param {String} retrievePath The requests url\r\n         * @param {Function} pubError The requests error publish function\r\n         * @param {Function} pubSuccess The requests success publish function\r\n         * \r\n         * @return {Promise} Promise of the retrieve request\r\n         * \r\n         */\r\n        function retrieve(retrievePath,  pubSuccess, pubError) {\r\n        \t\r\n        \tvar requestConfig = {\r\n    \t\t\t\turl \t: retrievePath,\r\n\t    \t\t\tmethod \t:'GET'\r\n\t    \t};\r\n        \t\r\n        \treturn request(requestConfig,  pubSuccess, pubError);\r\n\r\n        };\r\n        \r\n        /**\r\n         * create\r\n         * \r\n         * generic function for drupals create request\r\n         * \r\n         * @param {Object} data The requests data\r\n         * @param {String} createPath The requests url\r\n         * @param {Function} pubError The requests error publish function\r\n         * @param {Function} pubSuccess The requests success publish function\r\n         * \r\n         * @return {Promise} Promise of the create request\r\n         * \r\n         */\r\n        function create( data, createPath,  pubSuccess, pubError) {\r\n        \t\r\n        \tvar requestConfig = {\r\n    \t\t\t\turl \t: createPath,\r\n\t    \t\t\tmethod \t: 'POST',\r\n\t    \t\t\tdata    : data\r\n\t    \t};\r\n   \r\n        \treturn request(requestConfig,  pubSuccess, pubError);\r\n        };\r\n        \r\n        /**\r\n         * update\r\n         * \r\n         * generic function for drupals update request\r\n         * \r\n         * @param {Object} data The requests data\r\n         * @param {String} updatePath The requests url\r\n         * @param {Function} pubError The requests error publish function\r\n         * @param {Function} pubSuccess The requests success publish function\r\n         * \r\n         * @return {Promise} Promise of the update request\r\n         * \r\n         */\r\n        function update( data, updatePath,  pubSuccess, pubError) {\r\n        \t\r\n        \tvar requestConfig = {\r\n    \t\t\t\turl \t: updatePath,\r\n    \t\t\t\tmethod \t: 'PUT',\r\n    \t\t\t\tdata \t: data,\r\n    \t\t};\r\n   \r\n        \treturn request(requestConfig,  pubSuccess, pubError);\r\n        };\r\n        \r\n        /**\r\n         * delete\r\n         * \r\n         * generic function for drupals delete request\r\n         * \r\n         * @param {String} deletePath The requests url\r\n         * @param {Function} pubError The requests error publish function\r\n         * @param {Function} pubSuccess The requests success publish function\r\n         * \r\n         * @return {Promise} Promise of the delete request\r\n         * \r\n         */\r\n        function _delete( deletePath,  pubSuccess, pubError) {\r\n        \t\r\n        \tvar requestConfig = {\r\n    \t\t\t\turl \t: deletePath,\r\n    \t\t\t\tmethod \t: 'DELETE'\r\n    \t\t};\r\n   \r\n        \treturn request(requestConfig,  pubSuccess, pubError);\r\n        };\r\n        \r\n        \r\n        /**\r\n         * index\r\n         * \r\n         * generic function for drupals delete request\r\n         * \r\n         * @param {String} deletePath The requests url\r\n         * @param {Function} pubError The requests error publish function\r\n         * @param {Function} pubSuccess The requests success publish function\r\n         * \r\n         * @return {Promise} Promise of the delete request\r\n         * \r\n         */\r\n        function index(data, indexPath,  pubSuccess, pubError) {\r\n        \t\r\n        \tvar options = {};\r\n        \t//prepare index options\r\n        \tif(data.page !== '') {options.page = data.page}\r\n        \tif(data.pagesize) {options.pagesize = data.pagesize}\r\n          \tif(Object.keys(data.parameters).length > 0 ) {options.parameters = data.parameters}\r\n        \tif(Object.keys(data.fields).length > 0 ) {options.fields = data.fields}\r\n        \t\r\n        \tif(options) {\r\n    \t\t\tindexPath += '?' + prepareIndexGetParams(options);\r\n    \t\t}\r\n\r\n        \tvar requestConfig = {\r\n    \t\t\t\turl \t: indexPath,\r\n    \t\t\t\tmethod \t:'GET'\r\n    \t\t};\r\n   \r\n        \treturn request(requestConfig,  pubSuccess, pubError);\r\n        };\r\n \r\n        /**\r\n         * prepareIndexGetParams\r\n         * \r\n         * @param {OBJECT} options The index options.\r\n         * \t\t  @key {Integer} page The pagenumber to start\r\n         * \t\t  @key {Integer} pagesize The number of entries per page\r\n         * \r\n        **/\r\n        function prepareIndexGetParams(options) {\r\n        \tvar type = '',\r\n    \t\t\tgetParamsString = '',\r\n    \t\t\tprepaeredParams = '';\r\n        \r\n        \tif(!options)  { return ''; }\r\n\r\n    \t\t//prepare and set optional params\r\n    \t\tangular.forEach(options, function(value , key) {\r\n    \t\t\tif(key === 'parameters') { type = 'array_key_value'; }\r\n    \t\t\telse if(key === 'fields') { type = 'array'; }\r\n    \t\t\t\r\n    \t\t\tprepaeredParams = prepareGetParams(value, key, type)\r\n    \t\t\r\n    \t\t\tgetParamsString += (getParamsString == '')?prepaeredParams:'&'+prepaeredParams;\r\n    \t\t\t\r\n    \t\t\tprepaeredParams = '';\r\n    \t        type = '';\r\n    \t    });\r\n    \t\t\r\n    \t\treturn getParamsString;\r\n        };\r\n        \r\n        /**\r\n         * \r\n         * preparePostData\r\n         * \r\n         * Formats the JSON depending on format param\r\n         * \r\n         * @param {Object} values The value to format\r\n         * @param {String} format The new format of the value param\r\n         * \r\n         * @return {Array} formated data\r\n         */\r\n         function preparePostData(values, format) {\r\n        \t var postData = undefined,\r\n\t            formats = { \r\n\t      \t\t\t 'array_of_keys' : true,\r\n\t      \t\t\t 'array_of_values' : true\r\n\t            };\r\n        \t \r\n        \t//validate format\r\n     \t\tif(!formats[format]) { return '';  }\r\n     \t\t\r\n     \t\t//array\r\n    \t\t//example: [\"3\", \"asfasf\"], \r\n    \t\tif(format === 'array_of_keys' && Object.keys(values).length > 0) {\r\n    \t\t\r\n    \t\t\tvar arrayValues = [];\r\n    \t\t\tangular.forEach(values, function(value, k) {\r\n    \t\t\t\tif(value !== false) { this.push(k); }\r\n    \t\t\t}, arrayValues);\t\r\n    \t\t\tif(arrayValues.length) { postData = arrayValues; }\r\n    \t\t\treturn postData;\r\n    \t\t}\r\n    \t\t\r\n    \t\tif(format === 'array_of_values' && Object.keys(values).length > 0) {\r\n        \t\t\r\n    \t\t\tvar arrayValues = [];\r\n    \t\t\tangular.forEach(values, function(value, k) {\r\n    \t\t\t\tif(value !== false) { this.push(value); }\r\n    \t\t\t}, arrayValues);\t\r\n    \t\t\tif(arrayValues.length) { postData = arrayValues; }\r\n    \t\t\treturn postData;\r\n    \t\t}\r\n \r\n         }\r\n        \r\n        /**\r\n         * \r\n         * prepareGetParam\r\n         * \r\n         * Formats the JSON depending on formata and key param\r\n         * \r\n         * @param {Object} values The value to format\r\n         * @param {String} key The name of key to use in formated output\r\n         * @param {String} format The new format of the value param\r\n         * \r\n         * @return {String} formated data\r\n         */\r\n         function prepareGetParams(values, key, format) {\r\n        \t \r\n            var getParams = [],\r\n\t            formats = { \r\n\t      \t\t\t  'array' : true,\r\n\t      \t\t\t  'array_keys' : true,\r\n\t      \t\t\t  'array_key_value' : true,\r\n\t      \t\t\t  'json' : true,\r\n\t            };\r\n        \t\r\n    \t\t//validate key\r\n    \t\tif(key) { \r\n    \t\t\tkey = (key)?key:false;\r\n    \t\t\tif(key === false) {return;}\r\n    \t\t} else { return; }\r\n    \t\t\r\n    \t\t//validate values\r\n    \t\tvalues = (values || values === 0)?values:undefined;\r\n    \t\t\r\n    \t\t//validate values\r\n    \t\tif(values === undefined) {return;}\r\n    \t\t//if no json or length 0 and no int\r\n    \t\telse if (parseInt(values) === NaN) { \r\n    \t\t\tif(Object.keys(values).length <= 0) {\r\n    \t\t\t\treturn ; \r\n    \t\t\t}\r\n    \t\t}\r\n    \t\t\r\n    \t\t//normal param\r\n    \t\tif(!format) {\r\n    \t\t\tif(values || values === 0) { getParams = key + '=' + values; }\r\n    \t\t\treturn getParams;\r\n    \t\t}\r\n    \t\t\r\n    \t\t//validate format\r\n    \t\tif(!formats[format]) { return;  }\r\n    \t\t\r\n    \t\t//json\r\n    \t\t//example: exposed_filter=value\r\n    \t\tif(format === 'json') {\r\n    \t\t\tangular.forEach(values, function(value, k) {\r\n    \t\t\t\tif(value) { getParams.push(k + '=' + value) }\r\n    \t\t\t});\r\n    \t\t\treturn getParams.join('&');\r\n    \t\t}\r\n    \t\t//array\r\n    \t\t//example: fields=value1, vaule2, value3, \r\n    \t\tif(format === 'array' && Object.keys(values).length > 0) {\r\n    \t\t\r\n    \t\t\tvar arrayValues = [];\r\n    \t\t\tangular.forEach(values, function(value, k) {\r\n    \t\t\t\tif(value !== false) { this.push(k); }\r\n    \t\t\t}, arrayValues);\t\r\n    \t\t\tif(arrayValues.length) { getParams.push(key + '=' + arrayValues.join(',')); }\r\n    \t\t\treturn getParams.join('&');\r\n    \t\t}\r\n    \t\t//array_keys\r\n    \t\t//example: exposed_filter1=key1\r\n    \t\tif(format === 'array_keys') {\r\n    \t\t\tangular.forEach(values, function(value, k) {\r\n    \t\t\t\tif(value) { getParams.push(key + '=' + k) }\r\n    \t\t\t});\r\n    \t\t\treturn getParams.join('&');\r\n    \t\t}\r\n\r\n    \t\t//array_key_value\r\n    \t\t//example: parameters[key1]=value1\r\n    \t\tif(format === 'array_key_value') {\r\n    \t\t\t\r\n    \t\t\tangular.forEach(values, function(value, k) {\r\n    \t\t\t\tif(value) { getParams.push(key+\"[\"+k+\"]=\"+ value); }\r\n    \t\t\t});\r\n    \t\t\treturn getParams.join('&');\r\n    \t\t}\r\n    \t\t\r\n    \t};\r\n\r\n        \r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n\r\n    angular.module('d7-services.commons', \r\n    \t\t['d7-services.commons.authentication', \r\n    \t\t 'd7-services.commons.http', \r\n    \t\t 'd7-services.commons.directives',\r\n             \r\n    \t\t 'd7-services.commons.baseChannel', \r\n    \t\t 'd7-services.commons.baseResource', \r\n    \t\t 'd7-services.commons.configurations', \r\n    \t\t 'd7-services.commons.helperService', \r\n    \t\t 'd7-services.commons.validationConstant']);\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n\r\n    /**\r\n\t *  Constants for Drupal Services 3.x API\r\n\t */\r\n\tvar DrupalApiConstant =  {\r\n\t\t      //\t\t\t\t\t   \r\n\t\t      // Drupal depending settings\r\n\t\t      //\r\n\t\t\t\r\n\t\t\t  // Sites domain\r\n\t\t\t  drupal_instance\t: 'http://your.site.name/',\r\n\t\t\t \r\n\t\t\t  // Service endpoint \r\n\t\t\t  api_endpoint : 'api/',\r\n\t\t\t  \r\n\t\t\t  //response format of a request. possible values are\r\n\t\t\t  //look at https://www.drupal.org/node/1699450\r\n\t\t\t  responseFormat : \"application/json\",\r\n\t\t\t  //- bencode: The encoding used by the BitTorrent file sharing system.\r\n\t\t\t  //- json => JavaScript Object Notation\r\n\t\t\t  //- jsonp: JSON with padding\r\n\t\t\t  //- php: Responses are encoded using the data format emitted by PHPs \"serialize()\" function\r\n\t\t\t  //- rss\r\n\t\t\t  //- xml\r\n\t\t\t  //- yaml\r\n\t\t\t  \r\n\r\n\t\t\t  // By default, Drupal is configured with a session expiration time of 2000000 seconds which is 23 day 3 hr. 33 min. 20 sec\r\n\t\t\t  // To customize this install the session expire module => https://www.drupal.org/project/session_expire\r\n\t\t\t  // and also set same value here\r\n\t\t  \t  session_expiration_time : 2000000,\r\n\t\t  \t  \r\n\t\t\t  // Session Expriation untis (seconds because Drupals default time is in seconds)\r\n\t\t\t  session_expiration_unite : 'seconds',\r\n\t\t\t  \r\n\t\t\t  //path to public folder\r\n\t\t\t  publicFilePath \t: \"public/\",\r\n\t\t\t  \r\n\t\t\t  //path to public folder\r\n\t\t\t  privateFilePath \t: \"private/\",\r\n\t\t\t  \r\n\t\t\t  //default image styles\r\n\t\t\t  imageStyles\t\t: {\r\n\t\t\t\t  large \t: 'large',\r\n\t\t\t\t  medium \t: 'medium',\r\n\t\t\t\t  thumbnail : 'thumbnail'\r\n\t\t\t  },\r\n\t\t\t  \r\n\t\t\t  //language\r\n\t\t\t  LANGUAGE_NONE : 'und'\r\n\t\t\t\r\n\t};\r\n    \r\n\t/**\r\n\t *  DrupalApiConstant Module\r\n\t */\r\n\tangular\r\n\t    .module('d7-services.commons.configurations', [])\r\n\t    .constant(\"DrupalApiConstant\", DrupalApiConstant);\r\n\t\r\n\r\n})();\r\n",";(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * helper Module\r\n\t */\r\n\tangular.module('d7-services.commons.helperService', ['d7-services.commons.configurations'])\r\n\t\t   .factory('DrupalHelperService', DrupalHelperService);\r\n\r\n\t\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\tDrupalHelperService.$inject = ['DrupalApiConstant'];\r\n\t\r\n\t/**\r\n\t * Notification channel for user resource \r\n\t**/\r\n\t\r\n\t/** @ngInject */\r\n\tfunction DrupalHelperService(DrupalApiConstant) {\r\n\t\r\n\t\t//setup and return service            \t\r\n        var drupalHelperService = {\r\n        \t\tgetApiPath\t\t: getApiPath,\r\n        \t\tgetDrupalPath\t: getDrupalPath,\r\n        \t\tgetPathToImgByStyle : getPathToImgByStyle,\r\n        \t\tsprintf \t\t: sprintf,\r\n        \t\tmergeItems \t\t: mergeItems,\r\n        \t\tstructureField \t: structureField\r\n        };\r\n        \r\n        return drupalHelperService;\r\n\r\n        ////////////\r\n        \r\n        //\r\n        \r\n        function getApiPath() {\r\n        \treturn DrupalApiConstant.drupal_instance +  DrupalApiConstant.api_endpoint;\r\n        }\r\n        \r\n        function getDrupalPath() {\r\n        \treturn DrupalApiConstant.drupal_instance;\r\n        }\r\n        \r\n        function getPathToImgByStyle(style, isPrivate) {\r\n        \treturn  getDrupalPath() + 'sites/default/files/styles/'+style+'/'+ ( (isPrivate)?DrupalApiConstant.privateFilePath:DrupalApiConstant.publicFilePath );\r\n            \r\n        }\r\n        \r\n        \r\n       \r\n        /**\r\n    \t * https://github.com/jbeuckm/drupal-client/blob/master/lib/field.js\r\n    \t * Create the basic field structure for uploading a field.\r\n    \t * \r\n    \t * Example input output \r\n    \t * \r\n    \t * String:\r\n    \t * IN:\r\n    \t * OUT: \r\n    \t * \r\n    \t * Object:\r\n    \t * IN: \t{ value : 'foobar foo', summary : 'foobar' } \r\n    \t * OUT: \t{ und : [{ value : 'foobar foo', summary : 'foobar' }]} \r\n    \t * \r\n    \t */\r\n        //@TODO add language support\r\n        function structureField(value, label, language) {\r\n    \t  // record optional label string\r\n          // default is \"value\"\r\n    \t  var\tprepatedData = undefined,\r\n    \t  \t\tlabel = label || \"value\",\r\n    \t  \t\tlanguage = (language !== undefined)?language:DrupalApiConstant.LANGUAGE_NONE;    \t  \r\n\r\n    \t  if (angular.isObject(value)) {\r\n    \t\t  prepatedData =  {};\r\n    \t\t  prepatedData[language] = [value];\r\n    \t  }\r\n    \t  \r\n    \t  return prepatedData;\r\n\r\n    \t  if (value instanceof Date) {\r\n\r\n    \t    var prepatedData = {\r\n    \t      value: {\r\n    \t        date: (value.getMonth()+1)+'/'+value.getDate()+'/'+value.getFullYear()+' - '+value.getHours()+':'+value.getMinutes()+':'+value.getSeconds()\r\n    \t      }\r\n    \t    };\r\n\r\n    \t    return {\r\n    \t    \tund: [\r\n    \t    \t   prepatedData\r\n    \t      ]\r\n    \t    };\r\n    \t    \r\n    \t  } \r\n    \t  \r\n    \t  ////\r\n    \t  \r\n    \t  \r\n    \t// record optional label string or default to \"value\"\r\n    \t  var label = label || \"value\";\r\n    \t  var language_key = (language)? function() {return language}:function() {return baseResourceConfig.LANGUAGE_NONE};\r\n\r\n    \t  if (angular.isArray(value)) {\r\n\r\n    \t    var field_array = [];\r\n    \t    for (var i= 0, l=value.length; i<l; i++) {\r\n    \t      var item = {};\r\n    \t      item[label] = value[i];\r\n\r\n    \t      field_array.push(item);\r\n    \t    }\r\n    \t    return {\r\n    \t      und: field_array\r\n    \t    };\r\n    \t  }\r\n    \t  \r\n    \t  if (angular.isObject(value)) {\r\n\r\n      \t    var field_array = [];\r\n      \t    for (var i= 0, l=value.length; i<l; i++) {\r\n      \t      var item = {};\r\n      \t      item[label] = value[i];\r\n\r\n      \t      field_array.push(item);\r\n      \t    }\r\n      \t    return {\r\n      \t      und: field_array\r\n      \t    };\r\n      \t  }\r\n    \t  \r\n    \t  \r\n    \t  if (value instanceof Date) {\r\n\r\n    \t    var obj = {\r\n    \t      value: {\r\n    \t        date: (value.getMonth()+1)+'/'+value.getDate()+'/'+value.getFullYear()+' - '+value.getHours()+':'+value.getMinutes()+':'+value.getSeconds()\r\n    \t      }\r\n    \t    };\r\n\r\n    \t    return {\r\n    \t    \tund: [\r\n    \t        obj\r\n    \t      ]\r\n    \t    };\r\n    \t  }\r\n\r\n    \t  // field value given with label(s) already built\r\n    \t  if (typeof value == \"object\") {\r\n    \t    return {\r\n    \t    \tund: [\r\n    \t        value\r\n    \t      ]\r\n    \t    }\r\n    \t  }\r\n    \t  \r\n    \t  \r\n        }\r\n        //\r\n        \r\n      \t\r\n    \tfunction mergeItems(newItems, currentItems , type, callback) {\r\n    \t\r\n    \t\tcallback = (typeof(callback) === \"function\")?callback:function(obj) {return obj;};\r\n    \t\t\r\n    \t\tif(!type) {\r\n    \t\t\tvar uniqueNodes = [];\r\n    \t\t\tvar isUnique;\r\n     \t\t\tangular.forEach(newItems, function(newItems) {\r\n     \t\t\t\tisUnique = true;\r\n     \t\t\t\tangular.forEach(currentItems, function(currentItem, key) {\r\n     \t\t\t\t\tif(newItems.nid == currentItem.nid) { isUnique = false; }\r\n     \t\t\t\t}, isUnique);\r\n     \t\t\t\t \r\n     \t\t\t\tif(isUnique) {\r\n     \t\t\t\t\t\tuniqueNodes.push(callback(newItems));\r\n     \t\t\t\t}\t\r\n     \t\t\t}, uniqueNodes);\r\n     \t\t\t\r\n     \t\t\tcurrentItems =  uniqueNodes.concat(currentItems);\r\n     \t\t\t\r\n     \t\t\treturn currentItems;\r\n    \t\t} \r\n    \t\telse {\r\n    \t\t\tangular.forEach(newItems, function(newItem) {\r\n    \t\t\t\t//@TODO add this to if => || currentItems[newItem[type]].updated > newItem.updated\r\n    \t\t\t\tif(!currentItems[newItem[type]] ) {\r\n    \t\t\t\t\t\tcurrentItems[parseInt(newItem[type])] = callback(newItem);\r\n    \t\t\t\t}\r\n    \t\t\t\t\r\n    \t\t\t});\r\n    \t\t\treturn currentItems;\r\n    \t\t}\r\n    \t};\r\n        \r\n        // copied from http://phpjs.org/\r\n        function sprintf() {\r\n        \t  //  discuss at: http://phpjs.org/functions/sprintf/\r\n        \t  // original by: Ash Searle (http://hexmen.com/blog/)\r\n        \t  // improved by: Michael White (http://getsprink.com)\r\n        \t  // improved by: Jack\r\n        \t  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\r\n        \t  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\r\n        \t  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\r\n        \t  // improved by: Dj\r\n        \t  // improved by: Allidylls\r\n        \t  //    input by: Paulo Freitas\r\n        \t  //    input by: Brett Zamir (http://brett-zamir.me)\r\n        \t  //   example 1: sprintf(\"%01.2f\", 123.1);\r\n        \t  //   returns 1: 123.10\r\n        \t  //   example 2: sprintf(\"[%10s]\", 'monkey');\r\n        \t  //   returns 2: '[    monkey]'\r\n        \t  //   example 3: sprintf(\"[%'#10s]\", 'monkey');\r\n        \t  //   returns 3: '[####monkey]'\r\n        \t  //   example 4: sprintf(\"%d\", 123456789012345);\r\n        \t  //   returns 4: '123456789012345'\r\n        \t  //   example 5: sprintf('%-03s', 'E');\r\n        \t  //   returns 5: 'E00'\r\n\r\n        \t  var regex = /%%|%(\\d+\\$)?([\\-+\\'#0 ]*)(\\*\\d+\\$|\\*|\\d+)?(?:\\.(\\*\\d+\\$|\\*|\\d+))?([scboxXuideEfFgG])/g;\r\n        \t  var a = arguments;\r\n        \t  var i = 0;\r\n        \t  var format = a[i++];\r\n\r\n        \t  // pad()\r\n        \t  var pad = function(str, len, chr, leftJustify) {\r\n        \t    if (!chr) {\r\n        \t      chr = ' ';\r\n        \t    }\r\n        \t    var padding = (str.length >= len) ? '' : new Array(1 + len - str.length >>> 0)\r\n        \t      .join(chr);\r\n        \t    return leftJustify ? str + padding : padding + str;\r\n        \t  };\r\n\r\n        \t  // justify()\r\n        \t  var justify = function(value, prefix, leftJustify, minWidth, zeroPad, customPadChar) {\r\n        \t    var diff = minWidth - value.length;\r\n        \t    if (diff > 0) {\r\n        \t      if (leftJustify || !zeroPad) {\r\n        \t        value = pad(value, minWidth, customPadChar, leftJustify);\r\n        \t      } else {\r\n        \t        value = value.slice(0, prefix.length) + pad('', diff, '0', true) + value.slice(prefix.length);\r\n        \t      }\r\n        \t    }\r\n        \t    return value;\r\n        \t  };\r\n\r\n        \t  // formatBaseX()\r\n        \t  var formatBaseX = function(value, base, prefix, leftJustify, minWidth, precision, zeroPad) {\r\n        \t    // Note: casts negative numbers to positive ones\r\n        \t    var number = value >>> 0;\r\n        \t    prefix = (prefix && number && {\r\n        \t      '2'  : '0b',\r\n        \t      '8'  : '0',\r\n        \t      '16' : '0x'\r\n        \t    }[base]) || '';\r\n        \t    value = prefix + pad(number.toString(base), precision || 0, '0', false);\r\n        \t    return justify(value, prefix, leftJustify, minWidth, zeroPad);\r\n        \t  };\r\n\r\n        \t  // formatString()\r\n        \t  var formatString = function(value, leftJustify, minWidth, precision, zeroPad, customPadChar) {\r\n        \t    if (precision !== null && precision !== undefined) {\r\n        \t      value = value.slice(0, precision);\r\n        \t    }\r\n        \t    return justify(value, '', leftJustify, minWidth, zeroPad, customPadChar);\r\n        \t  };\r\n\r\n        \t  // doFormat()\r\n        \t  var doFormat = function(substring, valueIndex, flags, minWidth, precision, type) {\r\n        \t    var number, prefix, method, textTransform, value;\r\n\r\n        \t    if (substring === '%%') {\r\n        \t      return '%';\r\n        \t    }\r\n\r\n        \t    // parse flags\r\n        \t    var leftJustify = false;\r\n        \t    var positivePrefix = '';\r\n        \t    var zeroPad = false;\r\n        \t    var prefixBaseX = false;\r\n        \t    var customPadChar = ' ';\r\n        \t    var flagsl = flags.length;\r\n        \t    var j;\r\n        \t    for (j = 0; flags && j < flagsl; j++) {\r\n        \t      switch (flags.charAt(j)) {\r\n        \t      case ' ':\r\n        \t        positivePrefix = ' ';\r\n        \t        break;\r\n        \t      case '+':\r\n        \t        positivePrefix = '+';\r\n        \t        break;\r\n        \t      case '-':\r\n        \t        leftJustify = true;\r\n        \t        break;\r\n        \t      case \"'\":\r\n        \t        customPadChar = flags.charAt(j + 1);\r\n        \t        break;\r\n        \t      case '0':\r\n        \t        zeroPad = true;\r\n        \t        customPadChar = '0';\r\n        \t        break;\r\n        \t      case '#':\r\n        \t        prefixBaseX = true;\r\n        \t        break;\r\n        \t      }\r\n        \t    }\r\n\r\n        \t    // parameters may be null, undefined, empty-string or real valued\r\n        \t    // we want to ignore null, undefined and empty-string values\r\n        \t    if (!minWidth) {\r\n        \t      minWidth = 0;\r\n        \t    } else if (minWidth === '*') {\r\n        \t      minWidth = +a[i++];\r\n        \t    } else if (minWidth.charAt(0) === '*') {\r\n        \t      minWidth = +a[minWidth.slice(1, -1)];\r\n        \t    } else {\r\n        \t      minWidth = +minWidth;\r\n        \t    }\r\n\r\n        \t    // Note: undocumented perl feature:\r\n        \t    if (minWidth < 0) {\r\n        \t      minWidth = -minWidth;\r\n        \t      leftJustify = true;\r\n        \t    }\r\n\r\n        \t    if (!isFinite(minWidth)) {\r\n        \t      throw new Error('sprintf: (minimum-)width must be finite');\r\n        \t    }\r\n\r\n        \t    if (!precision) {\r\n        \t      precision = 'fFeE'.indexOf(type) > -1 ? 6 : (type === 'd') ? 0 : undefined;\r\n        \t    } else if (precision === '*') {\r\n        \t      precision = +a[i++];\r\n        \t    } else if (precision.charAt(0) === '*') {\r\n        \t      precision = +a[precision.slice(1, -1)];\r\n        \t    } else {\r\n        \t      precision = +precision;\r\n        \t    }\r\n\r\n        \t    // grab value using valueIndex if required?\r\n        \t    value = valueIndex ? a[valueIndex.slice(0, -1)] : a[i++];\r\n\r\n        \t    switch (type) {\r\n        \t    case 's':\r\n        \t      return formatString(String(value), leftJustify, minWidth, precision, zeroPad, customPadChar);\r\n        \t    case 'c':\r\n        \t      return formatString(String.fromCharCode(+value), leftJustify, minWidth, precision, zeroPad);\r\n        \t    case 'b':\r\n        \t      return formatBaseX(value, 2, prefixBaseX, leftJustify, minWidth, precision, zeroPad);\r\n        \t    case 'o':\r\n        \t      return formatBaseX(value, 8, prefixBaseX, leftJustify, minWidth, precision, zeroPad);\r\n        \t    case 'x':\r\n        \t      return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad);\r\n        \t    case 'X':\r\n        \t      return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad)\r\n        \t        .toUpperCase();\r\n        \t    case 'u':\r\n        \t      return formatBaseX(value, 10, prefixBaseX, leftJustify, minWidth, precision, zeroPad);\r\n        \t    case 'i':\r\n        \t    case 'd':\r\n        \t      number = +value || 0;\r\n        \t      // Plain Math.round doesn't just truncate\r\n        \t      number = Math.round(number - number % 1);\r\n        \t      prefix = number < 0 ? '-' : positivePrefix;\r\n        \t      value = prefix + pad(String(Math.abs(number)), precision, '0', false);\r\n        \t      return justify(value, prefix, leftJustify, minWidth, zeroPad);\r\n        \t    case 'e':\r\n        \t    case 'E':\r\n        \t    case 'f': // Should handle locales (as per setlocale)\r\n        \t    case 'F':\r\n        \t    case 'g':\r\n        \t    case 'G':\r\n        \t      number = +value;\r\n        \t      prefix = number < 0 ? '-' : positivePrefix;\r\n        \t      method = ['toExponential', 'toFixed', 'toPrecision']['efg'.indexOf(type.toLowerCase())];\r\n        \t      textTransform = ['toString', 'toUpperCase']['eEfFgG'.indexOf(type) % 2];\r\n        \t      value = prefix + Math.abs(number)[method](precision);\r\n        \t      return justify(value, prefix, leftJustify, minWidth, zeroPad)[textTransform]();\r\n        \t    default:\r\n        \t      return substring;\r\n        \t    }\r\n        \t  };\r\n\r\n        \t  return format.replace(regex, doFormat);\r\n        \t};\r\n\r\n    \t\r\n    \t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n\r\n    /**\r\n\t *  Constants for Drupal Services 3.x API\r\n\t */\r\n\tvar ValidationConstant =  {\r\n\t\t    //validation errors\r\n\t\t\t//if data not given\r\n\t    \tisRequired : 'Param %s is required.',\r\n\t    \tisInteger : 'Param %s has to be an integer.'\t\r\n\t};\r\n    \r\n\t/**\r\n\t *  ValidationConstant Module\r\n\t */\r\n\tangular\r\n\t    .module('d7-services.commons.validationConstant', [])\r\n\t    .constant(\"ValidationConstant\", ValidationConstant);\r\n\t\r\n\r\n})();\r\n",";(function() {\r\n    'use strict';\r\n    \r\n\t/**\r\n\t * User modules bundle\r\n\t**/\r\n\tangular\r\n\t    .module('d7-services.resources', \r\n\t    \t\t['d7-services.resources.comment', \r\n\t    \t\t 'd7-services.resources.file', \r\n\t    \t\t 'd7-services.resources.node', \r\n\t    \t\t 'd7-services.resources.system', \r\n\t    \t\t 'd7-services.resources.taxonomy_term', \r\n\t    \t\t 'd7-services.resources.taxonomy_vocabulary', \r\n\t    \t\t 'd7-services.resources.user', \r\n\t    \t\t 'd7-services.resources.views' \r\n\t    \t\t ]);\r\n})();","(function() {\r\n    'use strict';\r\n    \r\n\t/**\r\n\t * Authentication modules bundle\r\n\t**/\r\n\tangular\r\n\t    .module('d7-services.commons.authentication', \r\n\t    \t\t['d7-services.commons.authentication.serviceConstant', \r\n\t    \t\t 'd7-services.commons.authentication.channel', \r\n\t    \t\t 'd7-services.commons.authentication.channelConstant', \r\n\t    \t\t 'd7-services.commons.authentication.httpIntercepter', \r\n\t    \t\t 'd7-services.commons.authentication.service']);\r\n\r\n})();","(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * Authentication Channel Module\r\n\t */\r\n\tangular.module('d7-services.commons.authentication.channel', ['d7-services.commons.baseChannel', 'd7-services.commons.authentication.channelConstant'])\r\n\t\t   .factory('AuthenticationChannel', AuthenticationChannel);\r\n\r\n\t\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\tAuthenticationChannel.$inject = [ 'BaseChannel', 'AuthenticationChannelConstant' ];\r\n\t\r\n\t/**\r\n\t * Notification channel for authentication service \r\n\t **/\r\n\t/** @ngInject */\r\n\tfunction AuthenticationChannel(BaseChannel, AuthenticationChannelConstant) {\r\n\t\r\n\t\t//setup and return service            \t\r\n        var authenticationChannelService = {\r\n        \t\t\r\n    \t\t// login request\r\n    \t\tpubLoginConfirmed \t: pubLoginConfirmed,\r\n    \t\tsubLoginConfirmed\t\t: subLoginConfirmed,\r\n    \t\tpubLoginFailed \t\t: pubLoginFailed,\r\n    \t\tsubLoginFailed\t\t: subLoginFailed,\t\r\n        \t\r\n    \t\t// logout request\r\n    \t\tpubLogoutConfirmed \t: pubLogoutConfirmed,\r\n        \tsubLogoutConfirmed\t: subLogoutConfirmed,\r\n        \tpubLogoutFailed \t\t: pubLogoutFailed,\r\n        \tsubLogoutFailed\t\t: subLogoutFailed,\r\n        \t\r\n        \t// refreshConnection request\r\n    \t\tpubRefreshConnectionConfirmed \t: pubRefreshConnectionConfirmed,\r\n        \tsubRefreshConnectionConfirmed\t\t: subRefreshConnectionConfirmed,\r\n        \tpubRefreshConnectionFailed \t\t: pubRefreshConnectionFailed,\r\n        \tsubRefreshConnectionFailed\t\t: subRefreshConnectionFailed,\r\n        \t\r\n        \t// try connect to Drupal\r\n        \tpubTryConnectConfirmed\t: pubTryConnectConfirmed,\r\n        \tsubTryConnectConfirmed \t: subTryConnectConfirmed,\r\n        \tpubTryConnectFailed\t\t: pubTryConnectFailed,\r\n        \tsubTryConnectFailed \t\t: subTryConnectFailed,\r\n    \t\t\r\n        \t// Connection state updated\r\n    \t\tpubConnectionStateUpdated \t: pubConnectionStateUpdated,\r\n    \t\tsubConnectionStateUpdated\t\t: subConnectionStateUpdated,\r\n    \t\t\r\n    \t\t// Current user updated\r\n    \t\tpubCurrentUserUpdated\t\t: pubCurrentUserUpdated,\r\n    \t\tsubCurrentUserUpdated\t\t: subCurrentUserUpdated,\r\n        };\r\n        \r\n        return authenticationChannelService;\r\n\r\n        ////////////\r\n        \r\n        //Authentication login request functions\r\n        \r\n        /**\r\n\t\t * pubLoginConfirmed\r\n\t\t * \r\n\t\t * Publish the AuthenticationLoginConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubLoginConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\t \r\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.loginConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t /**\r\n\t\t * subLoginConfirmed\r\n\t\t * \r\n\t\t * subscribe for the AuthenticationLoginConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subLoginConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationLoginConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subLoginConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.loginConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubLoginFailed\r\n\t\t * \r\n\t\t * Publish the AuthenticationLoginConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubLoginFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\t\r\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.loginFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subLoginFailed\r\n\t\t * \r\n\t\t * subscribe for the AuthenticationLoginFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subLoginFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationLoginFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subLoginFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.loginFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//Authentication logout request functions\r\n\r\n    \t/**\r\n    \t * pubLogoutConfirmed\r\n    \t * \r\n    \t * Publish the AuthenticationLogoutConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubLogoutConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.logoutConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subLogoutConfirmed\r\n    \t * \r\n    \t * subscribe for the AuthenticationLogoutConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subLogoutConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for AuthenticationLogoutConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subLogoutConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.logoutConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubLogoutFailed\r\n    \t * \r\n    \t * Publish the AuthenticationLogoutConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubLogoutFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.logoutFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subLogoutFailed\r\n    \t * \r\n    \t * subscribe for the AuthenticationLogoutFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subLogoutFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for AuthenticationLogoutFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subLogoutFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.logoutFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//__________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t\r\n    \t//Authentication refresh connection request functions\r\n        \r\n        /**\r\n\t\t * pubRefreshConnectionConfirmed\r\n\t\t * \r\n\t\t * Publish the AuthenticationRefreshConnectionConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubRefreshConnectionConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\t \r\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.refreshConnectionConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t /**\r\n\t\t * subRefreshConnectionConfirmed\r\n\t\t * \r\n\t\t * subscribe for the AuthenticationRefreshConnectionConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRefreshConnectionConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationRefreshConnectionConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subRefreshConnectionConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.refreshConnectionConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubRefreshConnectionFailed\r\n\t\t * \r\n\t\t * Publish the AuthenticationRefreshConnectionConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubRefreshConnectionFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\t\r\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.refreshConnectionFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subRefreshConnectionFailed\r\n\t\t * \r\n\t\t * subscribe for the AuthenticationRefreshConnectionFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRefreshConnectionFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationRefreshConnectionFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subRefreshConnectionFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.refreshConnectionFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t\r\n    \t//try connect request functions\r\n        \r\n        /**\r\n\t\t * pubTryConnectConfirmed\r\n\t\t * \r\n\t\t * Publish the AuthenticationTryConnectConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubTryConnectConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\t \r\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.tryConnectConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t /**\r\n\t\t * subTryConnectConfirmed\r\n\t\t * \r\n\t\t * subscribe for the AuthenticationTryConnectConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subTryConnectConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationTryConnectConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subTryConnectConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.tryConnectConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubTryConnectFailed\r\n\t\t * \r\n\t\t * Publish the AuthenticationTryConnectConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubTryConnectFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\t\r\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.tryConnectFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subTryConnectFailed\r\n\t\t * \r\n\t\t * subscribe for the AuthenticationTryConnectFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subTryConnectFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationTryConnectFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subTryConnectFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.tryConnectFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubConnectionStateUpdated\r\n\t\t * \r\n\t\t * Publish the ConnectionStateUpdated updated event with given args\r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubConnectionStateUpdated(args) {\r\n    \t\tvar args = args;\r\n    \t\t\r\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.connectionStateUpdated, args);\r\n    \t};\r\n    \t\r\n    \t /**\r\n\t\t * subConnectionStateUpdated\r\n\t\t * \r\n\t\t * subscribe for the ConnectionStateUpdated event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subConnectConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationConnectConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subConnectionStateUpdated(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.connectionStateUpdated, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubCurrentUserUpdated\r\n\t\t * \r\n\t\t * Publish the CurrentUserUpdated event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubCurrentUserUpdated(args) {\r\n    \t\tvar args = args;\r\n\r\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.currentUserUpdated, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subCurrentUserUpdated\r\n\t\t * \r\n\t\t * subscribe for the CurrentUserUpdated event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subConnectFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationConnectFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subCurrentUserUpdated(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.currentUserUpdated, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n\t};\r\n\r\n})();","(function() {\r\n    'use strict';\r\n\r\n    /**\r\n\t *  Constants for AuthenticationChannel \r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in your app.js config section\r\n\t**/\r\n\tvar AuthenticationChannelConstant =  {\r\n\t\t\r\n\t\tloginConfirmed  : 'event:drupal-authService-loginConfirmed',\r\n\t\tloginFailed  \t: 'event:drupal-authService-loginFailed',\r\n\t\t\r\n\t\tlogoutConfirmed  \t: 'event:drupal-authService-logoutConfirmed',\r\n\t\tlogoutFailed  \t\t: 'event:drupal-authService-logoutFailed',\r\n\t\t\r\n\t\trefreshConnectionConfirmed  \t: 'event:drupal-authService-refreshConnectionConfirmed',\r\n\t\trefreshConnectionFailed  \t\t: 'event:drupal-authService-refreshConnectionFailed',\r\n\t\t\r\n\t\ttryConnectConfirmed \t: 'event:drupal-authService-tryConnectConfirmed',\r\n\t\ttryConnectFailed \t\t: 'event:drupal-authService-tryConnectFailed',\r\n\t\t\r\n\t\tconnectionStateUpdated  \t: 'event:drupal-authService-connectionStateUpdated',\r\n\t\t\r\n\t\tcurrentUserUpdated\t\t\t: 'event:drupal-authService-currentUserUpdated'\r\n\t\t\t\r\n\t};\r\n    \r\n\t/**\r\n\t * API authentication channel constant\r\n\t */\r\n\tangular\r\n\t.module('d7-services.commons.authentication.channelConstant', [])\r\n\t    .constant(\"AuthenticationChannelConstant\", AuthenticationChannelConstant);\r\n\r\n})();","(function() {\r\n\t'use strict';\r\n\r\n\t\r\n\t/**\r\n\t * Drupal request intercepter Module for the requests Accept attribute\r\n\t */\r\n\tangular.module('d7-services.commons.authentication.httpIntercepter', ['d7-services.commons.authentication.service'])\r\n\t\t   .factory('AuthenticationHttpInterceptor', AuthenticationHttpInterceptor);\r\n\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\tAuthenticationHttpInterceptor.$inject = [ '$injector'];\r\n\t\r\n\t/**\r\n\t * HTTP Intercepter for Accept attribute of HTTP-Requests\r\n\t **/\r\n\t/** @ngInject */\r\n\tfunction AuthenticationHttpInterceptor($injector) {\r\n\t\t\r\n\t\t//setup and return service            \t\r\n        var intercepter = {\r\n        \trequest \t: doRequestCongiguration,\r\n        };\r\n        \r\n        return intercepter;\r\n\r\n        ////////////\r\n        \r\n        //request function\r\n        \r\n        /**\r\n\t\t * request\r\n\t\t * \r\n\t\t * Intercepts a request and sets the Accept attribute \r\n\t     *\r\n\t\t * @param \t{Object} config The requests config object \r\n\t\t * \r\n\t\t * @return  {Object} The edited config object\r\n\t\t * \r\n\t\t**/\r\n        function doRequestCongiguration (config) {\r\n\t        var tokenHeaders = null;\r\n \r\n\t        // Need to manually retrieve dependencies with $injector.invoke\r\n\t        // because Authentication depends on $http, which doesn't exist during the\r\n\t        // configuration phase (when we are setting up interceptors).\r\n\t        // Using $injector.invoke ensures that we are provided with the\r\n\t        // dependencies after they have been created.\r\n\t        $injector.invoke(['AuthenticationService', function (AuthenticationService) {\r\n\t            tokenHeaders = AuthenticationService.getAuthenticationHeaders();\r\n\t            \r\n\t        }]);\r\n\r\n\t        //add headers___________________________________________________________________\r\n\t        \r\n\t        //add Authorisation and X-CSRF-TOKEN if given\r\n\t        if (tokenHeaders) {\r\n\t            angular.extend(config.headers, tokenHeaders);\r\n\t        }\r\n\t        \r\n\t        //add flags_____________________________________________________________________\r\n\t        \r\n\t        //add withCredentials to every request\r\n\t        //needed because we send cookies in our request headers\r\n\t        config.withCredentials = true;\r\n\r\n\t        return config;\r\n        };\r\n    \t\r\n\t};\r\n\r\n})();","(function() {\r\n    'use strict';\r\n\r\n    /**\r\n     * Drupal API authentication service\r\n    **/\r\n    angular.module('d7-services.commons.authentication.service', \r\n    \t\t[ 'd7-services.commons.configurations'\r\n    \t\t  ,'d7-services.commons.authentication.serviceConstant'\r\n    \t\t  ,'d7-services.commons.authentication.channel'\r\n    \t\t  ,'d7-services.resources.system.resource'\r\n    \t\t  ,'d7-services.resources.user.resource'\r\n    \t\t  ,'ngCookies'\r\n    \t\t ])\r\n    \r\n    /**\r\n\t * AuthenticationService\r\n\t * \r\n\t * This service mirrors the Drupal system resource of the services 3.x module.\r\n\t * To use this you have to set following line in your Drupal CORS module settings\r\n\t * your_api_endpoint/system/*|<mirror>|POST|Content-Type,Authorization|true\r\n\t * \r\n\t**/\r\n    .factory('AuthenticationService', AuthenticationService);\r\n   \r\n    /**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t**/\r\n    AuthenticationService.$inject = ['$rootScope', 'DrupalApiConstant', 'AuthenticationServiceConstant', 'AuthenticationChannel', 'SystemResource', 'UserResource', '$cookies', '$http', '$q'];\r\n    \r\n    /**\r\n     * ApiAuthService\r\n     * \r\n     * This service mirrors the Drupal system resource of the services 3.x module.\r\n     * To use this you have to set following line in your Drupal CORS module settings\r\n     * your_api_endpoint/system/*|<mirror>|POST|Content-Type,Authorization|true\r\n     * \r\n    **/\r\n\t/** @ngInject */\r\n\tfunction AuthenticationService( $rootScope, DrupalApiConstant, AuthenticationServiceConstant, AuthenticationChannel, SystemResource, UserResource, $cookies, $http, $q ) { \r\n\t\r\n\t\t\t//we set this to undefined because we wan't to detect the first connection check \r\n\t\tvar userIsConected,\r\n\t\t\tcurrentUser\t = AuthenticationServiceConstant.anonymousUser,\r\n\t\t\t// time of last successful connection in ms\r\n\t\t\tlastConnectTime  = 0,\r\n\t\t\t//auth token rendered as Authentication headers\r\n\t\t\tauthenticationHeaders,\r\n\t\t\t//session data\r\n\t\t\tsessid = null,\r\n\t\t\tsession_name = null,\r\n\t\t\tsessionCookieOptions =  { \t\r\n\t\t\t\tdomain \t\t\t: DrupalApiConstant.drupal_instance,\r\n\t\t\t\tpath\t\t\t: '/',\r\n\t\t\t\t//secure \t\t\t: false,\r\n\t\t\t\t//expires\t\t\t: DrupalApiConstant.session_expiration_time,\r\n\t\t\t\t//expirationUnit \t: DrupalApiConstant.session_expiration_unite,\r\n\t\t\t};\r\n\t\t\r\n\t\t//setup and return service        \r\n        var authenticationService = {\r\n        \t\tisUser\t\t\t: isUser,\r\n        \t\tisAuthorized \t: isAuthorized,\r\n        \t\tlogin\t\t\t: login,\r\n    \t\t\tlogout\t\t\t: logout,\r\n    \t\t\trefreshConnection\t\t\t: refreshConnection,\r\n    \t\t\tgetLastConnectTime\t\t\t: getLastConnectTime,\r\n    \t\t\tgetConnectionState\t\t\t: getConnectionState,\r\n    \t\t\tgetAuthenticationHeaders \t: getAuthenticationHeaders,\r\n    \t\t\tgetCurrentUser\t\t\t\t: getCurrentUser\r\n        };\r\n        \r\n        return authenticationService;\r\n\r\n        ////////////\r\n        \r\n        /**\r\n         * isUser\r\n         * \r\n         * @param {Object} user or uid The user objcet or uid\r\n         * \r\n         * @returns {Boolean} true if uid is equal false if not\r\n         * \r\n         */\r\n        function isUser(userOrUid) {       \t\r\n\t\t\t\r\n\t\t\tvar currentUser = getCurrentUser();\r\n\t\t\t\r\n\t\t\tif(angular.isObject(userOrUid)) {\r\n\t\t\t\tif(userOrUid.uid == currentUser.uid) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t\r\n\t\t\tif(userOrUid == currentUser.uid) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t   \t     \r\n\t        return false;\r\n        };\r\n        \r\n        /**\r\n         * isAuthorized\r\n         * \r\n         * @param {Object} accessLevel The access level to check for\r\n         * @param {Object} roles The role to check with. If roles is not gives the users roles will be taken\r\n         * \r\n         * @returns {Boolean} true if authorized false if not\r\n         * \r\n         */\r\n        function isAuthorized(accessLevelRoles, userRoles) {       \t\r\n\t\t\tvar isGranted = false,\r\n\t\t\t\tcurrentUser = getCurrentUser();\r\n\r\n\t\t\tif(userRoles === undefined ) {\r\n\t\t\t\tuserRoles = currentUser.roles; \r\n\t\t\t}\t\r\n\t\t\t\r\n\t\t\t//check by accessLevel and optional given roles\r\n\t\t\tif(accessLevelRoles == '*') { return true; }\r\n\t\t\t\r\n\t\t\tif(!angular.isArray(accessLevelRoles)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (var i = 0; i < accessLevelRoles.length; i++) {\r\n\t\t\t\tfor (var prop in userRoles) {\r\n\t\t\t\t\tif(accessLevelRoles[i][prop] === userRoles[prop]) {\r\n\t\t\t\t\t\t return true;\r\n\t\t\t\t\t}\r\n\t\t\t\t }\r\n\t\t\t}\r\n\t   \t     \r\n\t         return false;\r\n        };\r\n\t\t\r\n\t\t/**\r\n\t\t * login\r\n\t\t * \r\n\t\t * Uses the login request of the user resource and saves session data on success\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction login(loginData) {\r\n\r\n\t\t\treturn UserResource\r\n\t\t\t\t\t.login(loginData)\r\n\t\t\t\t\t\t.success(function (responseData, status, headers, config) {\r\n\t\t\t\t\t\t\tsetAuthenticationHeaders(responseData.token);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tsetLastConnectTime(Date.now());\r\n\t\t\t\t\t\t\tsetConnectionState((responseData.user.uid === 0)?false:true)\r\n\t\t\t\t\t\t\tsetCookies(responseData.sessid, responseData.session_name);\r\n\t\t\t\t\t\t\tsetCurrentUser(responseData.user);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tAuthenticationChannel.pubLoginConfirmed(responseData);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.error(function (responseError, status, headers, config) {\r\n\t\t\t\t\t\t\tAuthenticationChannel.pubLoginFailed(responseError);\r\n\t\t\t\t\t\t});\r\n\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * logout\r\n\t\t * \r\n\t\t * Uses the logout request of the user resource and deletes session data on success\r\n\t\t * \r\n\t\t * @return {Promise} requests promise\r\n\t\t**/\r\n\t\tfunction logout() {\r\n\t\t\t\r\n\t\t\treturn UserResource\r\n\t\t\t\t\t.logout()\r\n\t\t\t\t\t\t.success(function (responseData, status, headers, config) {\r\n\t\t\t\t\t\t\tdelAuthenticationHeaders();\r\n\t\t\t\t\t\t\tdelCookies();\r\n\t\t\t\t\t\t\tsetConnectionState(false);\r\n\t\t\t\t\t\t\tsetCurrentUser(AuthenticationServiceConstant.anonymousUser);\r\n\r\n\t\t\t\t\t\t\tAuthenticationChannel.pubLogoutConfirmed(responseData);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.error(function (responseError, status, headers, config) {\r\n\t\t\t\t\t\t\tAuthenticationChannel.pubLogoutFailed(responseError);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * refreshConnection\r\n\t\t * \r\n\t\t * @TODO write doc\r\n\t\t * \r\n\t\t * @return {Promise} with new token \r\n\t\t *  \r\n\t\t**/\r\n\t\tfunction refreshConnection() {\r\n\t\t\tvar defer = $q.defer();\r\n\t\t\t\r\n\t\t\t//check token\r\n\t\t\trefreshTokenFromServer()\r\n\t\t\t\t\t\t.then(\r\n\t\t\t\t\t\t\t\tfunction(response) {\r\n\t\t\t\t\t\t\t\t\t//check connection\r\n\t\t\t\t\t\t\t\t\ttryConnect()\r\n\t\t\t\t\t\t\t\t\t\t.success(function(responseData, status, headers, config) { \r\n\t\t\t\t\t\t\t\t\t\t\tAuthenticationChannel.pubRefreshConnectionConfirmed(responseData);\r\n\t\t\t\t\t\t\t\t\t\t\treturn defer.resolve(responseData.data);\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t.catch(\r\n\t\t\t\t\t\t\t\tfunction(responseError) {\r\n\t\t\t\t\t\t\t\t\tAuthenticationChannel.pubRefreshConnectionFailed(responseError);\r\n\t\t\t\t\t\t\t\t\treturn defer.resolve(responseError);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t);\r\n\t\t\t \r\n\t\t\treturn defer.promise; \r\n\t\t\t\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * tryConnect\r\n\t\t * \r\n\t\t * @TODO write doc\r\n\t\t * \r\n\t\t * @returns\r\n\t\t */\r\n\t\tfunction tryConnect() {\r\n\t\t\t\r\n\t\t\t return SystemResource\r\n\t\t\t \t\t\t.connect()\r\n\t\t\t\t \t\t\t.success( function (responseData, status, headers, config) {\r\n\t\t\t\t\t             setLastConnectTime(Date.now());\r\n\t\t\t\t\t             setCookies(responseData.sessid, responseData.session_name);\r\n\t\t\t\t\t             setConnectionState((responseData.user.uid === 0)?false:true)\r\n\t\t\t\t\t             setCurrentUser(responseData.user);\r\n\t\t\t\t\t              \r\n\t\t\t\t\t             AuthenticationChannel.pubTryConnectConfirmed(responseData);  \r\n\t\t\t\t            })\r\n\t\t\t\t            .error(function(responseError, status, headers, config) {\r\n\t\t\t\t            \tAuthenticationChannel.pubTryConnectFailed(responseError);\r\n\t\t\t\t            });\r\n\t\t\t\t\t\t \t\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * refreshTokenFromServer\r\n\t\t * \r\n\t\t * request a new token from server => api_endpoint/user/token\r\n\t\t * \r\n\t\t * @return {Promise} with new token \r\n\t\t *  \r\n\t\t**/\r\n\t\tfunction refreshTokenFromServer() {\r\n\r\n\t\t\treturn UserResource\r\n\t\t\t\t\t.token()\r\n\t\t\t\t\t\t.success(function(responseData, status, headers, config) {\r\n\t\t\t\t\t\t\t\t\tsetAuthenticationHeaders(responseData.token);\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.error(function(responseError) {\r\n\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t});\t\r\n\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * getCurrentUser\r\n\t\t * \r\n\t\t * Returns the current authenticated user\r\n\t\t * \r\n\t\t * @return {Object} user as JSON\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction getCurrentUser() { return currentUser; };\r\n\r\n\t\t/**\r\n\t\t * setCurrentUser\r\n\t\t * \r\n\t\t * Sets the current loggend in user\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction setCurrentUser(newUser) {\r\n\t\t\tif(currentUser != newUser) {\r\n\t        \tcurrentUser = newUser;\r\n\t      \t    AuthenticationChannel.pubCurrentUserUpdated(newUser);\r\n\t        }\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * getConnectionState\r\n\t\t * \r\n\t\t * Returns the current state of connection\r\n\t\t * \r\n\t\t * @return {Boolean} userIsConected\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction getConnectionState() { return (userIsConected)?true:false; };\r\n\t\r\n\t\t/**\r\n\t\t * setConnectionState\r\n\t\t * \r\n\t\t * Sets the current state of connection as boolean\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction setConnectionState(newState) {\r\n\t\t\tnewState = (newState)?true:false;\r\n\t\t\t\r\n\t        if(newState !== userIsConected) {\r\n\t          userIsConected = newState;\r\n\t      \t  AuthenticationChannel.pubConnectionStateUpdated(userIsConected);\r\n\t        }\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * getAuthenticationHeaders\r\n\t\t * \r\n\t\t * Returns the saved authentication header obj\r\n\t\t * \r\n\t\t * @return  {Object} authentication header\r\n\t\t * \r\n\t\t**/\t\r\n        function getAuthenticationHeaders() { return authenticationHeaders; };\r\n\r\n\r\n        /**\r\n\t\t * setAuthenticationHeaders\r\n\t\t * \r\n\t\t * Sets the authentication header as obj if different from actual value.\r\n\t\t * After this action the commons.authentication.AuthenticationHeaderInterceptor add's Authorisation and X-CSRF-Token headers to request\r\n\t\t * \r\n\t\t * @param {String} X-CSRF-TOKEN value\r\n\t\t * \r\n\t\t**/\r\n        function setAuthenticationHeaders(newToken) {\r\n       \r\n        \tvar newData = { \r\n\t\t\t\t\t'Authorization' : newToken,\r\n\t\t\t\t\t'X-CSRF-TOKEN'  : newToken\r\n\t\t\t};\r\n        \t\r\n        \t//if header data exist check if they are different.\r\n        \t//if they are different set them\r\n        \tif(authenticationHeaders) {\r\n        \t\tif(authenticationHeaders.Authorization != newToken) {\r\n        \t\t\tauthenticationHeaders = newData;\r\n        \t\t}\r\n        \t} \r\n        \t//if header data not exist set them\r\n        \telse {\r\n        \t\tauthenticationHeaders = newData;\r\n        \t}\r\n        \t\r\n        };\r\n        \r\n        /**\r\n\t\t * delAuthenticationHeaders\r\n\t\t * \r\n\t\t * Deletes the authentication headers from service\r\n\t\t * After this action the http intercepter will not add Authorisation and X-CSRF-Token headers to request\r\n\t\t * \r\n\t\t**/\r\n        function delAuthenticationHeaders() {\r\n        \t authenticationHeaders = null;\r\n        };\r\n        \r\n        /**\r\n\t\t * getCookies\r\n\t\t * \r\n\t\t * Returns the saved cookie data\r\n\t\t * \r\n\t\t * @return  {String} cookie data\r\n\t\t * \r\n\t\t**/\r\n        function getCookies() {\r\n        \treturn session_name+\"=\"+sessid;\r\n        };\r\n\r\n        /**\r\n\t\t * setCookies\r\n\t\t * \r\n\t\t * Saves the session id and name in service and cookies\r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n        function setCookies(newSessid, newSession_name) {\t\r\n        \t//save data in service\r\n        \tsessid = newSessid;\r\n\t\t\tsession_name = newSession_name;\r\n\t\t\t\r\n\t\t\t//store session cookies\r\n\t\t\t//$cookies[data.session_name] = data.sessid;\r\n\t\t\t$cookies.put(newSession_name, newSessid, sessionCookieOptions);\t\r\n        };\r\n        \r\n        /**\r\n\t\t * delCookies\r\n\t\t * \r\n\t\t * Deletes the cookie from service and cookies \r\n\t\t * \r\n\t\t**/\r\n        function delCookies() {\r\n        \t//delete data in service\r\n        \tsessid = null;\r\n\t\t\tsession_name = null;\r\n\t\t\t\r\n        \t//delete session cookies\r\n\t\t\t$cookies.remove(session_name, sessionCookieOptions.path);\r\n        };\r\n\t\t\r\n\t\t/**\r\n\t\t * getLastConnectTime\r\n\t\t * \r\n\t\t * Returns the time of last successful connection in ms\r\n\t\t * \r\n\t\t * @return time in ms\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction getLastConnectTime() { return lastConnectTime; };\r\n\t\t\r\n\t\t/**\r\n\t\t * setLastConnectTime\r\n\t\t * \r\n\t\t * Sets the time of last successful connection in ms\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction setLastConnectTime(newTimeInMs) {\r\n\t\t\tvar newTimeInMs = parseInt(newTimeInMs);\r\n\t\t\tif(newTimeInMs === NaN || newTimeInMs < 0) return;\r\n\t\t\tlastConnectTime = newTimeInMs;\r\n\t\t};\r\n\t\t\r\n\r\n\t};\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    /**\r\n\t *  Constants for authenticationService \r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in your app.js config section\r\n\t**/\r\n    \r\n    //setup constant\r\n    \r\n    //default roles\r\n    var anonymous_user \t\t= { \r\n\t    \t\t\t\t\t'id' \t: 1,\r\n\t\t\t\t    \t\t'role' \t: \"anonymous user\"\r\n\t\t\t\t    \t\t},\r\n\t\tauthenticated_user = { \r\n\t\t\t\t\t\t\t'id' \t: 2,\r\n\t\t\t\t    \t\t'role' \t: \"authenticated user\"\r\n\t\t\t\t    \t\t},\r\n\t    administrator \t\t= { \r\n\t\t\t\t\t\t\t\t'id' \t: 3,\r\n\t\t\t\t\t    \t\t'role' \t: \"administrator\"\r\n\t\t\t\t\t    \t};\r\n    //default access levels\r\n\tvar publicLevel = \"*\",\r\n\t\tanonLevel = {},\r\n\t\tuserLevel = {},\r\n\t\tadminLevel = {};\r\n\t\t\r\n\t\tanonLevel[anonymous_user.id] \t\t= anonymous_user.role;\r\n\t\tuserLevel[authenticated_user.id] \t= authenticated_user.role;\r\n\t\tadminLevel[administrator.id ] \t\t= administrator.role;\r\n\t\t\t\r\n\tvar\tAuthenticationServiceConstant =  {\r\n\t\t\t//the drupals guest user obj\r\n\t\t\tanonymousUser : {\r\n\t\t\t\t\t\"uid\"\t\t: 0,\r\n\t\t\t\t\t\"roles\"\t\t: {},\r\n\t\t\t\t\t\"cache\"\t\t: 0,\r\n\t\t\t\t\t\"timestamp\"\t: Date.now()\r\n\t\t\t},\r\n\t\t\t//default drupal roles key is role id\r\n\t   \t\troles : {},\r\n\t        //default access levels\r\n\t        //here you can grand access for role groups\r\n\t        accessLevels : {\r\n\t            'public' : publicLevel,\r\n\t            'anon':  [anonLevel],\r\n\t            'user' : [userLevel],\r\n\t            'admin': [adminLevel]\r\n\t        }\t\r\n    };\r\n    \r\n    AuthenticationServiceConstant.anonymousUser.roles[anonymous_user.id] = anonymous_user.role;\r\n    \r\n    AuthenticationServiceConstant.roles[anonymous_user.id] = anonymous_user.role;\r\n\tAuthenticationServiceConstant.roles[authenticated_user.id] = authenticated_user.role;\r\n\tAuthenticationServiceConstant.roles[administrator.id] = administrator.role;\r\n\t\r\n\t/**\r\n\t * API authentication service constant\r\n\t**/\r\n\tangular\r\n\t    .module('d7-services.commons.authentication.serviceConstant', [])\r\n\t    .constant(\"AuthenticationServiceConstant\", AuthenticationServiceConstant);\r\n\r\n})();",";(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * Drupal http module bundle\r\n\t */\r\n\tangular.module('d7-services.commons.http', \r\n\t\t\t['d7-services.commons.http.configurations', \r\n\t\t\t 'd7-services.commons.http.intercepter.requestAccept']);\r\n\t\r\n})();",";(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * Drupal request intercepter Module for the requests Content-Type attribute\r\n\t */\r\n\tangular.module('d7-services.commons.http.configurations', ['d7-services.commons.http.intercepter.requestAccept', 'd7-services.commons.authentication.httpIntercepter'])\r\n\t\t   .config(hTTPConfigurations);\r\n\t\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\thTTPConfigurations.$inject = [ '$httpProvider' ];\r\n\t\r\n\t\r\n\t/**\r\n\t * HTTP Intercepter for Content-Type attribute of HTTP-Requests\r\n\t **/\r\n\t/** @ngInject */\r\n\tfunction hTTPConfigurations( $httpProvider ) {\r\n\t\t//request Content-Type attribute\r\n\t\t$httpProvider.interceptors.push('RequestIntercepterAccept');\r\n\t\t$httpProvider.interceptors.push('AuthenticationHttpInterceptor');\r\n\t};\r\n\r\n})();","(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * Drupal request intercepter Module for the requests Accept attribute\r\n\t */\r\n\tangular.module('d7-services.commons.http.intercepter.requestAccept', ['d7-services.commons.configurations', 'd7-services.resources.file.resourceConstant'])\r\n\t\t   .factory('RequestIntercepterAccept', RequestIntercepterAccept);\r\n\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\tRequestIntercepterAccept.$inject = [ '$injector'];\r\n\t\r\n\t/**\r\n\t * HTTP Intercepter for Accept attribute of HTTP-Requests\r\n\t **/\r\n\t/** @ngInject */\r\n\tfunction RequestIntercepterAccept($injector) {\r\n\t\t\r\n\t\t//setup and return service            \t\r\n        var intercepter = {\r\n        \trequest \t: request,\r\n        };\r\n        \r\n        return intercepter;\r\n\r\n        ////////////\r\n        \r\n        //request function\r\n        \r\n        /**\r\n\t\t * request\r\n\t\t * \r\n\t\t * Intercepts a request and sets the request attribute \r\n\t     *\r\n\t\t * @param \t{Object} config The requests config object \r\n\t\t * \r\n\t\t * @return  {Object} The edited config object\r\n\t\t * \r\n\t\t**/\r\n        function request(config){\r\n\r\n        \t\r\n        \t$injector.invoke(['DrupalApiConstant', 'FileResourceConstant', function (DrupalApiConstant, FileResourceConstant) {\r\n        \t       \t\t\r\n        \t\tconfig.headers['Accept'] = DrupalApiConstant.responseFormat;\r\n        \t\t\r\n        \t\tif(!(config.method == 'POST' && config.url == DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + FileResourceConstant.resourcePath)) {\r\n    \t        \tconfig.headers['Content-Type'] = DrupalApiConstant.responseFormat;\r\n        \t\t}\r\n        \t\t\r\n\t        \t\r\n \t         \t\r\n \t        }]);\r\n\r\n\t\t\treturn config;\r\n        };\r\n    \t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n\r\n    angular.module('d7-services.commons.directives', \r\n    \t\t['d7-services.commons.directives.toggleByAccesslevel']);\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('d7-services.commons.directives.toggleByAccesslevel', ['d7-services.commons.authentication.channel', 'd7-services.commons.authentication.service'])\r\n        .directive('toggleByAccesslevel', toggleByAccesslevel);\r\n\r\n    /**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n    toggleByAccesslevel.$inject = ['AuthenticationChannel', 'AuthenticationService'];\r\n\r\n    /** @ngInject */\r\n    function toggleByAccesslevel(AuthenticationChannel, AuthenticationService) {\r\n\r\n        return {\r\n        \trestrict: 'A',\r\n        \t\r\n            link: function($scope, element, attrs) {\r\n            \r\n            \t$scope.user = AuthenticationService.getCurrentUser();\r\n            \t\r\n            \tvar prevDisp = element.css('display')\r\n                    , userRoles = $scope.user.roles \r\n                    , accessLevel,\r\n                    toggleAction;\r\n            \t\r\n            \tif(attrs.toggleAction !== 'hide' && attrs.toggleAction !== 'show') {\r\n            \t\ttoggleAction = \"hide\";\r\n            \t} else {\r\n            \t\ttoggleAction = attrs.toggleAction;\r\n            \t}\r\n\r\n                AuthenticationChannel.subCurrentUserUpdated($scope, currentUserUpdatedHandler);\r\n\r\n                attrs.$observe('toggleByAccesslevel', function(al) {\r\n                \tvar parsed = [];\r\n                    if(al) \r\n                    {\r\n                    \taccessLevel = $scope.$eval(al);\r\n                \t}\r\n                    \r\n                    updateCSS();\r\n                });\r\n\r\n                ///////////////////////////////////////////////////\r\n                \r\n                //hide or shoe elem by toggleAction\r\n                function updateCSS() {\r\n\r\n                    if(userRoles && accessLevel) {\r\n\r\n                    \tif(toggleAction == 'hide') {\r\n                    \t\t\r\n                    \t\tif(!AuthenticationService.isAuthorized(accessLevel))\r\n                                element.css('display', 'none');\r\n                            else\r\n                                element.css('display', prevDisp);\r\n                    \t} \r\n                    \telse if(toggleAction == 'show') {\r\n                    \t\t\r\n                    \t\tif(!AuthenticationService.isAuthorized(accessLevel))\r\n                    \t\t\telement.css('display', prevDisp);\r\n                            else\r\n                            \telement.css('display', 'none');\r\n                    \t}\r\n                    \t\r\n                        \r\n                    }\r\n                };\r\n                \r\n                function currentUserUpdatedHandler(user){\r\n                \t$scope.user = user;\r\n                    userRoles = $scope.user.roles;\r\n                    updateCSS();\r\n                };\r\n                \r\n            }\r\n        };\r\n        \r\n        \r\n    };\r\n\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n    \r\n\t/**\r\n\t * User modules bundle\r\n\t**/\r\n\tangular\r\n\t    .module('d7-services.resources.comment', \r\n\t    \t\t['d7-services.resources.comment.resourceConstant', \r\n\t    \t\t 'd7-services.resources.comment.resource', \r\n\t    \t\t 'd7-services.resources.comment.channelConstant', \r\n\t    \t\t 'd7-services.resources.comment.channel']);\r\n})();",";(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * Comment Channel Module\r\n\t */\r\n\tangular.module('d7-services.resources.comment.channel', ['d7-services.commons.baseChannel', 'd7-services.resources.comment.channelConstant'])\r\n\t\t   .factory('CommentChannel', CommentChannel);\r\n\r\n\t\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\tCommentChannel.$inject = [ 'BaseChannel', 'CommentChannelConstant' ];\r\n\t\r\n\t/**\r\n\t * Notification channel for comment resource \r\n\t**/\r\n\t\r\n\t/** @ngInject */\r\n\tfunction CommentChannel(BaseChannel, CommentChannelConstant) {\r\n\t\r\n\t\t//setup and return service            \t\r\n        var commentChannelService = {\r\n        \t\t\r\n        \t//comment retrieve request\r\n    \t\tpubRetrieveConfirmed \t: pubRetrieveConfirmed,\r\n    \t\tsubRetrieveConfirmed\t: subRetrieveConfirmed,\r\n    \t\tpubRetrieveFailed \t\t: pubRetrieveFailed,\r\n    \t\tsubRetrieveFailed\t\t: subRetrieveFailed,\r\n    \t\t\r\n        \t//comment create request\r\n        \tpubCreateConfirmed \t\t: pubCreateConfirmed,\r\n        \tsubCreateConfirmed\t\t: subCreateConfirmed,\r\n        \tpubCreateFailed \t\t: pubCreateFailed,\r\n        \tsubCreateFailed\t\t\t: subCreateFailed,\r\n        \t\r\n        \t//comment update request\r\n        \tpubUpdateConfirmed \t\t: pubUpdateConfirmed,\r\n        \tsubUpdateConfirmed\t\t: subUpdateConfirmed,\r\n        \tpubUpdateFailed \t\t: pubUpdateFailed,\r\n        \tsubUpdateFailed\t\t\t: subUpdateFailed,\r\n        \t\r\n        \t//comment delete request\r\n        \tpubDeleteConfirmed \t\t: pubDeleteConfirmed,\r\n        \tsubDeleteConfirmed\t\t: subDeleteConfirmed,\r\n        \tpubDeleteFailed \t\t: pubDeleteFailed,\r\n        \tsubDeleteFailed\t\t\t: subDeleteFailed,\r\n        \t\r\n        \t//comment index request\r\n        \tpubIndexConfirmed \t\t: pubIndexConfirmed,\r\n        \tsubIndexConfirmed\t\t: subIndexConfirmed,\r\n        \tpubIndexFailed \t\t\t: pubIndexFailed,\r\n        \tsubIndexFailed\t\t\t: subIndexFailed,\r\n        \t\r\n        \t//comment countAll request\r\n        \tpubCountAllConfirmed \t\t: pubCountAllConfirmed,\r\n        \tsubCountAllConfirmed\t\t: subCountAllConfirmed,\r\n        \tpubCountAllFailed \t\t\t: pubCountAllFailed,\r\n        \tsubCountAllFailed\t\t\t: subCountAllFailed,\r\n        \t\r\n        \t//comment countNew request\r\n        \tpubCountNewConfirmed \t\t: pubCountNewConfirmed,\r\n        \tsubCountNewConfirmed\t\t: subCountNewConfirmed,\r\n        \tpubCountNewFailed \t\t\t: pubCountNewFailed,\r\n        \tsubCountNewFailed\t\t\t: subCountNewFailed,\r\n        \t\r\n        };\r\n        \r\n        return commentChannelService;\r\n\r\n        ////////////\r\n        \r\n        //Comment retrieve request functions\r\n        \r\n        /**\r\n\t\t * pubRetrieveConfirmed\r\n\t\t * \r\n\t\t * Publish the CommentRetrieveConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubRetrieveConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.retrieveConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subRetrieveConfirmed\r\n\t\t * \r\n\t\t * subscribe for the CommentRetrieveConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for CommentRetrieveConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subRetrieveConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.retrieveConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubRetrieveConfirmed\r\n\t\t * \r\n\t\t * Publish the CommentRetrieveConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubRetrieveFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.retrieveFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subRetrieveFailed\r\n\t\t * \r\n\t\t * subscribe for the CommentRetrieveFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for CommentRetrieveFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subRetrieveFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.retrieveFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//Comment create request functions\r\n\r\n    \t/**\r\n    \t * pubCreateConfirmed\r\n    \t * \r\n    \t * Publish the CommentCreateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCreateConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.createConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCreateConfirmed\r\n    \t * \r\n    \t * subscribe for the CommentCreateConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for CommentCreateConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCreateConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.createConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubCreateConfirmed\r\n    \t * \r\n    \t * Publish the CommentCreateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCreateFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.createFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCreateFailed\r\n    \t * \r\n    \t * subscribe for the CommentCreateFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for CommentCreateFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCreateFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.createFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//Comment update request functions\r\n\r\n    \t/**\r\n    \t * pubUpdateConfirmed\r\n    \t * \r\n    \t * Publish the CommentUpdateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubUpdateConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.updateConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subUpdateConfirmed\r\n    \t * \r\n    \t * subscribe for the CommentUpdateConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for CommentUpdateConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subUpdateConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.updateConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n    \t/**\r\n    \t * pubUpdateConfirmed\r\n    \t * \r\n    \t * Publish the CommentUpdateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubUpdateFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.updateFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subUpdateFailed\r\n    \t * \r\n    \t * subscribe for the CommentUpdateFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for CommentUpdateFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subUpdateFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.updateFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//Comment delete request functions\r\n\r\n    \t/**\r\n    \t * pubDeleteConfirmed\r\n    \t * \r\n    \t * Publish the CommentDeleteConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubDeleteConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.deleteConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subDeleteConfirmed\r\n    \t * \r\n    \t * subscribe for the CommentDeleteConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for CommentDeleteConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subDeleteConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.deleteConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubDeleteConfirmed\r\n    \t * \r\n    \t * Publish the CommentDeleteConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubDeleteFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.deleteFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subDeleteFailed\r\n    \t * \r\n    \t * subscribe for the CommentDeleteFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for CommentDeleteFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subDeleteFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.deleteFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//Comment index request functions\r\n\r\n    \t/**\r\n    \t * pubIndexConfirmed\r\n    \t * \r\n    \t * Publish the CommentIndexConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubIndexConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.indexConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subIndexConfirmed\r\n    \t * \r\n    \t * subscribe for the CommentIndexConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for CommentIndexConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subIndexConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.indexConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubIndexConfirmed\r\n    \t * \r\n    \t * Publish the CommentIndexConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubIndexFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.indexFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subIndexFailed\r\n    \t * \r\n    \t * subscribe for the CommentIndexFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for CommentIndexFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subIndexFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.indexFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//Comment countAll request functions\r\n\r\n    \t/**\r\n    \t * pubCountAllConfirmed\r\n    \t * \r\n    \t * Publish the CommentcountAllConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCountAllConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.countAllConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCountAllConfirmed\r\n    \t * \r\n    \t * subscribe for the CommentcountAllConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCountAllConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for CommentcountAllConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCountAllConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.countAllConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubCountAllConfirmed\r\n    \t * \r\n    \t * Publish the CommentcountAllConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCountAllFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.countAllFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCountAllFailed\r\n    \t * \r\n    \t * subscribe for the CommentcountAllFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCountAllFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for CommentcountAllFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCountAllFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.countAllFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//Comment countNew request functions\r\n\r\n    \t/**\r\n    \t * pubCountNewConfirmed\r\n    \t * \r\n    \t * Publish the CommentcountNewConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCountNewConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.countNewConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCountNewConfirmed\r\n    \t * \r\n    \t * subscribe for the CommentcountNewConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCountNewConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for CommentcountNewConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCountNewConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.countNewConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubCountNewConfirmed\r\n    \t * \r\n    \t * Publish the CommentcountNewConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCountNewFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(CommentChannelConstant.countNewFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCountNewFailed\r\n    \t * \r\n    \t * subscribe for the CommentcountNewFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCountNewFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for CommentcountNewFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCountNewFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( CommentChannelConstant.countNewFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n\r\n    /**\r\n\t *  Constants for CommentChannel\r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in a config section of angular\r\n\t */\r\n\tvar CommentChannelConstant =  {\r\n\t \t\t// Retrieve action\r\n \t\t\tretrieveConfirmed\t\t: 'event:drupal-comment-retrieveConfirmed',\r\n \t\t\tretrieveFailed\t\t\t: 'event:drupal-comment-retrieveFailed',\r\n \t\t\t// Create action\r\n \t\t\tcreateConfirmed\t\t\t: 'event:drupal-comment-createConfirmed',\r\n \t\t\tcreateFailed\t\t\t: 'event:drupal-comment-createFailed',\r\n \t\t\t// Update action\r\n \t\t\tupdateConfirmed\t\t\t: 'event:drupal-comment-updateConfirmed',\r\n \t\t\tupdateFailed\t\t\t: 'event:drupal-comment-updateFailed',\r\n \t\t\t// Delete action\t\r\n \t\t\tdeleteConfirmed\t\t\t: 'event:drupal-comment-deleteConfirmed',\r\n \t\t\tdeleteFailed\t\t\t: 'event:drupal-comment-deleteFailed',\r\n \t\t\t// Index action\r\n \t\t\tindexConfirmed\t\t\t: 'event:drupal-comment-indexConfirmed',\r\n \t\t\tindexFailed\t\t\t\t: 'event:drupal-comment-indexFailed',\r\n \t\t\t// countAll action\r\n \t\t\tcountAllConfirmed\t: 'event:drupal-comment-countAllConfirmed',\r\n \t\t\tcountAllFailed\t\t: 'event:drupal-comment-countAllFailed',\r\n \t\t\t// countNew action\r\n \t\t\tcountNewConfirmed\t: 'event:drupal-comment-countNewConfirmed',\r\n \t\t\tcountNewFailed\t\t: 'event:drupal-comment-countNewFailed',\r\n\r\n\t};\r\n    \r\n\t/**\r\n\t * Comment Channel Constant\r\n\t */\r\n\tangular\r\n\t    .module('d7-services.resources.comment.channelConstant', [])\r\n\t    .constant(\"CommentChannelConstant\", CommentChannelConstant);\r\n\r\n})();\r\n",";(function() {\r\n    'use strict';\r\n\r\n\t/**\r\n\t * Comment Resource Modules\r\n\t * \r\n\t * see sourcecode in services/resources/comment_resource.inc\r\n\t**/\r\n    angular.module('d7-services.resources.comment.resource', ['d7-services.commons.configurations', 'd7-services.resources.comment.resourceConstant', 'd7-services.resources.comment.channel', 'd7-services.commons.baseResource'])\r\n    \r\n    /**\r\n\t * CommentResource\r\n\t * \r\n\t * This service mirrors the Drupal comment resource of the services 3.x module.\r\n\t * To use this you have to set following line in your Drupal CORS module settings\r\n\t * your_api_endpoint/comment/*|<mirror>|POST|Content-Type,Authorization|true\r\n\t * \r\n\t**/\r\n    .factory('CommentResource', CommentResource);\r\n\r\n    /**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t**/\r\n    CommentResource.$inject = ['$http', 'BaseResource', 'DrupalApiConstant', 'CommentResourceConstant', 'CommentChannel'];\r\n    \r\n\t/** @ngInject */\r\n\tfunction CommentResource($http, BaseResource, DrupalApiConstant, CommentResourceConstant, CommentChannel) { \r\n\t\t\r\n\t\t//setup and return service            \t\r\n        var commentResourceService = {\r\n        \t//CRUD operations\r\n        \tretrieve \t: retrieve,\r\n    \t\tcreate \t\t: create,\r\n    \t\tupdate \t\t: update,\r\n    \t\tdelete \t\t: _delete,\r\n    \t    index \t\t: index,\r\n    \t    //Actions\r\n    \t    countAll\t: countAll,\r\n    \t    countNew\t: countNew\r\n        \t\r\n        };\r\n        \r\n        return commentResourceService;\r\n\r\n        ////////////\r\n        \r\n        /**\r\n\t\t * retrieve\r\n\t\t * \r\n\t\t * Retrieve a comment\r\n\t\t * \r\n\t\t * Method: GET \r\n\t\t * Url: http://drupal_instance/api_endpoint/comment/{CID}\r\n\t\t * \r\n\t\t * @params  {Object} data The requests data\r\n\t\t * \t\t\t@key \t{Integer} cid The cid of the comment to retrieve., required:true, source:path\r\n\t\t * \r\n\t\t * @return \t{Promise} A comment object\r\n\t\t * \r\n\t\t**/\r\n    \tfunction retrieve(data) {\r\n    \t\tvar retrievePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + CommentResourceConstant.resourcePath + '/' + data.cid;\r\n    \t\treturn BaseResource.retrieve( retrievePath,CommentChannel.pubRetrieveConfirmed,  CommentChannel.pubRetrieveFailed);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * create\r\n\t     * \r\n\t     * Create a comment\r\n\t     * This function uses drupal_form_submit() and as such expects all input to match\r\n\t     * the submitting form in question.\r\n\t     * \r\n\t     * Method: POST\r\n\t     * Url: http://drupal_instance/api_endpoint/comment\r\n\t     * \r\n\t     * @params  {Object} comment The data of the comment to create, required:true, source:post body\r\n\t     * \r\n\t\t *\r\n\t\t *  Roles can be passed in a roles property which is an associative\r\n\t\t *  array formatted with '<role id>' => '<role id>', not including the authenticated comment role, which is given by default.\r\n\t     * \r\n\t     * @return \t{Promise} The comment object of the newly created comment.\r\n\t     *\r\n\t    **/\r\n\t    function create(data) {\r\n\t    \t\r\n\t    \tvar createPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + CommentResourceConstant.resourcePath;\r\n\r\n\t    \tvar createData \t= { \r\n\t    \t\tcomment : data \r\n    \t\t};\r\n\r\n    \t\treturn BaseResource.create( createData, createPath,  CommentChannel.pubCreateConfirmed, CommentChannel.pubCreateFailed);\r\n\r\n\t    };\r\n\t        \r\n\t    /**\r\n\t     * update\r\n\t     * \r\n\t     * Update a comment\r\n\t     * \r\n\t     * Method: PUT\r\n\t     * Url: http://drupal_instance/api_endpoint/comment/{CID}\r\n\t     * \r\n\t     * @params  {Object} data The requests data\r\n\t     * \t\t\t@key \t{Integer} cid The unique identifier for this comment., required:true, source:path\r\n\t     * \t\t\t@key \t{Array}  data The comment object with updated information, required:true, source:post body\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function update(data) {\r\n\t    \t\r\n\t    \tvar updatePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + CommentResourceConstant.resourcePath + '/' + data.cid;\r\n\t    \t\r\n\t    \tdelete data.cid\r\n    \t\tvar updateData \t= {comment : data};\r\n    \t\t\r\n    \t\treturn BaseResource.update( updateData, updatePath, CommentChannel.pubUpdateConfirmed, CommentChannel.pubUpdateFailed);\r\n\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * delete\r\n\t     * \r\n\t     * Delete the comment\r\n\t     * \r\n\t     * Method: DELETE\r\n\t     * Url: http://drupal_instance/api_endpoint/comment/{CID}\r\n\t     * \r\n\t     * @params  {Object} data the requests data\r\n\t     * \t\t\t@key \t{Integer} cid The id of the comment to delete, required:true, source:path\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function _delete(data) {\r\n\t    \tvar deletePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + CommentResourceConstant.resourcePath + '/' + data.cid\r\n\t    \treturn BaseResource.delete(deletePath, CommentChannel.pubDeleteConfirmed, CommentChannel.pubDeleteFailed);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * index\r\n\t     * \r\n\t     * List all comments\r\n\t     * \r\n\t     * Method: GET\r\n\t\t * Url: http://drupal_instance/api_endpoint/comment\r\n\t\t * \r\n\t\t * @params  {Object} data the requests data\r\n\t\t * \t\t@key \t{Integer} page The zero-based index of the page to get. defaults to 0., required:false, source:param\r\n\t\t * \t\t@key \t{Integer} pagesize Number of records to get per page., required:false, source:param\r\n\t\t * \t\t@key \t{String} fields The fields to get., required:false, source:param\r\n\t\t * \t\t@key \t{Array} parameters Parameters, required:false, source:param\r\n\t\t * \t\t\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function index(data) {\r\n\t    \tvar indexPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + CommentResourceConstant.resourcePath + '/';\r\n\t    \treturn BaseResource.index(data, indexPath,CommentChannel.pubIndexConfirmed,  CommentChannel.pubIndexFailed);\r\n\t    };\r\n\t    \r\n\t\t/**\r\n\t\t * countAll\r\n\t\t * \r\n\t\t * Return number of comments on a given node.\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/comment/countAll\r\n\t\t * \r\n\t\t * @params  {Object} data the requests data\r\n\t\t * \t\t@key \t{Integer} nid The node id to count all comments., separated by comma., required:true, source:post body\t\r\n\t\t * \r\n\t\t * @return \t{Promise}\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction countAll(data) {\r\n\t\t\tvar  pathTocountAll = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + CommentResourceConstant.resourcePath + '/' + CommentResourceConstant.actions.countAll,\r\n\t\t\t\t requestConfig = {\r\n\t\t\t     \turl\t\t: pathTocountAll,\r\n\t\t\t     \tmethod\t: 'POST',\r\n\t\t\t     \tdata : data\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\treturn BaseResource.request(requestConfig,CommentChannel.pubCountAllConfirmed,  CommentChannel.pubCountAllFailed);\r\n\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * countNew\r\n\t\t * \r\n\t\t * Returns number of new comments on a given node since a given timestamp.\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/comment/countNew\r\n\t\t * \r\n\t\t * @params  {Object} data the requests data\r\n\t\t * \t\t@key \t{Integer} cid The node id to load comments for., separated by comma., required:true, source:post body\r\n\t\t * \t\t@key \t{Integer} since Timestamp to count from (defaults to time of last user acces to node)., required:false, source:post body\t\r\n\t\t * \r\n\t\t * @return \t{Promise}\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction countNew(data) {\r\n\t\t\tvar  pathTocountNew = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + CommentResourceConstant.resourcePath + '/' + CommentResourceConstant.actions.countNew,\r\n\t\t\t\t requestConfig = {\r\n\t\t\t     \turl\t\t: pathTocountNew,\r\n\t\t\t     \tmethod\t: 'POST',\r\n\t\t\t     \tdata : data\r\n\t\t\t\t};\r\n\r\n\t\t\treturn BaseResource.request(requestConfig,CommentChannel.pubCountNewConfirmed,  CommentChannel.pubCountNewFailed);\r\n\r\n\t\t};\r\n\t\t\t\t\t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n    \r\n    /**\r\n\t *  Constants for CommentResourceModules\r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in your app.js config section\r\n\t */\r\n\tvar CommentResourceConstant =  {\r\n\r\n\t\t// NOTE: This is the default alias aliases for your system resources defined in Drupal\r\n\t\tresourcePath : 'comment',\r\n\t\t//actions of comment resource\r\n\t\tactions : {\r\n\t\t\t//following actions are defined over their request method (GET, POST, PUT, DELETE) so they are commented out\r\n\t\t\t//retrieve \t\t\t\t: 'retrieve',\r\n\t\t\t//create \t\t\t\t: 'create',\r\n\t\t\t//update \t\t\t\t: 'update',\r\n\t\t\t//delete \t\t\t\t: 'delete',\r\n\t\t    //index \t\t\t\t: 'index',\r\n\t\t\t//\r\n\t\t\tcountAll \t\t\t: 'countAll',\r\n\t\t\tcountNew\t\t\t: 'countNew'\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Comment Constant Modules\r\n\t */\r\n\tangular\r\n\t    .module('d7-services.resources.comment.resourceConstant', [])\r\n\t    .constant(\"CommentResourceConstant\", CommentResourceConstant);\r\n\t\r\n})();\r\n",";(function() {\r\n    'use strict';\r\n    \r\n\t/**\r\n\t * Node modules bundle\r\n\t**/\r\n\tangular.module('d7-services.resources.node', \r\n\t\t\t['d7-services.resources.node.resourceConstant', \r\n\t\t\t 'd7-services.resources.node.resource', \r\n\t\t\t 'd7-services.resources.node.channelConstant', \r\n\t\t\t 'd7-services.resources.node.channel']);\r\n})();",";(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * Node Channel Module\r\n\t */\r\n\tangular.module('d7-services.resources.node.channel', ['d7-services.commons.baseChannel', 'd7-services.resources.node.channelConstant'])\r\n\t\t   .factory('NodeChannel', NodeChannel);\r\n\r\n\t\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\tNodeChannel.$inject = [ 'BaseChannel', 'NodeChannelConstant' ];\r\n\t\r\n\t/**\r\n\t * Notification channel for node resource \r\n\t**/\r\n\t\r\n\t/** @ngInject */\r\n\tfunction NodeChannel(BaseChannel, NodeChannelConstant) {\r\n\t\r\n\t\t//setup and return service            \t\r\n        var nodeChannelService = {\r\n        \t\t\r\n        \t//node retrieve request\r\n    \t\tpubRetrieveConfirmed \t: pubRetrieveConfirmed,\r\n    \t\tsubRetrieveConfirmed\t: subRetrieveConfirmed,\r\n    \t\tpubRetrieveFailed \t\t: pubRetrieveFailed,\r\n    \t\tsubRetrieveFailed\t\t: subRetrieveFailed,\r\n    \t\t\r\n        \t//node create request\r\n        \tpubCreateConfirmed \t\t: pubCreateConfirmed,\r\n        \tsubCreateConfirmed\t\t: subCreateConfirmed,\r\n        \tpubCreateFailed \t\t: pubCreateFailed,\r\n        \tsubCreateFailed\t\t\t: subCreateFailed,\r\n        \t\r\n        \t//node update request\r\n        \tpubUpdateConfirmed \t\t: pubUpdateConfirmed,\r\n        \tsubUpdateConfirmed\t\t: subUpdateConfirmed,\r\n        \tpubUpdateFailed \t\t: pubUpdateFailed,\r\n        \tsubUpdateFailed\t\t\t: subUpdateFailed,\r\n        \t\r\n        \t//node delete request\r\n        \tpubDeleteConfirmed \t\t: pubDeleteConfirmed,\r\n        \tsubDeleteConfirmed\t\t: subDeleteConfirmed,\r\n        \tpubDeleteFailed \t\t: pubDeleteFailed,\r\n        \tsubDeleteFailed\t\t\t: subDeleteFailed,\r\n        \t\r\n        \t//node index request\r\n        \tpubIndexConfirmed \t\t: pubIndexConfirmed,\r\n        \tsubIndexConfirmed\t\t: subIndexConfirmed,\r\n        \tpubIndexFailed \t\t\t: pubIndexFailed,\r\n        \tsubIndexFailed\t\t\t: subIndexFailed,\r\n        \t\r\n        \t// Files action\r\n     \t   \tpubFilesConfirmed\t\t: pubFilesConfirmed,\r\n     \t   \tsubFilesConfirmed\t\t: subFilesConfirmed,\r\n     \t   \tpubFilesFailed\t\t\t: pubFilesFailed,\r\n     \t   \tsubFilesFailed \t\t\t: subFilesFailed,\r\n     \t   \t\r\n     \t   \t// Comments action\r\n     \t   \tpubCommentsConfirmed\t: pubCommentsConfirmed,\r\n     \t   \tsubCommentsConfirmed\t: subCommentsConfirmed,\r\n     \t   \tpubCommentsFailed\t\t: pubCommentsFailed,\r\n     \t   \tsubCommentsFailed \t\t: subCommentsFailed,\r\n     \t   \t\r\n     \t   \t// Attachfile action\r\n     \t   \tpubAttachFileConfirmed\t: pubAttachFileConfirmed,\r\n     \t   \tsubAttachFileConfirmed\t: subAttachFileConfirmed,\r\n     \t   \tpubAttachFileFailed\t\t: pubAttachFileFailed,\r\n     \t   \tsubAttachFileFailed \t: subAttachFileFailed\r\n\r\n        };\r\n        \r\n        return nodeChannelService;\r\n\r\n        ////////////\r\n        \r\n        //Node retrieve request functions\r\n        \r\n        /**\r\n\t\t * pubRetrieveConfirmed\r\n\t\t * \r\n\t\t * Publish the NodeRetrieveConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubRetrieveConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.retrieveConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subRetrieveConfirmed\r\n\t\t * \r\n\t\t * subscribe for the NodeRetrieveConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for NodeRetrieveConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subRetrieveConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.retrieveConfirmed, _Scope, scopeHandler);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubRetrieveConfirmed\r\n\t\t * \r\n\t\t * Publish the NodeRetrieveConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubRetrieveFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.retrieveFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subRetrieveFailed\r\n\t\t * \r\n\t\t * subscribe for the NodeRetrieveFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for NodeRetrieveFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subRetrieveFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.retrieveFailed, _Scope, scopeHandler);\r\n\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//Node create request functions\r\n\r\n    \t/**\r\n    \t * pubCreateConfirmed\r\n    \t * \r\n    \t * Publish the NodeCreateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCreateConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.createConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCreateConfirmed\r\n    \t * \r\n    \t * subscribe for the NodeCreateConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeCreateConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCreateConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.createConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubCreateConfirmed\r\n    \t * \r\n    \t * Publish the NodeCreateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCreateFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.createFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCreateFailed\r\n    \t * \r\n    \t * subscribe for the NodeCreateFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeCreateFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCreateFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.createFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//Node update request functions\r\n\r\n    \t/**\r\n    \t * pubUpdateConfirmed\r\n    \t * \r\n    \t * Publish the NodeUpdateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubUpdateConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.updateConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subUpdateConfirmed\r\n    \t * \r\n    \t * subscribe for the NodeUpdateConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeUpdateConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subUpdateConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.updateConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n    \t/**\r\n    \t * pubUpdateConfirmed\r\n    \t * \r\n    \t * Publish the NodeUpdateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubUpdateFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.updateFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subUpdateFailed\r\n    \t * \r\n    \t * subscribe for the NodeUpdateFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeUpdateFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subUpdateFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.updateFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//Node delete request functions\r\n\r\n    \t/**\r\n    \t * pubDeleteConfirmed\r\n    \t * \r\n    \t * Publish the NodeDeleteConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubDeleteConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.deleteConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subDeleteConfirmed\r\n    \t * \r\n    \t * subscribe for the NodeDeleteConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeDeleteConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subDeleteConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.deleteConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubDeleteConfirmed\r\n    \t * \r\n    \t * Publish the NodeDeleteConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubDeleteFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.deleteFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subDeleteFailed\r\n    \t * \r\n    \t * subscribe for the NodeDeleteFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeDeleteFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subDeleteFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.deleteFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//Node index request functions\r\n\r\n    \t/**\r\n    \t * pubIndexConfirmed\r\n    \t * \r\n    \t * Publish the NodeIndexConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubIndexConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.indexConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subIndexConfirmed\r\n    \t * \r\n    \t * subscribe for the NodeIndexConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeIndexConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subIndexConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.indexConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubIndexConfirmed\r\n    \t * \r\n    \t * Publish the NodeIndexConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubIndexFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.indexFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subIndexFailed\r\n    \t * \r\n    \t * subscribe for the NodeIndexFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeIndexFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subIndexFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.indexFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//Node files request functions\r\n\r\n    \t/**\r\n    \t * pubFilesConfirmed\r\n    \t * \r\n    \t * Publish the NodeFilesConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubFilesConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.filesConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subFilesConfirmed\r\n    \t * \r\n    \t * subscribe for the NodeFilesConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subFilesConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeFilesConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subFilesConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.filesConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubFilesConfirmed\r\n    \t * \r\n    \t * Publish the NodeFilesConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubFilesFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.filesFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subFilesFailed\r\n    \t * \r\n    \t * subscribe for the NodeFilesFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subFilesFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeFilesFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subFilesFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.filesFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n\r\n    \t//Node comments request functions\r\n\r\n    \t/**\r\n    \t * pubCommentsConfirmed\r\n    \t * \r\n    \t * Publish the NodeCommentsConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCommentsConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.commentsConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCommentsConfirmed\r\n    \t * \r\n    \t * subscribe for the NodeCommentsConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCommentsConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeCommentsConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCommentsConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.commentsConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubCommentsConfirmed\r\n    \t * \r\n    \t * Publish the NodeCommentsConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCommentsFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.commentsFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCommentsFailed\r\n    \t * \r\n    \t * subscribe for the NodeCommentsFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCommentsFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeCommentsFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCommentsFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.commentsFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n\r\n\r\n    \t//Node attachFile request functions\r\n\r\n    \t/**\r\n    \t* pubAttachFileConfirmed\r\n    \t* \r\n    \t* Publish the NodeAttachFileConfirmed event with giver args \r\n    \t*\r\n    \t* @param \t{Object} args The events arguments \r\n    \t* \r\n    \t* \r\n    \t**/\r\n    \tfunction pubAttachFileConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.attachFileConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t* subAttachFileConfirmed\r\n    \t* \r\n    \t* subscribe for the NodeAttachFileConfirmed event\r\n    \t*\r\n    \t* @param \t{Object} _Scope The scope that calls the channels subAttachFileConfirmed function\r\n    \t* @param \t{function} scopeHandler The callback handler for NodeAttachFileConfirmed event\r\n    \t* \r\n    \t* @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t* \r\n    \t**/\r\n    \tfunction subAttachFileConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.attachFileConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t* pubAttachFileConfirmed\r\n    \t* \r\n    \t* Publish the NodeAttachFileConfirmed event with giver args \r\n    \t*\r\n    \t* @param \t{Object} args The events arguments \r\n    \t* \r\n    \t* \r\n    \t**/\r\n    \tfunction pubAttachFileFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.attachFileFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t* subAttachFileFailed\r\n    \t* \r\n    \t* subscribe for the NodeAttachFileFailed event\r\n    \t*\r\n    \t* @param \t{Object} _Scope The scope that calls the channels subAttachFileFailed function\r\n    \t* @param \t{function} scopeHandler The callback handler for NodeAttachFileFailed event\r\n    \t* \r\n    \t* @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t* \r\n    \t**/\r\n    \tfunction subAttachFileFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.attachFileFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n\r\n    /**\r\n\t *  Constants for NodeChannel\r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in a config section of angular\r\n\t */\r\n\tvar NodeChannelConstant =  {\r\n\t \t\t// Retrieve action\r\n \t\t\tretrieveConfirmed \t\t: 'event:drupal-node-retrieveConfirmed',\r\n \t\t\tretrieveFailed  \t\t: 'event:drupal-node-retrieveFailed',\r\n \t\t\t// Create action\r\n \t\t\tcreateConfirmed\t\t: 'event:drupal-node-createConfirmed',\r\n \t\t\tcreateFailed  \t\t\t: 'event:drupal-node-createFailed',\r\n \t\t\t// Update action\r\n \t\t\tupdateConfirmed\t\t: 'event:drupal-node-updateConfirmed',\r\n \t\t\tupdateFailed  \t\t\t: 'event:drupal-node-updateFailed',\r\n \t\t\t// Delete action\t\r\n \t\t\tdeleteConfirmed\t\t: 'event:drupal-node-deleteConfirmed',\r\n \t\t\tdeleteFailed  \t\t\t: 'event:drupal-node-deleteFailed',\r\n \t\t\t// Index action\r\n \t\t\tindexConfirmed  \t\t: 'event:drupal-node-indexConfirmed',\r\n \t\t\tindexFailed  \t\t\t: 'event:drupal-node-indexFailed',\r\n \t\t\t// Files action\r\n \t\t\tfilesConfirmed\t\t\t: 'event:drupal-node-filesConfirmed',\r\n \t\t\tfilesFailed  \t\t\t: 'event:drupal-node-filesFailed',\r\n \t\t\t// Comments action\r\n \t\t\tcommentsConfirmed\t\t: 'event:drupal-node-commentsConfirmed',\r\n \t\t\tcommentsFailed  \t\t: 'event:drupal-node-commentsFailed',\r\n \t\t\t// Attach file action\r\n \t\t\tattachFileConfirmed\t: 'event:drupal-node-attachFileConfirmed',\r\n \t\t\tattachFileFailed  \t\t: 'event:drupal-node-attachFileFailed'\r\n\t \t\t\r\n\t};\r\n    \r\n\t/**\r\n\t * Node Channel Constant\r\n\t */\r\n\tangular\r\n\t    .module('d7-services.resources.node.channelConstant', [])\r\n\t    .constant(\"NodeChannelConstant\", NodeChannelConstant);\r\n\r\n})();\r\n",";(function() {\r\n    'use strict';\r\n\r\n\t/**\r\n\t * Node Resource Modules\r\n\t * \r\n\t * see sourcecode in services/resources/node_resource.inc\r\n\t**/\r\n    angular.module('d7-services.resources.node.resource', ['d7-services.commons.configurations', 'd7-services.resources.node.resourceConstant', 'd7-services.resources.node.channel', 'd7-services.commons.baseResource'])\r\n    \r\n    /**\r\n\t * NodeResource\r\n\t * \r\n\t * This service mirrors the Drupal node resource of the services 3.x module.\r\n\t * To use this you have to set following line in your Drupal CORS module settings\r\n\t * your_api_endpoint/node/*|<mirror>|POST|Content-Type,Authorization|true\r\n\t * \r\n\t**/\r\n    .factory('NodeResource', NodeResource);\r\n\r\n    /**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t**/\r\n    NodeResource.$inject = ['$http', 'BaseResource', 'DrupalApiConstant', 'NodeResourceConstant', 'NodeChannel'];\r\n    \r\n\t/** @ngInject */\r\n\tfunction NodeResource($http, BaseResource, DrupalApiConstant, NodeResourceConstant, NodeChannel) { \r\n\t\t\r\n\t\t//setup and return service            \t\r\n        var nodeResourceService = {\r\n        \t//CRUD operations\r\n        \tretrieve \t: retrieve,\r\n    \t\tcreate \t\t: create,\r\n    \t\tupdate \t\t: update,\r\n    \t\tdelete \t\t: _delete,\r\n    \t    index \t\t: index,\r\n    \t    //Actions\r\n    \t    files\t\t: files,\r\n\t\t\tcomments \t: comments,\r\n\t\t\tattachFile : attachFile\r\n        };\r\n        \r\n        return nodeResourceService;\r\n\r\n        ////////////\r\n        \r\n        /**\r\n\t\t * retrieve\r\n\t\t * \r\n\t\t * Retrieve a node\r\n\t\t * \r\n\t\t * Method: GET \r\n\t\t * Url: http://drupal_instance/api_endpoint/node/{UID}\r\n\t\t * \r\n\t\t * @params  {Object} data The requests data\r\n\t\t * \t\t\t@key \t{Integer} nid UID of the node to be loaded, required:true, source:path\r\n\t\t * \r\n\t\t * @return \t{Promise} A node object\r\n\t\t * \r\n\t\t**/\r\n    \tfunction retrieve(data) {\r\n    \t\tvar retrievePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath + '/' + data.nid;\r\n    \t\treturn BaseResource.retrieve( retrievePath,NodeChannel.pubRetrieveConfirmed,  NodeChannel.pubRetrieveFailed);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * create\r\n\t     * \r\n\t     * Create a new node.\r\n\t     * This function uses drupal_form_submit() and as such expects all input to match\r\n\t     * the submitting form in question.\r\n\t     * \r\n\t     * Method: POST\r\n\t     * Url: http://drupal_instance/api_endpoint/node\r\n\t     * \r\n\t     * @params  {Object} data The accout of the node to create, required:true, source:post body\r\n\t     * \r\n\t     *  The $account object should contain, at minimum, the following properties:\r\n\t\t *     - {String} name  The node name\r\n\t\t *     - {String} mail  The email address\r\n\t\t *     - {String} pass  The plain text unencrypted password\r\n\t\t *\r\n\t\t *  These properties can be passed but are optional\r\n\t\t *     - {Integer} status Value 0 for blocked, otherwise will be active by default\r\n\t\t *     - {Integer} notify Value 1 to notify node of new account, will not notify by default\r\n\t\t *\r\n\t\t *  Roles can be passed in a roles property which is an associative\r\n\t\t *  array formatted with '<role id>' => '<role id>', not including the authenticated node role, which is given by default.\r\n\t     * \r\n\t     * @return \t{Promise} The node object of the newly created node.\r\n\t     *\r\n\t    **/\r\n\t    function create(data) {\r\n\t    \t\r\n\t    \tvar createPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath,\r\n\t    \t\tcreateData \t= {\r\n\t\t\t\t\tnode : data\r\n\t\t\t\t};\r\n\r\n    \t\treturn BaseResource.create( createData, createPath, NodeChannel.pubCreateConfirmed, NodeChannel.pubCreateFailed);\r\n\r\n\t    };\r\n\t        \r\n\t    /**\r\n\t     * update\r\n\t     * \r\n\t     * Update a node\r\n\t     * \r\n\t     * Method: PUT\r\n\t     * Url: http://drupal_instance/api_endpoint/node/{UID}\r\n\t     * \r\n\t     * @params  {Object} data The requests data\r\n\t     * \t\t\t@key \t{Integer} nid Unique identifier for this node, required:true, source:path\r\n\t     * \t\t\t@key \t{Array}  data The node object with updated information, required:true, source:post body\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function update(data) {\r\n\t    \t\r\n\t    \tvar updatePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath + '/' + data.nid;\r\n\t    \t\r\n\t    \tdelete data.nid;\r\n    \t\tvar updateData = { node: data };\r\n    \t\t\r\n    \t\t\r\n    \t\treturn BaseResource.update( updateData, updatePath, NodeChannel.pubUpdateConfirmed, NodeChannel.pubUpdateFailed);\r\n\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * delete\r\n\t     * \r\n\t     * Delete a node\r\n\t     * \r\n\t     * Method: DELETE\r\n\t     * Url: http://drupal_instance/api_endpoint/node/{UID}\r\n\t     * \r\n\t     * @params  {Object} data the requests data\r\n\t     * \t\t\t@key \t{Integer} nid The id of the node to delete, required:true, source:path\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function _delete(data) {\r\n\t    \tvar deletePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath + '/' + data.nid\r\n\t    \treturn BaseResource.delete(deletePath, NodeChannel.pubDeleteConfirmed,  NodeChannel.pubDeleteFailed);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * index\r\n\t     * \r\n\t     * List all nodes\r\n\t     * \r\n\t     * Method: GET\r\n\t\t * Url: http://drupal_instance/api_endpoint/node\r\n\t\t * \r\n\t\t * @params  {Object} data the requests data\r\n\t\t * \t\t@key \t{Integer} page The zero-based index of the page to get. defaults to 0., required:false, source:param\r\n\t\t * \t\t@key \t{Integer} pagesize Number of records to get per page., required:false, source:param\r\n\t\t * \t\t@key \t{String} fields The fields to get., required:false, source:param\r\n\t\t * \t\t@key \t{Array} parameters Parameters, required:false, source:param\r\n\t\t * \t\t\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function index(data) {\r\n\t    \tvar indexPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath + '/';\r\n\t    \treturn BaseResource.index(data, indexPath, NodeChannel.pubIndexConfirmed, NodeChannel.pubIndexFailed);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * files\r\n\t     * \r\n\t     * This method returns files associated with a node.\r\n\t     * \r\n\t     * Method: GET\r\n\t     * Url: http://drupal_instance/api_endpoint/node/files/{NID}/{FILE_CONTENTS}/{IMAGE_STYLES}\r\n\t     * \r\n\t     * @params  {Object} data the requests data\r\n\t     * \t\t\t @key {Integer} nid The nid of the node whose files we are getting, required:true, source:path\r\n\t\t * \t\t     @key {Integer} file_contents To return file contents or not., required:false, source:path\r\n\t\t * \t\t\t @key {Integer} image_styles To return image styles or not., required:false, source:path\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function files(data) {\r\n\t    \tvar filesPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath + '/' + data.nid + '/' + NodeResourceConstant.actions.files;\r\n\t    \t\r\n    \t\t//set file_contents value\r\n    \t\tfilesPath += '/'+( (data.file_contents)?1:0);\r\n    \t\t//set image_styles value\r\n    \t\tfilesPath += '/'+( (data.image_styles)?1:0);\r\n\t    \t\r\n\t    \tvar requestConfig = {\r\n\t    \t\t\turl : filesPath,\r\n\t    \t\t\tmethod : 'GET'\r\n\t    \t}\r\n\t    \t\r\n\t    \treturn BaseResource.request(requestConfig, NodeChannel.pubFilesConfirmed, NodeChannel.pubFilesFailed);\r\n\t    \t\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * comments\r\n\t     * \r\n\t     * This method returns the number of new comments on a given node.\r\n\t     * \r\n\t     * Method: GET\r\n\t     * Url: http://drupal_instance/api_endpoint/node/comments/{NID}\r\n\t     * \r\n\t     * @params  {Object} data the requests data\r\n\t     * \t\t\t@key {Integer} nid The node id to load comments for., required:true, source:path\r\n\t\t * \t\t\t@key {Integer} count Number of comments to load., required:false, source:param\r\n\t\t * \t\t\t@key {Integer} offset If count is set to non-zero value, you can pass also non-zero value for start. For example to get comments from 5 to 15, pass count=10 and start=5., required:false, source:param\r\n\t\t * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function comments(data) {\r\n\t    \r\n\t    \tvar commentsPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath + '/' + data.nid + '/' + NodeResourceConstant.actions.comments,\r\n\t    \t\trequestConfig = {\r\n\t    \t\t\turl : commentsPath,\r\n\t    \t\t\tmethod : 'GET'\r\n\t    \t\t};\r\n\t    \t\r\n\t    \tif( data.count || data.count == 0 || data.offset || data.offset == 0 ) {\r\n\t    \t\tcommentsPath += '?';\r\n\t    \t}\r\n\t    \t\r\n\t    \t//optional data\r\n    \t\tif(data.count || data.count == 0) {\r\n    \t\t\tcommentsPath += 'count='+data.count+',';\r\n    \t\t}\r\n    \t\t//@TODO check if we need count set to non-zero to use offset value\r\n    \t\tif(data.offset || data.offset == 0 ) {\r\n    \t\t\tcommentsPath += 'offset='+data.offset+',';\r\n    \t\t}\r\n\r\n\t    \treturn BaseResource.request(requestConfig, NodeChannel.pubCommentsConfirmed, NodeChannel.pubCommentsFailed);\r\n\t\t\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * attachFile\r\n\t     * \r\n\t     * This method returns the number of new comments on a given node.\r\n\t     * \r\n\t     * Method: POST \r\n\t     * Url: http://drupal_instance/api_endpoint/node/attach_file/{NID}\r\n\t     * \r\n\t     * @params  {Object} data the requests data\r\n\t     * \t\t\t@key {Integer} nid The nid of the node to attach a file to, required:true, source:path\r\n\t\t * \t\t\t@key {Sting} field_name The file field name, required:true, source:post body\r\n\t\t * \t\t\t@key {Integer} attach Attach the file(s) to the node. If FALSE, this clears ALL files attached, and attaches the files, required:false, source:post body\r\n\t\t * \t\t\t@key {Array} field_values The extra field values, required:false, source:post body\r\n\t\t * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function attachFile(data) {\r\n\t    \t//@TODO check how it works\r\n\t    \t\r\n\t    \tvar attachFilePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath + '/' + data.nid + '/' + NodeResourceConstant.actions.attachFile,\r\n\t    \t\trequestConfig = {\r\n\t    \t\t\turl : attachFilePath,\r\n\t    \t\t\tmethod : 'POST ',\r\n\t    \t\t\tdata : {\r\n\t    \t\t\t\tfield_name \t\t: field_name,\r\n\t    \t\t\t\tattach \t\t\t: data.attach,\r\n\t\t    \t\t\tfield_values \t: data.field_values\r\n\t    \t\t\t}\r\n\t    \t\t};\r\n\t    \t\r\n\t    \treturn BaseResource.request(attachFilePath, NodeChannel.pubAttachFileConfirmed, NodeChannel.pubAttachFileFailed);\r\n\t    };\r\n\t\t\r\n\t\t\t\t\t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n    \r\n    /**\r\n\t *  Constants for NodeResourceModules\r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in your app.js config section\r\n\t */\r\n\tvar NodeResourceConstant =  {\r\n\r\n\t\t// NOTE: This is the default alias aliases for your system resources defined in Drupal\r\n\t\tresourcePath : 'node',\r\n\t\t//actions of user resource\r\n\t\tactions : {\r\n\t\t\t//following actions are defined over their request method (GET, POST, PUT, DELETE) so they are commented out\r\n\t\t\t//retrieve \t: 'retrieve',\r\n\t\t\t//create \t: 'create',\r\n\t\t\t//update \t: 'update',\r\n\t\t\t//delete \t: 'delete',\r\n\t\t    //index \t: 'index',\r\n\t\t\t//\r\n\t\t\tfiles\t\t: 'files',\r\n\t\t\tcomments \t: 'comments',\r\n\t\t\tattach_file : 'attach_file'\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Node Constant Modules\r\n\t */\r\n\tangular\r\n\t    .module('d7-services.resources.node.resourceConstant', [])\r\n\t    .constant(\"NodeResourceConstant\", NodeResourceConstant);\r\n\t\r\n})();\r\n",";(function() {\r\n    'use strict';\r\n    \r\n\t/**\r\n\t * File modules bundle\r\n\t**/\r\n\tangular.module('d7-services.resources.file', \r\n\t\t\t['d7-services.resources.file.resourceConstant', \r\n\t\t\t 'd7-services.resources.file.resource', \r\n\t\t\t 'd7-services.resources.file.channelConstant', \r\n\t\t\t 'd7-services.resources.file.channel']);\r\n})();",";(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * File Channel Module\r\n\t */\r\n\tangular.module('d7-services.resources.file.channel', ['d7-services.commons.baseChannel', 'd7-services.resources.file.channelConstant'])\r\n\t\t   .factory('FileChannel', FileChannel);\r\n\r\n\t\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\tFileChannel.$inject = [ 'BaseChannel', 'FileChannelConstant' ];\r\n\t\r\n\t/**\r\n\t * Notification channel for file resource \r\n\t**/\r\n\t\r\n\t/** @ngInject */\r\n\tfunction FileChannel(BaseChannel, FileChannelConstant) {\r\n\t\r\n\t\t//setup and return service            \t\r\n        var fileChannelService = {\r\n\r\n        \t\t//Retrieve event\r\n        \t\tpubRetrieveConfirmed\t: pubRetrieveConfirmed,\r\n\t\t\t\tsubRetrieveConfirmed\t: subRetrieveConfirmed,\r\n\t\t\t\tpubRetrieveFailed\t\t: pubRetrieveFailed,\r\n\t\t\t\tsubRetrieveFailed \t\t: subRetrieveFailed,\r\n\t\t\t\t// Create action\r\n\t\t\t\tpubCreateConfirmed\t\t: pubCreateConfirmed,\r\n\t\t\t\tsubCreateConfirmed\t\t: subCreateConfirmed,\r\n\t\t\t\tpubCreateFailed\t\t\t: pubCreateFailed,\r\n\t\t\t\tsubCreateFailed \t\t: subCreateFailed,\r\n\t\t\t\t// Delete action\r\n\t\t\t\tpubDeleteConfirmed\t\t: pubDeleteConfirmed,\r\n\t\t\t\tsubDeleteConfirmed\t\t: subDeleteConfirmed,\r\n\t\t\t\tpubDeleteFailed\t\t\t: pubDeleteFailed,\r\n\t\t\t\tsubDeleteFailed \t\t: subDeleteFailed,\r\n\t\t\t\t// Index action\r\n\t\t\t\tpubIndexConfirmed\t\t: pubIndexConfirmed,\r\n\t\t\t\tsubIndexConfirmed\t\t: subIndexConfirmed,\r\n\t\t\t\tpubIndexFailed\t\t\t: pubIndexFailed,\r\n\t\t\t\tsubIndexFailed \t\t\t: subIndexFailed,\r\n\t\t\t\t// CreateRaw\r\n\t\t\t\tpubCreateRawConfirmed\t: pubCreateRawConfirmed,\r\n\t\t\t\tsubCreateRawConfirmed\t: subCreateRawConfirmed,\r\n\t\t\t\tpubCreateRawFailed\t\t: pubCreateRawFailed,\r\n\t\t\t\tsubCreateRawFailed \t\t: subCreateRawFailed\r\n\r\n        };\r\n        \r\n        return fileChannelService;\r\n\r\n        ////////////\r\n        \r\n        //File retrieve request functions\r\n        \r\n        /**\r\n\t\t * pubRetrieveConfirmed\r\n\t\t * \r\n\t\t * Publish the FileRetrieveConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubRetrieveConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(FileChannelConstant.retrieveConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subRetrieveConfirmed\r\n\t\t * \r\n\t\t * subscribe for the FileRetrieveConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for FileRetrieveConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subRetrieveConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( FileChannelConstant.retrieveConfirmed, _Scope, scopeHandler);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubRetrieveConfirmed\r\n\t\t * \r\n\t\t * Publish the FileRetrieveConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubRetrieveFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(FileChannelConstant.retrieveFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subRetrieveFailed\r\n\t\t * \r\n\t\t * subscribe for the FileRetrieveFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for FileRetrieveFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subRetrieveFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( FileChannelConstant.retrieveFailed, _Scope, scopeHandler);\r\n\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//File create request functions\r\n\r\n    \t/**\r\n    \t * pubCreateConfirmed\r\n    \t * \r\n    \t * Publish the FileCreateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCreateConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(FileChannelConstant.createConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCreateConfirmed\r\n    \t * \r\n    \t * subscribe for the FileCreateConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for FileCreateConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCreateConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( FileChannelConstant.createConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubCreateConfirmed\r\n    \t * \r\n    \t * Publish the FileCreateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCreateFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(FileChannelConstant.createFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCreateFailed\r\n    \t * \r\n    \t * subscribe for the FileCreateFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for FileCreateFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCreateFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( FileChannelConstant.createFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n  \t\r\n    \t//File delete request functions\r\n\r\n    \t/**\r\n    \t * pubDeleteConfirmed\r\n    \t * \r\n    \t * Publish the FileDeleteConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubDeleteConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(FileChannelConstant.deleteConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subDeleteConfirmed\r\n    \t * \r\n    \t * subscribe for the FileDeleteConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for FileDeleteConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subDeleteConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( FileChannelConstant.deleteConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubDeleteConfirmed\r\n    \t * \r\n    \t * Publish the FileDeleteConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubDeleteFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(FileChannelConstant.deleteFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subDeleteFailed\r\n    \t * \r\n    \t * subscribe for the FileDeleteFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for FileDeleteFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subDeleteFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( FileChannelConstant.deleteFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//File index request functions\r\n\r\n    \t/**\r\n    \t * pubIndexConfirmed\r\n    \t * \r\n    \t * Publish the FileIndexConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubIndexConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(FileChannelConstant.indexConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subIndexConfirmed\r\n    \t * \r\n    \t * subscribe for the FileIndexConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for FileIndexConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subIndexConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( FileChannelConstant.indexConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubIndexConfirmed\r\n    \t * \r\n    \t * Publish the FileIndexConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubIndexFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(FileChannelConstant.indexFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subIndexFailed\r\n    \t * \r\n    \t * subscribe for the FileIndexFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for FileIndexFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subIndexFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( FileChannelConstant.indexFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t    \t\r\n    \t//File create raw request functions\r\n\r\n    \t/**\r\n    \t * pubCreateRawConfirmed\r\n    \t * \r\n    \t * Publish the FileCreateRawConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCreateRawConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(FileChannelConstant.createRawConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCreateRawConfirmed\r\n    \t * \r\n    \t * subscribe for the FileCreateRawConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateRawConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for FileCreateRawConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCreateRawConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( FileChannelConstant.createRawConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubCreateRawConfirmed\r\n    \t * \r\n    \t * Publish the FileCreateRawConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCreateRawFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(FileChannelConstant.createRawFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCreateRawFailed\r\n    \t * \r\n    \t * subscribe for the FileCreateRawFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateRawFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for FileCreateRawFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCreateRawFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( FileChannelConstant.createRawFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n\r\n    /**\r\n\t *  Constants for FileChannel\r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in a config section of angular\r\n\t */\r\n\tvar FileChannelConstant =  {\r\n\t\t\t// Retrieve action\r\n\t\t\tretrieveConfirmed\t\t: 'event:drupal-file-retrieveConfirmed',\r\n\t\t\tretrieveFailed  \t\t: 'event:drupal-file-retrieveFailed',\r\n\t\t\t// Create action\r\n\t\t\tcreateConfirmed\t\t: 'event:drupal-file-createConfirmed',\r\n\t\t\tcreateFailed  \t\t\t: 'event:drupal-file-createFailed',\r\n\t\t\t// Delete action\r\n\t\t\tdeleteConfirmed\t\t: 'event:drupal-file-deleteConfirmed',\r\n\t\t\tdeleteFailed  \t\t\t: 'event:drupal-file-deleteFailed',\r\n\t\t\t// Index action\r\n\t\t\tindexConfirmed\t\t\t: 'event:drupal-file-indexConfirmed',\r\n\t\t\tindexFailed  \t\t\t: 'event:drupal-file-indexFailed',\r\n\t\t\t// Files action\r\n\t\t\tfilesConfirmed\t\t\t: 'event:drupal-file-filesConfirmed',\r\n\t\t\tfilesFailed  \t\t\t: 'event:drupal-file-filesFailed',\r\n\t\t\t// Comments action\r\n\t\t\tcommentsConfirmed\t\t: 'event:drupal-file-commentsConfirmed',\r\n\t\t\tcommentsFailed  \t\t: 'event:drupal-file-commentsFailed',\r\n\t\t\t// Create raw action\r\n\t\t\tcreateRawConfirmed\t\t: 'event:drupal-file-createRawConfirmed',\r\n\t\t\tcreateRawFailed  \t\t: 'event:drupal-file-createRawFailed',\r\n \t\t\tattachFileFailed  \t\t: 'event:drupal-file-attachFileFailed'\r\n\t};\r\n    \r\n\t/**\r\n\t * File Channel Constant\r\n\t */\r\n\tangular\r\n\t    .module('d7-services.resources.file.channelConstant', [])\r\n\t    .constant(\"FileChannelConstant\", FileChannelConstant);\r\n\r\n})();\r\n",";(function() {\r\n    'use strict';\r\n\r\n\t/**\r\n\t * File Resource Modules\r\n\t * \r\n\t * see sourcecode in services/resources/file_resource.inc\r\n\t**/\r\n    angular.module('d7-services.resources.file.resource', ['d7-services.commons.configurations', 'd7-services.resources.file.resourceConstant', 'd7-services.resources.file.channel', 'd7-services.commons.baseResource'])\r\n    \r\n    /**\r\n\t * FileResource\r\n\t * \r\n\t * This service mirrors the Drupal file resource of the services 3.x module.\r\n\t * To use this you have to set following line in your Drupal CORS module settings\r\n\t * your_api_endpoint/file/*|<mirror>|POST|Content-Type,Authorization|true\r\n\t * \r\n\t**/\r\n    .factory('FileResource', FileResource);\r\n\r\n    /**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t**/\r\n    FileResource.$inject = ['$http', 'BaseResource', 'DrupalApiConstant', 'FileResourceConstant', 'FileChannel'];\r\n    \r\n\t/** @ngInject */\r\n\tfunction FileResource($http, BaseResource, DrupalApiConstant, FileResourceConstant, FileChannel) { \r\n\t\t\r\n\t\t//setup and return service            \t\r\n        var fileResourceService = {\r\n        \t//CRUD operations\r\n        \tretrieve \t: retrieve,\r\n    \t\tcreate \t\t: create,\r\n    \t\tdelete \t\t: _delete,\r\n    \t    index \t\t: index,\r\n    \t    //Actions\r\n    \t    createRaw\t\t: createRaw,\r\n        };\r\n        \r\n        return fileResourceService;\r\n\r\n        ////////////\r\n        \r\n        /**\r\n\t\t * retrieve\r\n\t\t * \r\n\t\t * Retrieve a file\r\n\t\t * \r\n\t\t * Method: GET \r\n\t\t * Url: http://www.drupalionic.org/drupal_test/api/v1/file/{FID}\r\n\t\t * \r\n\t\t * @params  {Object} data The requests data\r\n\t\t * \t\t\t@key \t{Integer} fid FID of the file to be loaded, required:true, source:path\r\n\t\t * \t\t\t@key \t{Integer} file_contents To return file contents or not., required:false, source:param\r\n\t\t * \t\t\t@key \t{Integer} image_styles To return image styles or not., required:false, source:param\r\n\t\t * \r\n\t\t * @return \t{Promise} A file object\r\n\t\t * \r\n\t\t**/\r\n    \tfunction retrieve(data) {\r\n    \t\tvar retrievePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + FileResourceConstant.resourcePath + '/' + data.fid;\r\n    \t\t\r\n    \t\tif( data.file_contents || data.image_styles ) {\r\n    \t\t\tretrievePath += '?';\r\n\t    \t}\r\n\t    \t\r\n\t    \t//optional data\r\n    \t\tif(data.file_contents) {\r\n    \t\t\tretrievePath += 'file_contents='+((data.file_contents)?1:0)+',';\r\n    \t\t}\r\n    \t\t\r\n    \t\tif(data.image_styles) {\r\n    \t\t\tretrievePath += 'image_styles='+((data.image_styles)?1:0)+',';\r\n    \t\t}\r\n    \t\t\r\n    \t\t\r\n    \t\treturn BaseResource.retrieve( retrievePath,FileChannel.pubRetrieveConfirmed,  FileChannel.pubRetrieveFailed);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * create\r\n\t     * \r\n\t     * Create a file with base64 encoded data\r\n\t     * \r\n\t     * Method: POST\r\n\t     * Url: http://drupal_instance/api_endpoint/file\r\n\t     * \r\n\t     * @params  {Array} file An array representing a file., required:true, source:post body\r\n\t     * \r\n\t     * @return \t{Promise} The file object of the newly created file.\r\n\t     *\r\n\t    **/\r\n\t    function create(data) {\r\n\t    \t\r\n\t    \tvar createPath \t= DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + FileResourceConstant.resourcePath,\r\n\t    \t\tformData \t= new FormData();\r\n\r\n    \t\t\r\n    \t\tif(data.filename) {formData.append('filename', data.filename);}\r\n    \t\tif(data.file) {formData.append('file', data.file);}\r\n    \t\tif(data.filesize) {formData.append('filesize', \"\" + data.filesize);}\r\n    \t\tif(data.image_file_name) {formData.append('filepath', DrupalApiConstant.publicFilePath + data.image_file_name); }\r\n    \t\t\r\n    \t\tvar requestConfig = {\r\n    \t\t\t\tmethod : 'POST',\r\n    \t\t\t\turl : createPath,\r\n\t\t\t\t\ttransformRequest: angular.identity,\r\n\t\t\t\t\theaders: {'Content-Type': undefined},\r\n\t\t\t\t\tdata: formData\r\n\t\t\t}\r\n    \t\t\r\n    \t\treturn BaseResource.request(requestConfig, FileChannel.pubCreateConfirmed, FileChannel.pubCreateFailed);\r\n\r\n\t    };\r\n\t        \r\n\t    \r\n\t    /**\r\n\t     * delete\r\n\t     * \r\n\t     * Delete a file\r\n\t     * \r\n\t     * Method: DELETE\r\n\t     * Url: http://drupal_instance/api_endpoint/file/{FID}\r\n\t     * \r\n\t     * @params  {Object} data the requests data\r\n\t     * \t\t\t@key \t{Integer} fid The id of the file to delete, required:true, source:path\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function _delete(data) {\r\n\t    \tvar deletePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + FileResourceConstant.resourcePath + '/' + data.fid\r\n\t    \treturn BaseResource.delete(deletePath, FileChannel.pubDeleteConfirmed,  FileChannel.pubDeleteFailed);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * index\r\n\t     * \r\n\t     * List all files\r\n\t     * \r\n\t     * Method: GET\r\n\t\t * Url: http://drupal_instance/api_endpoint/file\r\n\t\t * \r\n\t\t * @params  {Object} data the requests data\r\n\t\t * \t\t@key \t{Integer} page The zero-based index of the page to get. defaults to 0., required:false, source:param\r\n\t\t * \t\t@key \t{Integer} pagesize Number of records to get per page., required:false, source:param\r\n\t\t * \t\t@key \t{String} fields The fields to get., required:false, source:param\r\n\t\t * \t\t@key \t{Array} parameters Parameters, required:false, source:param\r\n\t\t * \t\t\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function index(data) {\r\n\t    \tvar indexPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + FileResourceConstant.resourcePath + '/';\r\n\t    \treturn BaseResource.index(data, indexPath, FileChannel.pubIndexConfirmed, FileChannel.pubIndexFailed);\r\n\t    };\r\n\t    \r\n\t    \r\n\t    /**\r\n\t     * createRaw\r\n\t     * \r\n\t     * Create a file with raw data.\r\n\t     * \r\n\t     * Method: POST \r\n\t\t * Url: http://drupal_instance/api_endpoint/file/create_raw\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function createRaw(data) {\r\n\t    \tvar createRawPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + FileResourceConstant.resourcePath + '/create_raw';\r\n\t    \treturn BaseResource.request(null, createRawPath, FileChannel.pubIndexConfirmed, FileChannel.pubIndexFailed);\r\n\t    };\r\n\t    \r\n\t}\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n    \r\n    /**\r\n\t *  Constants for FileResourceModules\r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in your app.js config section\r\n\t */\r\n\tvar FileResourceConstant =  {\r\n\r\n\t\t// NOTE: if you set custom aliases for your recources in [your.domain.org]/admin/structure/services/list/[machinereadable_name_of_endpoint]/resources change value here\r\n\t\tresourcePath : 'file',\r\n\t\t//actions of file resource\r\n\t\tactions : {\r\n\t\t\t//retrieve \t: 'retrieve',\r\n\t\t\t//create\t: 'create',\r\n\t\t\t//delete\t: 'delete',\r\n\t\t\t//index \t: 'index',\r\n\t\t\tcreateRaw  : 'create_raw'\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * File Constant Modules\r\n\t */\r\n\tangular\r\n\t    .module('d7-services.resources.file.resourceConstant', [])\r\n\t    .constant(\"FileResourceConstant\", FileResourceConstant);\r\n\t\r\n})();\r\n",";(function() {\r\n    'use strict';\r\n    \r\n\t/**\r\n\t * User modules bundle\r\n\t**/\r\n\tangular\r\n\t    .module('d7-services.resources.taxonomy_term', \r\n\t    \t\t['d7-services.resources.taxonomy_term.resourceConstant', \r\n\t    \t\t 'd7-services.resources.taxonomy_term.resource', \r\n\t    \t\t 'd7-services.resources.taxonomy_term.channelConstant', \r\n\t    \t\t 'd7-services.resources.taxonomy_term.channel']);\r\n})();",";(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * TaxonomyTerm Channel Module\r\n\t */\r\n\tangular.module('d7-services.resources.taxonomy_term.channel', ['d7-services.commons.baseChannel', 'd7-services.resources.taxonomy_term.channelConstant'])\r\n\t\t   .factory('TaxonomyTermChannel', TaxonomyTermChannel);\r\n\r\n\t\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\tTaxonomyTermChannel.$inject = [ 'BaseChannel', 'TaxonomyTermChannelConstant' ];\r\n\t\r\n\t/**\r\n\t * Notification channel for taxonomy_term resource \r\n\t**/\r\n\t\r\n\t/** @ngInject */\r\n\tfunction TaxonomyTermChannel(BaseChannel, TaxonomyTermChannelConstant) {\r\n\t\r\n\t\t//setup and return service            \t\r\n        var taxonomy_termChannelService = {\r\n        \t\t\r\n        \t//taxonomy_term retrieve request\r\n    \t\tpubRetrieveConfirmed \t: pubRetrieveConfirmed,\r\n    \t\tsubRetrieveConfirmed\t: subRetrieveConfirmed,\r\n    \t\tpubRetrieveFailed \t\t: pubRetrieveFailed,\r\n    \t\tsubRetrieveFailed\t\t: subRetrieveFailed,\r\n    \t\t\r\n        \t//taxonomy_term create request\r\n        \tpubCreateConfirmed \t\t: pubCreateConfirmed,\r\n        \tsubCreateConfirmed\t\t: subCreateConfirmed,\r\n        \tpubCreateFailed \t\t: pubCreateFailed,\r\n        \tsubCreateFailed\t\t\t: subCreateFailed,\r\n        \t\r\n        \t//taxonomy_term update request\r\n        \tpubUpdateConfirmed \t\t: pubUpdateConfirmed,\r\n        \tsubUpdateConfirmed\t\t: subUpdateConfirmed,\r\n        \tpubUpdateFailed \t\t: pubUpdateFailed,\r\n        \tsubUpdateFailed\t\t\t: subUpdateFailed,\r\n        \t\r\n        \t//taxonomy_term delete request\r\n        \tpubDeleteConfirmed \t\t: pubDeleteConfirmed,\r\n        \tsubDeleteConfirmed\t\t: subDeleteConfirmed,\r\n        \tpubDeleteFailed \t\t: pubDeleteFailed,\r\n        \tsubDeleteFailed\t\t\t: subDeleteFailed,\r\n        \t\r\n        \t//taxonomy_term index request\r\n        \tpubIndexConfirmed \t\t: pubIndexConfirmed,\r\n        \tsubIndexConfirmed\t\t: subIndexConfirmed,\r\n        \tpubIndexFailed \t\t\t: pubIndexFailed,\r\n        \tsubIndexFailed\t\t\t: subIndexFailed,\r\n        \t\r\n        \t//taxonomy_term selectNodes request\r\n        \tpubSelectNodesConfirmed \t\t: pubSelectNodesConfirmed,\r\n        \tsubSelectNodesConfirmed\t\t\t: subSelectNodesConfirmed,\r\n        \tpubSelectNodesFailed \t\t\t: pubSelectNodesFailed,\r\n        \tsubSelectNodesFailed\t\t\t: subSelectNodesFailed,\r\n        \t\r\n        };\r\n        \r\n        return taxonomy_termChannelService;\r\n\r\n        ////////////\r\n        \r\n        //TaxonomyTerm retrieve request functions\r\n        \r\n        /**\r\n\t\t * pubRetrieveConfirmed\r\n\t\t * \r\n\t\t * Publish the TaxonomyTermRetrieveConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubRetrieveConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.retrieveConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subRetrieveConfirmed\r\n\t\t * \r\n\t\t * subscribe for the TaxonomyTermRetrieveConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for TaxonomyTermRetrieveConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subRetrieveConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.retrieveConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubRetrieveConfirmed\r\n\t\t * \r\n\t\t * Publish the TaxonomyTermRetrieveConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubRetrieveFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.retrieveFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subRetrieveFailed\r\n\t\t * \r\n\t\t * subscribe for the TaxonomyTermRetrieveFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for TaxonomyTermRetrieveFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subRetrieveFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.retrieveFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//TaxonomyTerm create request functions\r\n\r\n    \t/**\r\n    \t * pubCreateConfirmed\r\n    \t * \r\n    \t * Publish the TaxonomyTermCreateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCreateConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.createConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCreateConfirmed\r\n    \t * \r\n    \t * subscribe for the TaxonomyTermCreateConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyTermCreateConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCreateConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.createConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubCreateConfirmed\r\n    \t * \r\n    \t * Publish the TaxonomyTermCreateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCreateFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.createFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCreateFailed\r\n    \t * \r\n    \t * subscribe for the TaxonomyTermCreateFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyTermCreateFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCreateFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.createFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//TaxonomyTerm update request functions\r\n\r\n    \t/**\r\n    \t * pubUpdateConfirmed\r\n    \t * \r\n    \t * Publish the TaxonomyTermUpdateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubUpdateConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.updateConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subUpdateConfirmed\r\n    \t * \r\n    \t * subscribe for the TaxonomyTermUpdateConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyTermUpdateConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subUpdateConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.updateConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n    \t/**\r\n    \t * pubUpdateConfirmed\r\n    \t * \r\n    \t * Publish the TaxonomyTermUpdateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubUpdateFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.updateFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subUpdateFailed\r\n    \t * \r\n    \t * subscribe for the TaxonomyTermUpdateFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyTermUpdateFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subUpdateFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.updateFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//TaxonomyTerm delete request functions\r\n\r\n    \t/**\r\n    \t * pubDeleteConfirmed\r\n    \t * \r\n    \t * Publish the TaxonomyTermDeleteConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubDeleteConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.deleteConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subDeleteConfirmed\r\n    \t * \r\n    \t * subscribe for the TaxonomyTermDeleteConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyTermDeleteConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subDeleteConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.deleteConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubDeleteConfirmed\r\n    \t * \r\n    \t * Publish the TaxonomyTermDeleteConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubDeleteFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.deleteFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subDeleteFailed\r\n    \t * \r\n    \t * subscribe for the TaxonomyTermDeleteFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyTermDeleteFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subDeleteFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.deleteFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//TaxonomyTerm index request functions\r\n\r\n    \t/**\r\n    \t * pubIndexConfirmed\r\n    \t * \r\n    \t * Publish the TaxonomyTermIndexConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubIndexConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.indexConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subIndexConfirmed\r\n    \t * \r\n    \t * subscribe for the TaxonomyTermIndexConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyTermIndexConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subIndexConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.indexConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubIndexConfirmed\r\n    \t * \r\n    \t * Publish the TaxonomyTermIndexConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubIndexFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.indexFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subIndexFailed\r\n    \t * \r\n    \t * subscribe for the TaxonomyTermIndexFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyTermIndexFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subIndexFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.indexFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//TaxonomyTerm selectNodes request functions\r\n\r\n    \t/**\r\n    \t * pubSelectNodesConfirmed\r\n    \t * \r\n    \t * Publish the TaxonomyTermSelectNodesConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubSelectNodesConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.selectNodesConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subSelectNodesConfirmed\r\n    \t * \r\n    \t * subscribe for the TaxonomyTermSelectNodesConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subSelectNodesConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyTermSelectNodesConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subSelectNodesConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.selectNodesConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubSelectNodesConfirmed\r\n    \t * \r\n    \t * Publish the TaxonomyTermSelectNodesConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubSelectNodesFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyTermChannelConstant.selectNodesFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subSelectNodesFailed\r\n    \t * \r\n    \t * subscribe for the TaxonomyTermSelectNodesFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subSelectNodesFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyTermSelectNodesFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subSelectNodesFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyTermChannelConstant.selectNodesFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n\r\n    /**\r\n\t *  Constants for TaxonomyTermChannel\r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in a config section of angular\r\n\t */\r\n\tvar TaxonomyTermChannelConstant =  {\r\n\t \t\t// Retrieve action\r\n \t\t\tretrieveConfirmed\t\t: 'event:drupal-taxonomy_term-retrieveConfirmed',\r\n \t\t\tretrieveFailed\t\t\t: 'event:drupal-taxonomy_term-retrieveFailed',\r\n \t\t\t// Create action\r\n \t\t\tcreateConfirmed\t\t\t: 'event:drupal-taxonomy_term-createConfirmed',\r\n \t\t\tcreateFailed\t\t\t: 'event:drupal-taxonomy_term-createFailed',\r\n \t\t\t// Update action\r\n \t\t\tupdateConfirmed\t\t\t: 'event:drupal-taxonomy_term-updateConfirmed',\r\n \t\t\tupdateFailed\t\t\t: 'event:drupal-taxonomy_term-updateFailed',\r\n \t\t\t// Delete action\t\r\n \t\t\tdeleteConfirmed\t\t\t: 'event:drupal-taxonomy_term-deleteConfirmed',\r\n \t\t\tdeleteFailed\t\t\t: 'event:drupal-taxonomy_term-deleteFailed',\r\n \t\t\t// Index action\r\n \t\t\tindexConfirmed\t\t\t: 'event:drupal-taxonomy_term-indexConfirmed',\r\n \t\t\tindexFailed\t\t\t\t: 'event:drupal-taxonomy_term-indexFailed',\r\n \t\t\t// SelectNodes action\r\n \t\t\tselectNodesConfirmed\t: 'event:drupal-taxonomy_term-selectNodesConfirmed',\r\n \t\t\tselectNodesFailed\t\t: 'event:drupal-taxonomy_term-selectNodesFailed',\r\n\r\n\t};\r\n    \r\n\t/**\r\n\t * TaxonomyTerm Channel Constant\r\n\t */\r\n\tangular\r\n\t    .module('d7-services.resources.taxonomy_term.channelConstant', [])\r\n\t    .constant(\"TaxonomyTermChannelConstant\", TaxonomyTermChannelConstant);\r\n\r\n})();\r\n",";(function() {\r\n    'use strict';\r\n\r\n\t/**\r\n\t * TaxonomyTerm Resource Modules\r\n\t * \r\n\t * see sourcecode in services/resources/taxonomy_term_resource.inc\r\n\t**/\r\n    angular.module('d7-services.resources.taxonomy_term.resource', ['d7-services.commons.configurations', 'd7-services.resources.taxonomy_term.resourceConstant', 'd7-services.resources.taxonomy_term.channel', 'd7-services.commons.baseResource'])\r\n    \r\n    /**\r\n\t * TaxonomyTermResource\r\n\t * \r\n\t * This service mirrors the Drupal taxonomy_term resource of the services 3.x module.\r\n\t * To use this you have to set following line in your Drupal CORS module settings\r\n\t * your_api_endpoint/taxonomy_term/*|<mirror>|POST|Content-Type,Authorization|true\r\n\t * \r\n\t**/\r\n    .factory('TaxonomyTermResource', TaxonomyTermResource);\r\n\r\n    /**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t**/\r\n    TaxonomyTermResource.$inject = ['$http', 'BaseResource', 'DrupalApiConstant', 'TaxonomyTermResourceConstant', 'TaxonomyTermChannel'];\r\n    \r\n\t/** @ngInject */\r\n\tfunction TaxonomyTermResource($http, BaseResource, DrupalApiConstant, TaxonomyTermResourceConstant, TaxonomyTermChannel) { \r\n\t\t\r\n\t\t//setup and return service            \t\r\n        var taxonomy_termResourceService = {\r\n        \t//CRUD operations\r\n        \tretrieve \t: retrieve,\r\n    \t\tcreate \t\t: create,\r\n    \t\tupdate \t\t: update,\r\n    \t\tdelete \t\t: _delete,\r\n    \t    index \t\t: index,\r\n    \t    //Actions\r\n    \t    selectNodes\t: selectNodes,\r\n        \t\r\n        };\r\n        \r\n        return taxonomy_termResourceService;\r\n\r\n        ////////////\r\n        \r\n        /**\r\n\t\t * retrieve\r\n\t\t * \r\n\t\t * Retrieve a term\r\n\t\t * \r\n\t\t * Method: GET \r\n\t\t * Url: http://drupal_instance/api_endpoint/taxonomy_term/{TID}\r\n\t\t * \r\n\t\t * @params  {Object} data The requests data\r\n\t\t * \t\t\t@key \t{Integer} tid TID of the taxonomy_term to get, required:true, source:path\r\n\t\t * \r\n\t\t * @return \t{Promise} A taxonomy_term object\r\n\t\t * \r\n\t\t**/\r\n    \tfunction retrieve(data) {\r\n    \t\tvar retrievePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyTermResourceConstant.resourcePath + '/' + data.tid;\r\n    \t\treturn BaseResource.retrieve( retrievePath,TaxonomyTermChannel.pubRetrieveConfirmed,  TaxonomyTermChannel.pubRetrieveFailed);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * create\r\n\t     * \r\n\t     * Create a term\r\n\t     * This function uses drupal_form_submit() and as such expects all input to match\r\n\t     * the submitting form in question.\r\n\t     * \r\n\t     * Method: POST\r\n\t     * Url: http://drupal_instance/api_endpoint/taxonomy_term\r\n\t     * \r\n\t     * @params  {Object} term The data of the taxonomy_term to create, required:true, source:post body\r\n\t     * \r\n\t\t *\r\n\t\t *  Roles can be passed in a roles property which is an associative\r\n\t\t *  array formatted with '<role id>' => '<role id>', not including the authenticated taxonomy_term role, which is given by default.\r\n\t     * \r\n\t     * @return \t{Promise} The taxonomy_term object of the newly created taxonomy_term.\r\n\t     *\r\n\t    **/\r\n\t    function create(term) {\r\n\t    \t\r\n\t    \tvar createPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyTermResourceConstant.resourcePath;\r\n\r\n\t    \tvar createData \t= { \r\n    \t\t\t\tterm : term \r\n    \t\t};\r\n\r\n    \t\treturn BaseResource.create( createData, createPath,  TaxonomyTermChannel.pubCreateConfirmed, TaxonomyTermChannel.pubCreateFailed);\r\n\r\n\t    };\r\n\t        \r\n\t    /**\r\n\t     * update\r\n\t     * \r\n\t     * Update a term\r\n\t     * \r\n\t     * Method: PUT\r\n\t     * Url: http://drupal_instance/api_endpoint/taxonomy_term/{TID}\r\n\t     * \r\n\t     * @params  {Object} data The requests data\r\n\t     * \t\t\t@key \t{Integer} tid The unique identifier for this taxonomy term., required:true, source:path\r\n\t     * \t\t\t@key \t{Array}  data The taxonomy term data to update, required:true, source:post body\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function update(data) {\r\n\t    \t\r\n\t    \tvar updatePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyTermResourceConstant.resourcePath + '/' + data.tid;\r\n\t    \t\r\n    \t\tvar updateData \t= {term : data};\r\n    \t\t\r\n    \t\treturn BaseResource.update( updateData, updatePath, TaxonomyTermChannel.pubUpdateConfirmed, TaxonomyTermChannel.pubUpdateFailed);\r\n\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * delete\r\n\t     * \r\n\t     * Delete the term\r\n\t     * \r\n\t     * Method: DELETE\r\n\t     * Url: http://drupal_instance/api_endpoint/taxonomy_term/{TID}\r\n\t     * \r\n\t     * @params  {Object} data the requests data\r\n\t     * \t\t\t@key \t{Integer} tid The id of the taxonomy_term to delete, required:true, source:path\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function _delete(data) {\r\n\t    \tvar deletePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyTermResourceConstant.resourcePath + '/' + data.tid\r\n\t    \treturn BaseResource.delete(deletePath, TaxonomyTermChannel.pubDeleteConfirmed, TaxonomyTermChannel.pubDeleteFailed);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * index\r\n\t     * \r\n\t     * List all taxonomy_terms\r\n\t     * \r\n\t     * Method: GET\r\n\t\t * Url: http://drupal_instance/api_endpoint/taxonomy_term\r\n\t\t * \r\n\t\t * @params  {Object} data the requests data\r\n\t\t * \t\t@key \t{Integer} page The zero-based index of the page to get. defaults to 0., required:false, source:param\r\n\t\t * \t\t@key \t{Integer} pagesize Number of records to get per page., required:false, source:param\r\n\t\t * \t\t@key \t{String} fields The fields to get., required:false, source:param\r\n\t\t * \t\t@key \t{Array} parameters Parameters, required:false, source:param\r\n\t\t * \t\t\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function index(data) {\r\n\t    \tvar indexPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyTermResourceConstant.resourcePath + '/';\r\n\t    \treturn BaseResource.index(data, indexPath,TaxonomyTermChannel.pubIndexConfirmed,  TaxonomyTermChannel.pubIndexFailed);\r\n\t    };\r\n\t    \r\n\t\t/**\r\n\t\t * selectNodes\r\n\t\t * \r\n\t\t * Returns all nodes with provided taxonomy id.\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/taxonomy_term/selectNodes\r\n\t\t * \r\n\t\t * @params  {Object} data the requests data\r\n\t\t * \t\t@key \t{Integer} tid The vocabulary ids to retrieve, separated by comma., required:true, source:post body\r\n\t\t * \t\t@key \t{Integer} pager Whether the nodes are to be used with a pager (the case on most Drupal pages) or not (in an XML feed, for example)., required:false, source:post body\r\n\t\t * \t\t@key \t{String} limit Maximum number of nodes to find., required:false, source:post body\r\n\t\t * \t\t@key \t{Array} order The order clause for the query that retrieve the nodes., required:false, source:post body\r\n\t\t * \t\t\r\n\t\t * \r\n\t\t * @return \t{Promise}\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction selectNodes(data) {\r\n\t\t\tvar  pathToSelectNodes = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyTermResourceConstant.resourcePath + '/' + TaxonomyTermResourceConstant.actions.selectNodes,\r\n\t\t\t\t requestConfig = {\r\n\t\t\t     \turl\t\t: pathToSelectNodes,\r\n\t\t\t     \tmethod\t: 'POST',\r\n\t\t\t     \tdata : data\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\treturn BaseResource.request(requestConfig,TaxonomyTermChannel.pubSelectNodesConfirmed,  TaxonomyTermChannel.pubSelectNodesFailed);\r\n\r\n\t\t};\r\n\t\t\t\t\t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n    \r\n    /**\r\n\t *  Constants for TaxonomyTermResourceModules\r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in your app.js config section\r\n\t */\r\n\tvar TaxonomyTermResourceConstant =  {\r\n\r\n\t\t// NOTE: This is the default alias aliases for your system resources defined in Drupal\r\n\t\tresourcePath : 'taxonomy_term',\r\n\t\t//actions of taxonomy_term resource\r\n\t\tactions : {\r\n\t\t\t//following actions are defined over their request method (GET, POST, PUT, DELETE) so they are commented out\r\n\t\t\t//retrieve \t\t\t\t: 'retrieve',\r\n\t\t\t//create \t\t\t\t: 'create',\r\n\t\t\t//update \t\t\t\t: 'update',\r\n\t\t\t//delete \t\t\t\t: 'delete',\r\n\t\t    //index \t\t\t\t: 'index',\r\n\t\t\t//\r\n\t\t\tselectNodes \t\t\t: 'selectNodes',\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * TaxonomyTerm Constant Modules\r\n\t */\r\n\tangular\r\n\t    .module('d7-services.resources.taxonomy_term.resourceConstant', [])\r\n\t    .constant(\"TaxonomyTermResourceConstant\", TaxonomyTermResourceConstant);\r\n\t\r\n})();\r\n","(function() {\r\n    'use strict';\r\n    \r\n\t/**\r\n\t * System modules bundle\r\n\t**/\r\n\tangular.module('d7-services.resources.system', \r\n\t\t\t['d7-services.resources.system.resourceConstant', \r\n\t\t\t 'd7-services.resources.system.resource', \r\n\t\t\t 'd7-services.resources.system.channelConstant', \r\n\t\t\t 'd7-services.resources.system.channel']);\r\n})();",";(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * System Channel Module\r\n\t */\r\n\tangular.module('d7-services.resources.system.channel', ['d7-services.commons.baseChannel', 'd7-services.resources.system.channelConstant'])\r\n\t\t   .factory('SystemChannel', SystemChannel);\r\n\r\n\t\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\tSystemChannel.$inject = [ 'BaseChannel', 'SystemChannelConstant' ];\r\n\t\r\n\t/**\r\n\t * Notification channel for system resource \r\n\t**/\r\n\t/** @ngInject */\r\n\tfunction SystemChannel(BaseChannel, SystemChannelConstant) {\r\n\t\r\n\t\t//setup and return service            \t\r\n        var systemChannelService = {\r\n        \t\t\r\n    \t\tpubConnectConfirmed \t: pubConnectConfirmed,\r\n    \t\tsubConnectConfirmed\t\t: subConnectConfirmed,\r\n    \t\tpubConnectFailed \t\t: pubConnectFailed,\r\n    \t\tsubConnectFailed\t\t: subConnectFailed,\r\n    \t\t\r\n    \t\tpubGetVariableConfirmed \t: pubGetVariableConfirmed,\r\n    \t\tsubGetVariableConfirmed\t\t: subGetVariableConfirmed,\r\n    \t\tpubGetVariableFailed \t\t: pubGetVariableFailed,\r\n    \t\tsubGetVariableFailed\t\t: subGetVariableFailed,\r\n    \t\t\r\n    \t\tpubSetVariableConfirmed \t: pubSetVariableConfirmed,\r\n    \t\tsubSetVariableConfirmed\t\t: subSetVariableConfirmed,\r\n    \t\tpubSetVariableFailed \t\t: pubSetVariableFailed,\r\n    \t\tsubSetVariableFailed\t\t: subSetVariableFailed,\r\n    \t\t\r\n    \t\tpubDelVariableConfirmed \t: pubDelVariableConfirmed,\r\n    \t\tsubDelVariableConfirmed\t\t: subDelVariableConfirmed,\r\n    \t\tpubDelVariableFailed \t\t: pubDelVariableFailed,\r\n    \t\tsubDelVariableFailed\t\t: subDelVariableFailed\r\n        };\r\n        \r\n        return systemChannelService;\r\n\r\n        ////////////\r\n        \r\n        //System connect request functions\r\n        \r\n        /**\r\n\t\t * pubConnectConfirmed\r\n\t\t * \r\n\t\t * Publish the SystemConnectConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubConnectConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(SystemChannelConstant.connectConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t /**\r\n\t\t * subConnectConfirmed\r\n\t\t * \r\n\t\t * subscribe for the SystemConnectConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subConnectConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for SystemConnectConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subConnectConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( SystemChannelConstant.connectConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubConnectConfirmed\r\n\t\t * \r\n\t\t * Publish the SystemConnectConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubConnectFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(SystemChannelConstant.connectFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subConnectFailed\r\n\t\t * \r\n\t\t * subscribe for the SystemConnectFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subConnectFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for SystemConnectFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subConnectFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( SystemChannelConstant.connectFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//System get_variable request functions\r\n        \r\n        /**\r\n\t\t * pubGetVariableConfirmed\r\n\t\t * \r\n\t\t * Publish the SystemGetVariableConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubGetVariableConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(SystemChannelConstant.getVariableConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t /**\r\n\t\t * subGetVariableConfirmed\r\n\t\t * \r\n\t\t * subscribe for the SystemGetVariableConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subGetVariableConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for SystemGetVariableConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subGetVariableConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( SystemChannelConstant.getVariableConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubGetVariableFailed\r\n\t\t * \r\n\t\t * Publish the SystemGetVariableFailed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubGetVariableFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(SystemChannelConstant.getVariableFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subGetVariableFailed\r\n\t\t * \r\n\t\t * subscribe for the SystemGetVariableFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subGetVariableFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for SystemGetVariableFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subGetVariableFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( SystemChannelConstant.getVariableFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//System set_variable request functions\r\n        \r\n        /**\r\n\t\t * pubSetVariableConfirmed\r\n\t\t * \r\n\t\t * Publish the SystemSetVariableConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubSetVariableConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(SystemChannelConstant.setVariableConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t /**\r\n\t\t * subSetVariableConfirmed\r\n\t\t * \r\n\t\t * subscribe for the SystemSetVariableConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subSetVariableConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for SystemSetVariableConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subSetVariableConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( SystemChannelConstant.setVariableConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubSetVariableFailed\r\n\t\t * \r\n\t\t * Publish the SystemSetVariableFailed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubSetVariableFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(SystemChannelConstant.setVariableFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subSetVariableFailed\r\n\t\t * \r\n\t\t * subscribe for the SystemSetVariableFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subSetVariableFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for SystemSetVariableFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subSetVariableFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( SystemChannelConstant.setVariableFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//System del_variable request functions\r\n        \r\n        /**\r\n\t\t * pubDelVariableConfirmed\r\n\t\t * \r\n\t\t * Publish the SystemDelVariableConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubDelVariableConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(SystemChannelConstant.delVariableConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t /**\r\n\t\t * subDelVariableConfirmed\r\n\t\t * \r\n\t\t * subscribe for the SystemDelVariableConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subDelVariableConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for SystemDelVariableConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subDelVariableConfirmed(_Scope, scopeHandler) {\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( SystemChannelConstant.delVariableConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubDelVariableFailed\r\n\t\t * \r\n\t\t * Publish the SystemDelVariableFailed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubDelVariableFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(SystemChannelConstant.delVariableFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subDelVariableFailed\r\n\t\t * \r\n\t\t * subscribe for the SystemDelVariableFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subDelVariableFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for SystemDelVariableFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subDelVariableFailed(_Scope, scopeHandler) {\r\n     \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( SystemChannelConstant.delVariableFailed, _Scope, scopeHandler);\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n\r\n    /**\r\n\t *  Constants for SystemChannel\r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in a config section of angular\r\n\t */\r\n\tvar SystemChannelConstant =  {\r\n \t\t// Connect action\r\n \t\tconnectConfirmed\t: 'event:drupal-system-connectConfirmed',\r\n \t\tconnectFailed  \t: 'event:drupal-system-connectFailed',\r\n \t\t// Get variable action\r\n \t\tgetVariableConfirmed\t: 'event:drupal-system-getVariableConfirmed',\r\n \t\tgetVariableFailed  \t: 'event:drupal-system-getVariableFailed',\r\n \t\t// Set variable action\r\n \t\tsetVariableConfirmed\t: 'event:drupal-system-setVariableConfirmed',\r\n \t\tsetVariableFailed  \t: 'event:drupal-system-setVariableFailed',\r\n \t\t// Del variable action\r\n \t\tdelVariableConfirmed\t: 'event:drupal-system-delVariableConfirmed',\r\n \t\tdelVariableFailed  \t: 'event:drupal-system-delVariableFailed'\r\n\t};\r\n    \r\n\t/**\r\n\t * System Channel Constant\r\n\t */\r\n\tangular\r\n\t    .module('d7-services.resources.system.channelConstant', [])\r\n\t    .constant(\"SystemChannelConstant\", SystemChannelConstant);\r\n\r\n})();\r\n",";(function() {\r\n    'use strict';\r\n\r\n\t/**\r\n\t * System Resource Modules\r\n\t * \r\n\t * see sourcecode in services/resources/system_resource.inc\r\n\t * \r\n\t**/\r\n    angular.module('d7-services.resources.system.resource', ['d7-services.commons.configurations', 'd7-services.commons.baseResource', 'd7-services.resources.system.resourceConstant', 'd7-services.resources.system.channel'])\r\n    \r\n\r\n    /**\r\n\t * SystemResource\r\n\t * \r\n\t * This service mirrors the Drupal system resource of the services 3.x module.\r\n\t * To use this you have to set following line in your Drupal CORS module settings\r\n\t * \r\n\t**/\r\n    .factory('SystemResource', SystemResource);\r\n\r\n    /**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t**/\r\n    SystemResource.$inject = ['$http', 'DrupalApiConstant', 'BaseResource', 'SystemResourceConstant', 'SystemChannel'];\r\n    \r\n\t/** @ngInject */\r\n\tfunction SystemResource($http, DrupalApiConstant, BaseResource, SystemResourceConstant, SystemChannel) { \r\n\t\t\r\n\t\t//setup and return service            \t\r\n        var systemResourceService = {\r\n\t\t\tconnect \t\t: connect,\r\n\t\t\tget_variable \t: get_variable,\r\n\t\t\tset_variable \t: set_variable,\r\n\t\t\tdel_variable \t: del_variable\r\n        };\r\n        \r\n        return systemResourceService;\r\n\r\n        ////////////\r\n        \r\n        /**\r\n\t\t * connect\r\n\t\t * \r\n\t\t * Returns the details of currently logged in user.\r\n\t\t * \r\n\t\t * Method: POST \r\n\t\t * Url: http://drupal_instance/api_endpoint/system/connect\r\n\t\t * \r\n\t\t * @return \t{Promise} Object with session id, session name and a user object.\r\n\t\t * \r\n\t\t**/\r\n        function connect() {\r\n\t\t\t\r\n\t\t\t//undefined check\r\n\t    \t//data = (data)?data:{};\r\n\t    \t\r\n\t\t\t//validation of params\r\n\t    \tvar errors = [];\r\n\t    \t\r\n\t\t\tvar connectPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + SystemResourceConstant.resourcePath + '/' + SystemResourceConstant.actions.connect,\r\n\t\t\t\trequestConfig = {\r\n\t\t\t\t\t\tmethod :'POST',\r\n\t\t\t\t\t\turl : connectPath\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\treturn BaseResource.request(requestConfig,SystemChannel.pubConnectConfirmed,  SystemChannel.pubConnectFailed);\r\n\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * get_variable\r\n\t\t * \r\n\t\t * Returns a persistent variable.\r\n\t\t * Case-sensitivity of the variable_* functions depends on the database collation used. To avoid problems, always use lower case for persistent variable names.\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/system/get_variable\r\n\t\t * \r\n\t\t * @params  {Object} data the requests data\r\n\t\t * \t\t\t@key \t{String} name The name of the variable to return, required:true, source:post body\r\n\t\t * \t\t\t@key \t{String} _default The default value to use if this variable has never been set, required:false, source:post body\r\n\t\t * \r\n\t\t * @return \t{Promise} The value of the variable. Unserialization is taken care of as necessary.\r\n\t\t *\r\n\t\t**/\r\n\t\tfunction get_variable(data){\r\n\t\t\t\r\n\t\t\t//undefined check\r\n\t    \tdata = (data)?data:{};\r\n\t\t\t\r\n\t\t\tvar getVariablePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + SystemResourceConstant.resourcePath + '/' + SystemResourceConstant.actions.get_variable,\r\n\t\t\t\trequestConfig = {\r\n\t\t\t\t\t\tmethod \t:'POST',\r\n\t\t\t\t\t\turl \t: getVariablePath,\r\n\t\t\t\t\t\tdata \t: {\r\n\t\t\t\t\t\t\tname : data.name,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\treturn BaseResource.request(requestConfig, SystemChannel.pubGetVariableConfirmed, SystemChannel.pubGetVariableFailed);\r\n\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * set_variable\r\n\t\t * \r\n\t\t * Sets a persistent variable.\r\n\t\t * Case-sensitivity of the variable_* functions depends on the database collation used. To avoid problems, always use lower case for persistent variable names.\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/system/set_variable\r\n\t\t * \r\n\t\t * @params  {Object} data the requests data\r\n\t\t * \t\t\t@key \t{String} name The name of the variable to set, required:true, source:post body\r\n\t\t * \t\t\t@key \t{String} value The value to set. This can be any PHP data type; these functions take care of serialization as necessary, required:true, source:post body\r\n\t\t * \r\n\t\t * @return \t{Promise} True if successful false if not\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction set_variable(data){\r\n\t\t\t\r\n\t\t\t//undefined check\r\n\t    \tdata = (data)?data:{};\r\n\t\r\n\t\t\tvar setVariablePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + SystemResourceConstant.resourcePath + '/' + SystemResourceConstant.actions.set_variable,\r\n\t\t\t\trequestConfig = {\r\n\t\t\t\t\t\tmethod \t:'POST',\r\n\t\t\t\t\t\turl \t: setVariablePath,\r\n\t\t\t\t\t\tdata \t: {\r\n\t\t\t\t\t\t\tname \t: data.name,\r\n\t\t\t\t\t\t\tvalue \t: data.value\r\n\t\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\treturn BaseResource.request(requestConfig, SystemChannel.pubSetVariableConfirmed, SystemChannel.pubSetVariableFailed);\r\n\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * del_variable\r\n\t\t * \r\n\t\t * Unsets a persistent variable.\r\n\t\t * Case-sensitivity of the variable_* functions depends on the database collation used. To avoid problems, always use lower case for persistent variable names.\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/system/del_variable\r\n\t\t * \r\n\t\t * @params  {Object} data the requests data\r\n\t\t * \t\t\t@key \t{String} name The name of the variable to undefine, required:true, source:post body\r\n\t\t * \r\n\t\t * @return \t{Promise}\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction del_variable(data){\r\n\t\t\t\r\n\t\t\t//undefined check\r\n\t    \tdata = (data)?data:{};\r\n\t    \t\r\n\t\t\tvar delVariablePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + SystemResourceConstant.resourcePath + '/' + SystemResourceConstant.actions.del_variable,\r\n\t\t\t\trequestConfig = {\r\n\t\t\t\t\t\tmethod \t:'POST',\r\n\t\t\t\t\t\turl \t: delVariablePath,\r\n\t\t\t\t\t\tdata \t: {\r\n\t\t\t\t\t\t\tname : data.name\r\n\t\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\treturn BaseResource.request(requestConfig, SystemChannel.pubDelVariableConfirmed, SystemChannel.pubDelVariableFailed);\r\n\r\n\t\t};\r\n\t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n    \r\n    /**\r\n\t *  Constants for SystemResourceModules \r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in your app.js config section\r\n\t */\r\n\tvar SystemResourceConstant =  {\r\n\r\n\t \t\t// NOTE: This is the default alias aliases for your system resources defined in Drupal\r\n\t \t\tresourcePath : 'system',\r\n\t \t\t//actions of system resource\r\n\t \t\tactions : {\r\n\t \t\t\tconnect \t : 'connect',\r\n\t \t\t\tget_variable : 'get_variable',\r\n\t \t\t\tset_variable : 'set_variable',\r\n\t \t\t\tdel_variable : 'del_variable'\r\n\t \t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * System Constant Modules\r\n\t */\r\n\tangular\r\n\t    .module('d7-services.resources.system.resourceConstant', [])\r\n\t    .constant(\"SystemResourceConstant\", SystemResourceConstant);\r\n\t\r\n})();\r\n",";(function() {\r\n    'use strict';\r\n    \r\n\t/**\r\n\t * User modules bundle\r\n\t**/\r\n\tangular\r\n\t    .module('d7-services.resources.taxonomy_vocabulary', \r\n\t    \t\t['d7-services.resources.taxonomy_vocabulary.resourceConstant', \r\n\t    \t\t 'd7-services.resources.taxonomy_vocabulary.resource', \r\n\t    \t\t 'd7-services.resources.taxonomy_vocabulary.channelConstant', \r\n\t    \t\t 'd7-services.resources.taxonomy_vocabulary.channel']);\r\n})();",";(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * TaxonomyVocabulary Channel Module\r\n\t */\r\n\tangular.module('d7-services.resources.taxonomy_vocabulary.channel', ['d7-services.commons.baseChannel', 'd7-services.resources.taxonomy_vocabulary.channelConstant'])\r\n\t\t   .factory('TaxonomyVocabularyChannel', TaxonomyVocabularyChannel);\r\n\r\n\t\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\tTaxonomyVocabularyChannel.$inject = [ 'BaseChannel', 'TaxonomyVocabularyChannelConstant' ];\r\n\t\r\n\t/**\r\n\t * Notification channel for taxonomy_vocabulary resource \r\n\t**/\r\n\t\r\n\t/** @ngInject */\r\n\tfunction TaxonomyVocabularyChannel(BaseChannel, TaxonomyVocabularyChannelConstant) {\r\n\t\r\n\t\t//setup and return service            \t\r\n        var taxonomy_vocabularyChannelService = {\r\n        \t\t\r\n        \t//taxonomy_vocabulary retrieve request\r\n    \t\tpubRetrieveConfirmed \t: pubRetrieveConfirmed,\r\n    \t\tsubRetrieveConfirmed\t: subRetrieveConfirmed,\r\n    \t\tpubRetrieveFailed \t\t: pubRetrieveFailed,\r\n    \t\tsubRetrieveFailed\t\t: subRetrieveFailed,\r\n    \t\t\r\n        \t//taxonomy_vocabulary create request\r\n        \tpubCreateConfirmed \t\t: pubCreateConfirmed,\r\n        \tsubCreateConfirmed\t\t: subCreateConfirmed,\r\n        \tpubCreateFailed \t\t: pubCreateFailed,\r\n        \tsubCreateFailed\t\t\t: subCreateFailed,\r\n        \t\r\n        \t//taxonomy_vocabulary update request\r\n        \tpubUpdateConfirmed \t\t: pubUpdateConfirmed,\r\n        \tsubUpdateConfirmed\t\t: subUpdateConfirmed,\r\n        \tpubUpdateFailed \t\t: pubUpdateFailed,\r\n        \tsubUpdateFailed\t\t\t: subUpdateFailed,\r\n        \t\r\n        \t//taxonomy_vocabulary delete request\r\n        \tpubDeleteConfirmed \t\t: pubDeleteConfirmed,\r\n        \tsubDeleteConfirmed\t\t: subDeleteConfirmed,\r\n        \tpubDeleteFailed \t\t: pubDeleteFailed,\r\n        \tsubDeleteFailed\t\t\t: subDeleteFailed,\r\n        \t\r\n        \t//taxonomy_vocabulary index request\r\n        \tpubIndexConfirmed \t\t: pubIndexConfirmed,\r\n        \tsubIndexConfirmed\t\t: subIndexConfirmed,\r\n        \tpubIndexFailed \t\t\t: pubIndexFailed,\r\n        \tsubIndexFailed\t\t\t: subIndexFailed,\r\n        \t\r\n        \t//taxonomy_vocabulary getTree request\r\n        \tpubGetTreeConfirmed \t\t: pubGetTreeConfirmed,\r\n        \tsubGetTreeConfirmed\t\t\t: subGetTreeConfirmed,\r\n        \tpubGetTreeFailed \t\t\t: pubGetTreeFailed,\r\n        \tsubGetTreeFailed\t\t\t: subGetTreeFailed,\r\n        \t\r\n        };\r\n        \r\n        return taxonomy_vocabularyChannelService;\r\n\r\n        ////////////\r\n        \r\n        //TaxonomyVocabulary retrieve request functions\r\n        \r\n        /**\r\n\t\t * pubRetrieveConfirmed\r\n\t\t * \r\n\t\t * Publish the TaxonomyVocabularyRetrieveConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubRetrieveConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.retrieveConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subRetrieveConfirmed\r\n\t\t * \r\n\t\t * subscribe for the TaxonomyVocabularyRetrieveConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyRetrieveConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subRetrieveConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.retrieveConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubRetrieveConfirmed\r\n\t\t * \r\n\t\t * Publish the TaxonomyVocabularyRetrieveConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubRetrieveFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.retrieveFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subRetrieveFailed\r\n\t\t * \r\n\t\t * subscribe for the TaxonomyVocabularyRetrieveFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyRetrieveFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subRetrieveFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.retrieveFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//TaxonomyVocabulary create request functions\r\n\r\n    \t/**\r\n    \t * pubCreateConfirmed\r\n    \t * \r\n    \t * Publish the TaxonomyVocabularyCreateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCreateConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.createConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCreateConfirmed\r\n    \t * \r\n    \t * subscribe for the TaxonomyVocabularyCreateConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyCreateConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCreateConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.createConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubCreateConfirmed\r\n    \t * \r\n    \t * Publish the TaxonomyVocabularyCreateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCreateFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.createFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCreateFailed\r\n    \t * \r\n    \t * subscribe for the TaxonomyVocabularyCreateFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyCreateFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCreateFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.createFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//TaxonomyVocabulary update request functions\r\n\r\n    \t/**\r\n    \t * pubUpdateConfirmed\r\n    \t * \r\n    \t * Publish the TaxonomyVocabularyUpdateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubUpdateConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.updateConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subUpdateConfirmed\r\n    \t * \r\n    \t * subscribe for the TaxonomyVocabularyUpdateConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyUpdateConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subUpdateConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.updateConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n    \t/**\r\n    \t * pubUpdateConfirmed\r\n    \t * \r\n    \t * Publish the TaxonomyVocabularyUpdateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubUpdateFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.updateFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subUpdateFailed\r\n    \t * \r\n    \t * subscribe for the TaxonomyVocabularyUpdateFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyUpdateFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subUpdateFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.updateFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//TaxonomyVocabulary delete request functions\r\n\r\n    \t/**\r\n    \t * pubDeleteConfirmed\r\n    \t * \r\n    \t * Publish the TaxonomyVocabularyDeleteConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubDeleteConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.deleteConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subDeleteConfirmed\r\n    \t * \r\n    \t * subscribe for the TaxonomyVocabularyDeleteConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyDeleteConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subDeleteConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.deleteConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubDeleteConfirmed\r\n    \t * \r\n    \t * Publish the TaxonomyVocabularyDeleteConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubDeleteFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.deleteFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subDeleteFailed\r\n    \t * \r\n    \t * subscribe for the TaxonomyVocabularyDeleteFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyDeleteFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subDeleteFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.deleteFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//TaxonomyVocabulary index request functions\r\n\r\n    \t/**\r\n    \t * pubIndexConfirmed\r\n    \t * \r\n    \t * Publish the TaxonomyVocabularyIndexConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubIndexConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.indexConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subIndexConfirmed\r\n    \t * \r\n    \t * subscribe for the TaxonomyVocabularyIndexConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyIndexConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subIndexConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.indexConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubIndexConfirmed\r\n    \t * \r\n    \t * Publish the TaxonomyVocabularyIndexConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubIndexFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.indexFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subIndexFailed\r\n    \t * \r\n    \t * subscribe for the TaxonomyVocabularyIndexFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyIndexFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subIndexFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.indexFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//TaxonomyVocabulary getTree request functions\r\n\r\n    \t/**\r\n    \t * pubGetTreeConfirmed\r\n    \t * \r\n    \t * Publish the TaxonomyVocabularyGetTreeConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubGetTreeConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.getTreeConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subGetTreeConfirmed\r\n    \t * \r\n    \t * subscribe for the TaxonomyVocabularyGetTreeConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subGetTreeConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyGetTreeConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subGetTreeConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.getTreeConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubGetTreeConfirmed\r\n    \t * \r\n    \t * Publish the TaxonomyVocabularyGetTreeConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubGetTreeFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(TaxonomyVocabularyChannelConstant.getTreeFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subGetTreeFailed\r\n    \t * \r\n    \t * subscribe for the TaxonomyVocabularyGetTreeFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subGetTreeFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for TaxonomyVocabularyGetTreeFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subGetTreeFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( TaxonomyVocabularyChannelConstant.getTreeFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n\r\n    /**\r\n\t *  Constants for TaxonomyVocabularyChannel\r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in a config section of angular\r\n\t */\r\n\tvar TaxonomyVocabularyChannelConstant =  {\r\n\t \t\t// Retrieve action\r\n \t\t\tretrieveConfirmed\t\t: 'event:drupal-taxonomy_vocabulary-retrieveConfirmed',\r\n \t\t\tretrieveFailed\t\t\t: 'event:drupal-taxonomy_vocabulary-retrieveFailed',\r\n \t\t\t// Create action\r\n \t\t\tcreateConfirmed\t\t\t: 'event:drupal-taxonomy_vocabulary-createConfirmed',\r\n \t\t\tcreateFailed\t\t\t: 'event:drupal-taxonomy_vocabulary-createFailed',\r\n \t\t\t// Update action\r\n \t\t\tupdateConfirmed\t\t\t: 'event:drupal-taxonomy_vocabulary-updateConfirmed',\r\n \t\t\tupdateFailed\t\t\t: 'event:drupal-taxonomy_vocabulary-updateFailed',\r\n \t\t\t// Delete action\t\r\n \t\t\tdeleteConfirmed\t\t\t: 'event:drupal-taxonomy_vocabulary-deleteConfirmed',\r\n \t\t\tdeleteFailed\t\t\t: 'event:drupal-taxonomy_vocabulary-deleteFailed',\r\n \t\t\t// Index action\r\n \t\t\tindexConfirmed\t\t\t: 'event:drupal-taxonomy_vocabulary-indexConfirmed',\r\n \t\t\tindexFailed\t\t\t\t: 'event:drupal-taxonomy_vocabulary-indexFailed',\r\n \t\t\t// SelectNodes action\r\n \t\t\tgetTreeConfirmed\t: 'event:drupal-taxonomy_vocabulary-getTreeConfirmed',\r\n \t\t\tgetTreeFailed\t\t: 'event:drupal-taxonomy_vocabulary-getTreeFailed',\r\n\r\n\t};\r\n    \r\n\t/**\r\n\t * TaxonomyVocabulary Channel Constant\r\n\t */\r\n\tangular\r\n\t    .module('d7-services.resources.taxonomy_vocabulary.channelConstant', [])\r\n\t    .constant(\"TaxonomyVocabularyChannelConstant\", TaxonomyVocabularyChannelConstant);\r\n\r\n})();\r\n",";(function() {\r\n    'use strict';\r\n\r\n\t/**\r\n\t * TaxonomyVocabulary Resource Modules\r\n\t * \r\n\t * see sourcecode in services/resources/taxonomy_vocabulary_resource.inc\r\n\t**/\r\n    angular.module('d7-services.resources.taxonomy_vocabulary.resource', ['d7-services.commons.configurations', 'd7-services.resources.taxonomy_vocabulary.resourceConstant', 'd7-services.resources.taxonomy_vocabulary.channel', 'd7-services.commons.baseResource'])\r\n    \r\n    /**\r\n\t * TaxonomyVocabularyResource\r\n\t * \r\n\t * This service mirrors the Drupal taxonomy_vocabulary resource of the services 3.x module.\r\n\t * To use this you have to set following line in your Drupal CORS module settings\r\n\t * your_api_endpoint/taxonomy_vocabulary/*|<mirror>|POST|Content-Type,Authorization|true\r\n\t * \r\n\t**/\r\n    .factory('TaxonomyVocabularyResource', TaxonomyVocabularyResource);\r\n\r\n    /**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t**/\r\n    TaxonomyVocabularyResource.$inject = ['$http', 'BaseResource', 'DrupalApiConstant', 'TaxonomyVocabularyResourceConstant', 'TaxonomyVocabularyChannel'];\r\n    \r\n\t/** @ngInject */\r\n\tfunction TaxonomyVocabularyResource($http, BaseResource, DrupalApiConstant, TaxonomyVocabularyResourceConstant, TaxonomyVocabularyChannel) { \r\n\t\t\r\n\t\t//setup and return service            \t\r\n        var taxonomy_vocabularyResourceService = {\r\n        \t//CRUD operations\r\n        \tretrieve \t: retrieve,\r\n    \t\tcreate \t\t: create,\r\n    \t\tupdate \t\t: update,\r\n    \t\tdelete \t\t: _delete,\r\n    \t    index \t\t: index,\r\n    \t    //Actions\r\n    \t    getTree\t: getTree,\r\n        \t\r\n        };\r\n        \r\n        return taxonomy_vocabularyResourceService;\r\n\r\n        ////////////\r\n        \r\n        /**\r\n\t\t * retrieve\r\n\t\t * \r\n\t\t * Retrieve a taxonomy vocabulary\r\n\t\t * \r\n\t\t * Method: GET \r\n\t\t * Url: http://drupal_instance/api_endpoint/taxonomy_vocabulary/{TID}\r\n\t\t * \r\n\t\t * @params  {Object} data The requests data\r\n\t\t * \t\t\t@key \t{Integer} tid The vid of the taxonomy vocabulary to get, required:true, source:path\r\n\t\t * \r\n\t\t * @return \t{Promise} A taxonomy_vocabulary object\r\n\t\t * \r\n\t\t**/\r\n    \tfunction retrieve(data) {\r\n    \t\tvar retrievePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyVocabularyResourceConstant.resourcePath + '/' + data.vid;\r\n    \t\treturn BaseResource.retrieve( retrievePath,TaxonomyVocabularyChannel.pubRetrieveConfirmed,  TaxonomyVocabularyChannel.pubRetrieveFailed);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * create\r\n\t     * \r\n\t     * Create a taxonomy vocabulary\r\n\t     * This function uses drupal_form_submit() and as such expects all input to match\r\n\t     * the submitting form in question.\r\n\t     * \r\n\t     * Method: POST\r\n\t     * Url: http://drupal_instance/api_endpoint/taxonomy_vocabulary\r\n\t     * \r\n\t     * @params  {Object} data The vid of the taxonomy vocabulary to get, required:true, source:post body\r\n\t     * \r\n\t\t *\r\n\t\t *  Roles can be passed in a roles property which is an associative\r\n\t\t *  array formatted with '<role id>' => '<role id>', not including the authenticated taxonomy_vocabulary role, which is given by default.\r\n\t     * \r\n\t     * @return \t{Promise} The taxonomy_vocabulary object of the newly created taxonomy_vocabulary.\r\n\t     *\r\n\t    **/\r\n\t    function create(data) {\r\n\t    \t\r\n\t    \tvar createPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyVocabularyResourceConstant.resourcePath;\r\n\r\n\t    \tvar createData \t= { \r\n\t    \t\t\tvocabulary : data \r\n    \t\t};\r\n\r\n    \t\treturn BaseResource.create( createData, createPath,  TaxonomyVocabularyChannel.pubCreateConfirmed, TaxonomyVocabularyChannel.pubCreateFailed);\r\n\r\n\t    };\r\n\t        \r\n\t    /**\r\n\t     * update\r\n\t     * \r\n\t     * Update a taxonomy vocabulary\r\n\t     * \r\n\t     * Method: PUT\r\n\t     * Url: http://drupal_instance/api_endpoint/taxonomy_vocabulary/{TID}\r\n\t     * \r\n\t     * @params  {Object} data The requests data\r\n\t     * \t\t\t@key \t{Integer} vid The unique identifier for this taxonomy vocabulary., required:true, source:path\r\n\t     * \t\t\t@key \t{Array}  vocabulary The taxonomy vocabulary data to update, required:true, source:post body\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function update(data) {\r\n\t    \t\r\n\t    \tvar updatePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyVocabularyResourceConstant.resourcePath + '/' + data.vid;\r\n\t    \t\r\n    \t\tvar updateData \t= {vocabulary : data};\r\n    \t\t\r\n    \t\treturn BaseResource.update( updateData, updatePath, TaxonomyVocabularyChannel.pubUpdateConfirmed, TaxonomyVocabularyChannel.pubUpdateFailed);\r\n\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * delete\r\n\t     * \r\n\t     * Delete a taxonomy vocabulary\r\n\t     * \r\n\t     * Method: DELETE\r\n\t     * Url: http://drupal_instance/api_endpoint/taxonomy_vocabulary/{TID}\r\n\t     * \r\n\t     * @params  {Object} data the requests data\r\n\t     * \t\t\t@key \t{Integer} tid The id of the taxonomy vocabulary to delete, required:true, source:path\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function _delete(data) {\r\n\t    \tvar deletePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyVocabularyResourceConstant.resourcePath + '/' + data.tid\r\n\t    \treturn BaseResource.delete(deletePath, TaxonomyVocabularyChannel.pubDeleteConfirmed, TaxonomyVocabularyChannel.pubDeleteFailed);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * index\r\n\t     * \r\n\t     * List all taxonomy vocabularies\r\n\t     * \r\n\t     * Method: GET\r\n\t\t * Url: http://drupal_instance/api_endpoint/taxonomy_vocabulary\r\n\t\t * \r\n\t\t * @params  {Object} data the requests data\r\n\t\t * \t\t@key \t{Integer} page The zero-based index of the page to get. defaults to 0., required:false, source:param\r\n\t\t * \t\t@key \t{Integer} pagesize Number of records to get per page., required:false, source:param\r\n\t\t * \t\t@key \t{String} fields The fields to get., required:false, source:param\r\n\t\t * \t\t@key \t{Array} parameters Parameters, required:false, source:param\r\n\t\t * \t\t\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function index(data) {\r\n\t    \tvar indexPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyVocabularyResourceConstant.resourcePath + '/';\r\n\t    \treturn BaseResource.index(data, indexPath,TaxonomyVocabularyChannel.pubIndexConfirmed,  TaxonomyVocabularyChannel.pubIndexFailed);\r\n\t    };\r\n\t    \r\n\t\t/**\r\n\t\t * getTree\r\n\t\t * \r\n\t\t * Returns a full list of taxonomy terms.\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/taxonomy_vocabulary/getTree \r\n\t\t * \r\n\t\t * @params  {Object} data the requests data\r\n\t\t * \t\t@key \t{Integer} vid The vocabulary id to retrieve., separated by comma., required:true, source:post body\r\n\t\t * \t\t@key \t{Integer} parent The term ID under which to generate the tree. If 0, generate the tree for the entire vocabulary., required:false, source:post body\r\n\t\t * \t\t@key \t{Integer} maxdepth The number of levels of the tree to return. Leave NULL to return all levels., required:false, source:post body\r\n\t\t * \t\t@key \t{Integer} load_entities Whether the tree of terms should contain full term entity objects. If 1 (TRUE), a full entity load will occur on the term objects. Otherwise they are partial objects to save execution time and memory consumption. Defaults to 0 (FALSE)., required:false, source:post body\r\n\t\t * \r\n\t\t * @return \t{Promise}\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction getTree(data) {\r\n\t\t\tvar  pathToGetTree = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + TaxonomyVocabularyResourceConstant.resourcePath + '/' + TaxonomyVocabularyResourceConstant.actions.getTree,\r\n\t\t\t\t requestConfig = {\r\n\t\t\t     \turl\t\t: pathToGetTree,\r\n\t\t\t     \tmethod\t: 'POST',\r\n\t\t\t     \tdata : data\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\treturn BaseResource.request(requestConfig,TaxonomyVocabularyChannel.pubGetTreeConfirmed,  TaxonomyVocabularyChannel.pubGetTreeFailed);\r\n\r\n\t\t};\r\n\t\t\t\t\t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n    \r\n    /**\r\n\t *  Constants for TaxonomyVocabularyResourceModules\r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in your app.js config section\r\n\t */\r\n\tvar TaxonomyVocabularyResourceConstant =  {\r\n\r\n\t\t// NOTE: This is the default alias aliases for your system resources defined in Drupal\r\n\t\tresourcePath : 'taxonomy_vocabulary',\r\n\t\t//actions of taxonomy_vocabulary resource\r\n\t\tactions : {\r\n\t\t\t//following actions are defined over their request method (GET, POST, PUT, DELETE) so they are commented out\r\n\t\t\t//retrieve \t\t\t\t: 'retrieve',\r\n\t\t\t//create \t\t\t\t: 'create',\r\n\t\t\t//update \t\t\t\t: 'update',\r\n\t\t\t//delete \t\t\t\t: 'delete',\r\n\t\t    //index \t\t\t\t: 'index',\r\n\t\t\t//\r\n\t\t\tgetTree \t\t\t: 'getTree',\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * TaxonomyVocabulary Constant Modules\r\n\t */\r\n\tangular\r\n\t    .module('d7-services.resources.taxonomy_vocabulary.resourceConstant', [])\r\n\t    .constant(\"TaxonomyVocabularyResourceConstant\", TaxonomyVocabularyResourceConstant);\r\n\t\r\n})();\r\n",";(function() {\r\n    'use strict';\r\n    \r\n\t/**\r\n\t * User modules bundle\r\n\t**/\r\n\tangular\r\n\t    .module('d7-services.resources.user', \r\n\t    \t\t['d7-services.resources.user.resourceConstant', \r\n\t    \t\t 'd7-services.resources.user.resource', \r\n\t    \t\t 'd7-services.resources.user.channelConstant', \r\n\t    \t\t 'd7-services.resources.user.channel']);\r\n})();",";(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * User Channel Module\r\n\t */\r\n\tangular.module('d7-services.resources.user.channel', ['d7-services.commons.baseChannel', 'd7-services.resources.user.channelConstant'])\r\n\t\t   .factory('UserChannel', UserChannel);\r\n\r\n\t\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\tUserChannel.$inject = [ 'BaseChannel', 'UserChannelConstant' ];\r\n\t\r\n\t/**\r\n\t * Notification channel for user resource \r\n\t**/\r\n\t\r\n\t/** @ngInject */\r\n\tfunction UserChannel(BaseChannel, UserChannelConstant) {\r\n\t\r\n\t\t//setup and return service            \t\r\n        var userChannelService = {\r\n        \t\t\r\n        \t//user retrieve request\r\n    \t\tpubRetrieveConfirmed \t: pubRetrieveConfirmed,\r\n    \t\tsubRetrieveConfirmed\t: subRetrieveConfirmed,\r\n    \t\tpubRetrieveFailed \t\t: pubRetrieveFailed,\r\n    \t\tsubRetrieveFailed\t\t: subRetrieveFailed,\r\n    \t\t\r\n        \t//user create request\r\n        \tpubCreateConfirmed \t\t: pubCreateConfirmed,\r\n        \tsubCreateConfirmed\t\t: subCreateConfirmed,\r\n        \tpubCreateFailed \t\t: pubCreateFailed,\r\n        \tsubCreateFailed\t\t\t: subCreateFailed,\r\n        \t\r\n        \t//user update request\r\n        \tpubUpdateConfirmed \t\t: pubUpdateConfirmed,\r\n        \tsubUpdateConfirmed\t\t: subUpdateConfirmed,\r\n        \tpubUpdateFailed \t\t: pubUpdateFailed,\r\n        \tsubUpdateFailed\t\t\t: subUpdateFailed,\r\n        \t\r\n        \t//user delete request\r\n        \tpubDeleteConfirmed \t\t: pubDeleteConfirmed,\r\n        \tsubDeleteConfirmed\t\t: subDeleteConfirmed,\r\n        \tpubDeleteFailed \t\t: pubDeleteFailed,\r\n        \tsubDeleteFailed\t\t\t: subDeleteFailed,\r\n        \t\r\n        \t//user index request\r\n        \tpubIndexConfirmed \t\t: pubIndexConfirmed,\r\n        \tsubIndexConfirmed\t\t: subIndexConfirmed,\r\n        \tpubIndexFailed \t\t\t: pubIndexFailed,\r\n        \tsubIndexFailed\t\t\t: subIndexFailed,\r\n        \t\r\n        \t//user token request\r\n        \tpubTokenConfirmed \t\t: pubTokenConfirmed,\r\n        \tsubTokenConfirmed\t\t: subTokenConfirmed,\r\n        \tpubTokenFailed \t\t\t: pubTokenFailed,\r\n        \tsubTokenFailed\t\t\t: subTokenFailed,\r\n        \t\r\n        \t//user register request\r\n    \t\tpubRegisterConfirmed \t: pubRegisterConfirmed,\r\n    \t\tsubRegisterConfirmed\t: subRegisterConfirmed,\r\n    \t\tpubRegisterFailed \t\t: pubRegisterFailed,\r\n    \t\tsubRegisterFailed\t\t: subRegisterFailed,\r\n    \t\t\r\n    \t\t//user register request\r\n    \t\tpubResendWelcomeEmailConfirmed \t: pubResendWelcomeEmailConfirmed,\r\n    \t\tsubResendWelcomeEmailConfirmed\t: subResendWelcomeEmailConfirmed,\r\n    \t\tpubResendWelcomeEmailFailed \t: pubResendWelcomeEmailFailed,\r\n    \t\tsubResendWelcomeEmailFailed\t\t: subResendWelcomeEmailFailed,\r\n    \t\t\r\n    \t\t//user cancel request\r\n    \t\tpubCancelConfirmed \t: pubCancelConfirmed,\r\n    \t\tsubCancelConfirmed\t: subCancelConfirmed,\r\n    \t\tpubCancelFailed \t: pubCancelFailed,\r\n    \t\tsubCancelFailed\t\t: subCancelFailed,\r\n    \t\t\r\n        \t//user login request\r\n    \t\tpubLoginConfirmed \t: pubLoginConfirmed,\r\n    \t\tsubLoginConfirmed\t: subLoginConfirmed,\r\n    \t\tpubLoginFailed \t\t: pubLoginFailed,\r\n    \t\tsubLoginFailed\t\t: subLoginFailed,\r\n    \t\t\r\n    \t\t//user logout request\r\n    \t\tpubLogoutConfirmed \t\t: pubLogoutConfirmed,\r\n        \tsubLogoutConfirmed\t\t: subLogoutConfirmed,\r\n        \tpubLogoutFailed \t\t: pubLogoutFailed,\r\n        \tsubLogoutFailed\t\t\t: subLogoutFailed,\r\n        \t\r\n        \t//user password_reset request\r\n        \tpubPasswordResetConfirmed \t\t: pubPasswordResetConfirmed,\r\n        \tsubPasswordResetConfirmed\t\t: subPasswordResetConfirmed,\r\n        \tpubPasswordResetFailed \t\t\t: pubPasswordResetFailed,\r\n        \tsubPasswordResetFailed\t\t\t: subPasswordResetFailed,\r\n\r\n        \t//user RequestNewPassword request\r\n        \tpubRequestNewPasswordConfirmed \t\t: pubRequestNewPasswordConfirmed,\r\n        \tsubRequestNewPasswordConfirmed\t\t: subRequestNewPasswordConfirmed,\r\n        \tpubRequestNewPasswordFailed \t\t: pubRequestNewPasswordFailed,\r\n        \tsubRequestNewPasswordFailed\t\t\t: subRequestNewPasswordFailed\r\n\r\n        };\r\n        \r\n        return userChannelService;\r\n\r\n        ////////////\r\n        \r\n        //User retrieve request functions\r\n        \r\n        /**\r\n\t\t * pubRetrieveConfirmed\r\n\t\t * \r\n\t\t * Publish the UserRetrieveConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubRetrieveConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.retrieveConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subRetrieveConfirmed\r\n\t\t * \r\n\t\t * subscribe for the UserRetrieveConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for UserRetrieveConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subRetrieveConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.retrieveConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubRetrieveConfirmed\r\n\t\t * \r\n\t\t * Publish the UserRetrieveConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubRetrieveFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.retrieveFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subRetrieveFailed\r\n\t\t * \r\n\t\t * subscribe for the UserRetrieveFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for UserRetrieveFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subRetrieveFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.retrieveFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//User create request functions\r\n\r\n    \t/**\r\n    \t * pubCreateConfirmed\r\n    \t * \r\n    \t * Publish the UserCreateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCreateConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.createConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCreateConfirmed\r\n    \t * \r\n    \t * subscribe for the UserCreateConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserCreateConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCreateConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.createConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubCreateConfirmed\r\n    \t * \r\n    \t * Publish the UserCreateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCreateFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.createFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCreateFailed\r\n    \t * \r\n    \t * subscribe for the UserCreateFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserCreateFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCreateFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.createFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//User update request functions\r\n\r\n    \t/**\r\n    \t * pubUpdateConfirmed\r\n    \t * \r\n    \t * Publish the UserUpdateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubUpdateConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.updateConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subUpdateConfirmed\r\n    \t * \r\n    \t * subscribe for the UserUpdateConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserUpdateConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subUpdateConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.updateConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n    \t/**\r\n    \t * pubUpdateConfirmed\r\n    \t * \r\n    \t * Publish the UserUpdateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubUpdateFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.updateFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subUpdateFailed\r\n    \t * \r\n    \t * subscribe for the UserUpdateFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserUpdateFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subUpdateFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.updateFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//User delete request functions\r\n\r\n    \t/**\r\n    \t * pubDeleteConfirmed\r\n    \t * \r\n    \t * Publish the UserDeleteConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubDeleteConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.deleteConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subDeleteConfirmed\r\n    \t * \r\n    \t * subscribe for the UserDeleteConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserDeleteConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subDeleteConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.deleteConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubDeleteConfirmed\r\n    \t * \r\n    \t * Publish the UserDeleteConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubDeleteFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.deleteFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subDeleteFailed\r\n    \t * \r\n    \t * subscribe for the UserDeleteFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserDeleteFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subDeleteFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.deleteFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//User index request functions\r\n\r\n    \t/**\r\n    \t * pubIndexConfirmed\r\n    \t * \r\n    \t * Publish the UserIndexConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubIndexConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.indexConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subIndexConfirmed\r\n    \t * \r\n    \t * subscribe for the UserIndexConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserIndexConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subIndexConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.indexConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubIndexConfirmed\r\n    \t * \r\n    \t * Publish the UserIndexConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubIndexFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.indexFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subIndexFailed\r\n    \t * \r\n    \t * subscribe for the UserIndexFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserIndexFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subIndexFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.indexFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//User login request functions\r\n        \r\n        /**\r\n\t\t * pubLoginConfirmed\r\n\t\t * \r\n\t\t * Publish the UserLoginConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubLoginConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.loginConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t /**\r\n\t\t * subLoginConfirmed\r\n\t\t * \r\n\t\t * subscribe for the UserLoginConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subLoginConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for UserLoginConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subLoginConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.loginConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubLoginFailed\r\n\t\t * \r\n\t\t * Publish the UserLoginConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubLoginFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.loginFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subLoginFailed\r\n\t\t * \r\n\t\t * subscribe for the UserLoginFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subLoginFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for UserLoginFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subLoginFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.loginFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//User logout request functions\r\n\r\n    \t/**\r\n    \t * pubLogoutConfirmed\r\n    \t * \r\n    \t * Publish the UserLogoutConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubLogoutConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.logoutConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subLogoutConfirmed\r\n    \t * \r\n    \t * subscribe for the UserLogoutConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subLogoutConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserLogoutConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subLogoutConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.logoutConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubLogoutFailed\r\n    \t * \r\n    \t * Publish the UserLogoutConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubLogoutFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.logoutFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subLogoutFailed\r\n    \t * \r\n    \t * subscribe for the UserLogoutFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subLogoutFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserLogoutFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subLogoutFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.logoutFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//__________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t\r\n    \t//User token request functions\r\n\r\n    \t/**\r\n    \t * pubTokenConfirmed\r\n    \t * \r\n    \t * Publish the UserTokenConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubTokenConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.tokenConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subTokenConfirmed\r\n    \t * \r\n    \t * subscribe for the UserTokenConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subTokenConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserTokenConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subTokenConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.tokenConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubTokenConfirmed\r\n    \t * \r\n    \t * Publish the UserTokenConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubTokenFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.tokenFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subTokenFailed\r\n    \t * \r\n    \t * subscribe for the UserTokenFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subTokenFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserTokenFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subTokenFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.tokenFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//User register request functions\r\n\r\n    \t/**\r\n    \t * pubRegisterConfirmed\r\n    \t * \r\n    \t * Publish the UserRegisterConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubRegisterConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.registerConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subRegisterConfirmed\r\n    \t * \r\n    \t * subscribe for the UserRegisterConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subRegisterConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserRegisterConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subRegisterConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.registerConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubRegisterFailed\r\n    \t * \r\n    \t * Publish the UserRegisterConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubRegisterFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.registerFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subRegisterFailed\r\n    \t * \r\n    \t * subscribe for the UserRegisterFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subRegisterFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserRegisterFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subRegisterFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.registerFailed, _Scope, scopeHandler);   \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//User resend_welcome_email request functions\r\n\r\n    \t/**\r\n    \t * pubResendWelcomeEmailConfirmed\r\n    \t * \r\n    \t * Publish the UserResendWelcomeEmailConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubResendWelcomeEmailConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.resend_welcome_emailConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subResendWelcomeEmailConfirmed\r\n    \t * \r\n    \t * subscribe for the UserResendWelcomeEmailConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subResendWelcomeEmailConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserResendWelcomeEmailConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subResendWelcomeEmailConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.resend_welcome_emailConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubResendWelcomeEmailFailed\r\n    \t * \r\n    \t * Publish the UserResendWelcomeEmailConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubResendWelcomeEmailFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.resend_welcome_emailFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subResendWelcomeEmailFailed\r\n    \t * \r\n    \t * subscribe for the UserResendWelcomeEmailFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subResendWelcomeEmailFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserResendWelcomeEmailFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subResendWelcomeEmailFailed(_Scope, scopeHandler) {\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.resend_welcome_emailFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//User cancel request functions\r\n\r\n    \t/**\r\n    \t * pubCancelConfirmed\r\n    \t * \r\n    \t * Publish the UserCancelConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCancelConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.cancelConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCancelConfirmed\r\n    \t * \r\n    \t * subscribe for the UserCancelConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCancelConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserCancelConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCancelConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.cancelConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubCancelFailed\r\n    \t * \r\n    \t * Publish the UserCancelConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCancelFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.cancelFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCancelFailed\r\n    \t * \r\n    \t * subscribe for the UserCancelFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCancelFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserCancelFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCancelFailed(_Scope, scopeHandler) {\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.cancelFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//User password_reset request functions\r\n\r\n    \t/**\r\n    \t * pubPasswordResetConfirmed\r\n    \t * \r\n    \t * Publish the UserPasswordResetConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubPasswordResetConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.password_resetConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subPasswordResetConfirmed\r\n    \t * \r\n    \t * subscribe for the UserPasswordResetConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subPasswordResetConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserPasswordResetConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subPasswordResetConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.password_resetConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubPasswordResetConfirmed\r\n    \t * \r\n    \t * Publish the UserPasswordResetConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubPasswordResetFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.password_resetFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subPasswordResetFailed\r\n    \t * \r\n    \t * subscribe for the UserPasswordResetFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subPasswordResetFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserPasswordResetFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subPasswordResetFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.password_resetFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t\r\n    \t//User requestNewPassword request functions\r\n\r\n    \t/**\r\n    \t * pubRequestNewPasswordConfirmed\r\n    \t * \r\n    \t * Publish the UserRequestNewPasswordConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubRequestNewPasswordConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.requestNewPasswordConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subRequestNewPasswordConfirmed\r\n    \t * \r\n    \t * subscribe for the UserRequestNewPasswordConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subRequestNewPasswordConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserRequestNewPasswordConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subRequestNewPasswordConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.requestNewPasswordConfirmed, _Scope, scopeHandler);\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubRequestNewPasswordConfirmed\r\n    \t * \r\n    \t * Publish the UserRequestNewPasswordConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubRequestNewPasswordFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.requestNewPasswordFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subRequestNewPasswordFailed\r\n    \t * \r\n    \t * subscribe for the UserRequestNewPasswordFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subRequestNewPasswordFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserRequestNewPasswordFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subRequestNewPasswordFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.requestNewPasswordFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t\r\n    \t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n\r\n    /**\r\n\t *  Constants for UserChannel\r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in a config section of angular\r\n\t */\r\n\tvar UserChannelConstant =  {\r\n\t \t\t// Retrieve action\r\n \t\t\tretrieveConfirmed \t\t\t\t: 'event:drupal-user-retrieveConfirmed',\r\n \t\t\tretrieveFailed  \t\t\t\t: 'event:drupal-user-retrieveFailed',\r\n \t\t\t// Create action\r\n \t\t\tcreateConfirmed\t\t\t\t: 'event:drupal-user-createConfirmed',\r\n \t\t\tcreateFailed  \t\t\t\t\t: 'event:drupal-user-createFailed',\r\n \t\t\t// Update action\r\n \t\t\tupdateConfirmed\t\t\t\t: 'event:drupal-user-updateConfirmed',\r\n \t\t\tupdateFailed  \t\t\t\t\t: 'event:drupal-user-updateFailed',\r\n \t\t\t// Delete action\t\r\n \t\t\tdeleteConfirmed\t\t\t\t: 'event:drupal-user-deleteConfirmed',\r\n \t\t\tdeleteFailed  \t\t\t\t\t: 'event:drupal-user-deleteFailed',\r\n \t\t\t// Index action\r\n \t\t\tindexConfirmed  \t\t\t\t: 'event:drupal-user-indexConfirmed',\r\n \t\t\tindexFailed  \t\t\t\t\t: 'event:drupal-user-indexFailed',\r\n \t\t\t//Request new password action\r\n \t\t\trequestNewPasswordConfirmed  \t: 'event:drupal-user-requestNewPasswordConfirmed',\r\n \t\t\trequestNewPasswordFailed  \t\t: 'event:drupal-user-requestNewPasswordFailed',\r\n \t\t\t//Cancel action\r\n \t\t\tcancelConfirmed  \t\t\t\t: 'event:drupal-user-cancelConfirmed',\r\n \t\t\tcancelFailed  \t\t\t\t\t: 'event:drupal-user-cancelFailed',\r\n \t\t\t//Password Reset\r\n \t\t\tpasswordResetConfirmed  \t\t: 'event:drupal-user-passwordResetConfirmed',\r\n \t\t\tpasswordResetFailed  \t\t\t: 'event:drupal-user-passwordResetFailed',\r\n \t\t\t//Resend Welcome Email\r\n \t\t\tresendWelcomeEmailConfirmed  \t: 'event:drupal-user-resendWelcomeEmailConfirmed',\r\n \t\t\tresendWelcomeEmailFailed  \t\t: 'event:drupal-user-resendWelcomeEmailFailed',\r\n \t\t\t// Token action\r\n \t\t\ttokenConfirmed  \t\t\t\t: 'event:drupal-user-tokenConfirmed',\r\n \t\t\ttokenFailed  \t\t\t\t\t: 'event:drupal-user-tokenFailed',\r\n \t\t\t// Register action\r\n \t\t\tregisterConfirmed  \t\t\t: 'event:drupal-user-registerConfirmed',\r\n \t\t\tregisterFailed  \t\t\t\t: 'event:drupal-user-registerFailed',\r\n \t\t\t// Login action\r\n \t\t\tloginConfirmed  \t\t\t\t: 'event:drupal-user-loginConfirmed',\r\n \t\t\tloginFailed  \t\t\t\t\t: 'event:drupal-user-loginFailed',\r\n \t\t\t// Logout action\r\n \t\t\tlogoutConfirmed  \t\t\t\t: 'event:drupal-user-logoutConfirmed',\r\n \t\t\tlogoutFailed  \t\t\t\t\t: 'event:drupal-user-logoutFailed'\r\n\t \t\t\r\n\t};\r\n    \r\n\t/**\r\n\t * User Channel Constant\r\n\t */\r\n\tangular\r\n\t    .module('d7-services.resources.user.channelConstant', [])\r\n\t    .constant(\"UserChannelConstant\", UserChannelConstant);\r\n\r\n})();\r\n",";(function() {\r\n    'use strict';\r\n\r\n\t/**\r\n\t * User Resource Modules\r\n\t * \r\n\t * see sourcecode in services/resources/user_resource.inc\r\n\t**/\r\n    angular.module('d7-services.resources.user.resource', ['d7-services.commons.configurations', 'd7-services.resources.user.resourceConstant', 'd7-services.resources.user.channel', 'd7-services.commons.baseResource'])\r\n    \r\n    /**\r\n\t * UserResource\r\n\t * \r\n\t * This service mirrors the Drupal user resource of the services 3.x module.\r\n\t * To use this you have to set following line in your Drupal CORS module settings\r\n\t * your_api_endpoint/user/*|<mirror>|POST|Content-Type,Authorization|true\r\n\t * \r\n\t**/\r\n    .factory('UserResource', UserResource);\r\n\r\n    /**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t**/\r\n    UserResource.$inject = ['$http', 'BaseResource', 'DrupalApiConstant', 'UserResourceConstant', 'UserChannel'];\r\n    \r\n\t/** @ngInject */\r\n\tfunction UserResource($http, BaseResource, DrupalApiConstant, UserResourceConstant, UserChannel) { \r\n\t\t\r\n\t\t//setup and return service            \t\r\n        var userResourceService = {\r\n        \t//CRUD operations\r\n        \tretrieve \t: retrieve,\r\n    \t\tcreate \t\t: create,\r\n    \t\tupdate \t\t: update,\r\n    \t\tdelete \t\t: _delete,\r\n    \t    index \t\t: index,\r\n    \t    //Actions\r\n    \t    token\t\t: token,\r\n    \t\tregister \t: register,\r\n    \t\tresendWelcomeEmail \t: resendWelcomeEmail,\r\n    \t\tcancel \t\t: cancel,\r\n    \t\tlogin \t\t: login,\r\n        \tlogout \t\t: logout,\r\n        \tpasswordReset \t\t: passwordReset,\r\n        \trequestNewPassword \t: requestNewPassword\r\n        \t\r\n        };\r\n        \r\n        return userResourceService;\r\n\r\n        ////////////\r\n        \r\n        /**\r\n\t\t * retrieve\r\n\t\t * \r\n\t\t * Retrieve a user\r\n\t\t * \r\n\t\t * Method: GET \r\n\t\t * Url: http://drupal_instance/api_endpoint/user/{UID}\r\n\t\t * \r\n\t\t * @params  {Object} data The requests data\r\n\t\t * \t\t\t@key \t{Integer} uid UID of the user to be loaded, required:true, source:path\r\n\t\t * \r\n\t\t * @return \t{Promise} A user object\r\n\t\t * \r\n\t\t**/\r\n    \tfunction retrieve(data) {\r\n    \t\tvar retrievePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + data.uid;\r\n    \t\treturn BaseResource.retrieve( retrievePath,UserChannel.pubRetrieveConfirmed,  UserChannel.pubRetrieveFailed);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * create\r\n\t     * \r\n\t     * Create a new user.\r\n\t     * This function uses drupal_form_submit() and as such expects all input to match\r\n\t     * the submitting form in question.\r\n\t     * \r\n\t     * Method: POST\r\n\t     * Url: http://drupal_instance/api_endpoint/user\r\n\t     * \r\n\t     * @params  {Object} data The accout of the user to create, required:true, source:post body\r\n\t     * \r\n\t     *  The $account object should contain, at minimum, the following properties:\r\n\t\t *     - {String} name  The user name\r\n\t\t *     - {String} mail  The email address\r\n\t\t *     - {String} pass  The plain text unencrypted password\r\n\t\t *\r\n\t\t *  These properties can be passed but are optional\r\n\t\t *     - {Integer} status Value 0 for blocked, otherwise will be active by default\r\n\t\t *     - {Integer} notify Value 1 to notify user of new account, will not notify by default\r\n\t\t *\r\n\t\t *  Roles can be passed in a roles property which is an associative\r\n\t\t *  array formatted with '<role id>' => '<role id>', not including the authenticated user role, which is given by default.\r\n\t     * \r\n\t     * @return \t{Promise} The user object of the newly created user.\r\n\t     *\r\n\t    **/\r\n\t    function create(data) {\r\n\t    \t\r\n\t    \tvar createPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath;\r\n\r\n    \t\tvar createdata \t= {\r\n\t\t\t\tname : data.name,\r\n\t\t\t\tpass : data.pass,\r\n\t\t\t\tmail : data.mail\r\n\t\t\t}\r\n    \t\t\r\n    \t\t//optional data\r\n    \t\t\r\n    \t\tif(data.status || data.status == 0) {\r\n    \t\t\tcreatedata.status = (data.status)?1:0;\r\n    \t\t}\r\n    \t\t\r\n    \t\tif(data.notify || data.notify == 0) {\r\n    \t\t\tcreatedata.notify = (data.notify)?1:0;\r\n    \t\t}\r\n\r\n    \t\tif (data.roles) {\r\n    \t\t\tcreatedata.roles = BaseResource.preparePostData(data.roles, 'array_of_values');\r\n    \t\t}\r\n    \t\t\r\n    \t\treturn BaseResource.create( createdata, createPath,  UserChannel.pubCreateConfirmed, UserChannel.pubCreateFailed);\r\n\r\n\t    };\r\n\t        \r\n\t    /**\r\n\t     * update\r\n\t     * \r\n\t     * Update a user\r\n\t     * \r\n\t     * Method: PUT\r\n\t     * Url: http://drupal_instance/api_endpoint/user/{UID}\r\n\t     * \r\n\t     * @params  {Object} data The requests data\r\n\t     * \t\t\t@key \t{Integer} uid Unique identifier for this user, required:true, source:path\r\n\t     * \t\t\t@key \t{Array}  data The user object with updated information, required:true, source:post body\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function update(data) {\r\n\t    \t\r\n\t    \tvar updatePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + data.uid;\r\n\t    \t\r\n\t    \tdelete data.uid;\r\n    \t\tvar updateData \t= data;\r\n    \t\t\r\n    \t\treturn BaseResource.update( updateData, updatePath, UserChannel.pubUpdateConfirmed, UserChannel.pubUpdateFailed);\r\n\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * delete\r\n\t     * \r\n\t     * Delete a user\r\n\t     * \r\n\t     * Method: DELETE\r\n\t     * Url: http://drupal_instance/api_endpoint/user/{UID}\r\n\t     * \r\n\t     * @params  {Object} data the requests data\r\n\t     * \t\t\t@key \t{Integer} uid The id of the user to delete, required:true, source:path\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function _delete(data) {\r\n\t    \tvar deletePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + data.uid\r\n\t    \treturn BaseResource.delete(deletePath, UserChannel.pubDeleteConfirmed, UserChannel.pubDeleteFailed);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * index\r\n\t     * \r\n\t     * List all users\r\n\t     * \r\n\t     * Method: GET\r\n\t\t * Url: http://drupal_instance/api_endpoint/user\r\n\t\t * \r\n\t\t * @params  {Object} data the requests data\r\n\t\t * \t\t@key \t{Integer} page The zero-based index of the page to get. defaults to 0., required:false, source:param\r\n\t\t * \t\t@key \t{Integer} pagesize Number of records to get per page., required:false, source:param\r\n\t\t * \t\t@key \t{String} fields The fields to get., required:false, source:param\r\n\t\t * \t\t@key \t{Array} parameters Parameters, required:false, source:param\r\n\t\t * \t\t\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function index(data) {\r\n\t    \tvar indexPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/';\r\n\t    \treturn BaseResource.index(data, indexPath,UserChannel.pubIndexConfirmed,  UserChannel.pubIndexFailed);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t\t * register\r\n\t\t * \r\n\t\t * register a user\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/user/register\r\n\t\t * \r\n\t\t * @param {Object} data The user object, required:true, source:post body\r\n\t\t * \r\n\t\t * @return {Promise}\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction register(data) {\r\n\t\t\t//undefined check\r\n\t    \tdata = (data)?data:{};\r\n\r\n\t\t\t var registerPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + UserResourceConstant.actions.register,\r\n\t\t\t \t requestConfig = {\r\n\t\t \t\t\tmethod: 'POST',\r\n\t\t\t\t\turl : registerPath,\r\n\t\t\t\t\tdata : data\r\n\t\t \t \t  };\r\n\t\t \r\n\t\t \treturn BaseResource.request(requestConfig, UserChannel.pubRegisterConfirmed, UserChannel.pubRegisterFailed);\r\n\t\t};\r\n\t\t\r\n\t\t \r\n\t    /**\r\n\t\t * resendWelcomeEmail\r\n\t\t * \r\n\t\t * Resend the welcome email of a user fetched by uid\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/user/resend_welcome_email\r\n\t\t * \r\n\t\t * @param {Object} data The user object, required:true, source:post body\r\n\t\t * \r\n\t\t * @return {Promise}\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction resendWelcomeEmail(data) {\r\n\t\t\t//undefined check\r\n\t    \tdata = (data)?data:{};\r\n\r\n\t\t\t var resendWelcomeEmailPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + data.uid  + '/' + UserResourceConstant.actions.resend_welcome_email,\r\n\t\t\t \t requestConfig = {\r\n\t\t \t\t\tmethod: 'POST',\r\n\t\t\t\t\turl : resendWelcomeEmailPath\r\n\t\t \t \t  };\r\n\t\t \r\n\t\t \treturn BaseResource.request(requestConfig, UserChannel.pubResendWelcomeEmailConfirmed, UserChannel.pubResendWelcomeEmailFailed);\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * cancel\r\n\t\t * \r\n\t\t * Cancel a user\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/user/cancel\r\n\t\t * \r\n\t\t * @param {Object} data The user object, required:true, source:post body\r\n\t\t * \r\n\t\t * @return {Promise}\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction cancel(data) {\r\n\t\t\t//undefined check\r\n\t    \tdata = (data)?data:{};\r\n\r\n\t\t\t var cancelPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + data.uid  + '/' + UserResourceConstant.actions.cancel,\r\n\t\t\t \t requestConfig = {\r\n\t\t \t\t\tmethod: 'POST',\r\n\t\t\t\t\turl : cancelPath\r\n\t\t \t \t  };\r\n\t\t \r\n\t\t \treturn BaseResource.request(requestConfig, UserChannel.pubCancelConfirmed, UserChannel.pubCancelFailed);\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * PasswordReset\r\n\t\t * \r\n\t\t * PasswordReset a user\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/user/password_reset\r\n\t\t * \r\n\t\t * @param {Object} data The user object, required:true, source:post body\r\n\t\t * \r\n\t\t * @return {Promise}\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction passwordReset(data) {\r\n\t\t\t//undefined check\r\n\t    \tdata = (data)?data:{};\r\n\r\n\t\t\t var passwordResetPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + data.uid  + '/' + UserResourceConstant.actions.password_reset,\r\n\t\t\t \t requestConfig = {\r\n\t\t \t\t\tmethod: 'POST',\r\n\t\t\t\t\turl : passwordResetPath\r\n\t\t \t \t  };\r\n\t\t \r\n\t\t \treturn BaseResource.request(requestConfig, UserChannel.pubPasswordResetConfirmed, UserChannel.pubPasswordResetFailed);\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * requestNewPassword\r\n\t\t * \r\n\t\t * Request a new password, given a user name or e-mail address\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/user/request_new_password\r\n\t\t * \r\n\t\t * @param {Object} data The user object\r\n\t\t * \t\t\t@key {String} name A valid user name or e-mail address, required:true, source:post body\r\n\t\t * \r\n\t\t * \r\n\t\t * @return {Promise}\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction requestNewPassword(data) {\r\n\t\t\t//undefined check\r\n\t    \tdata = (data)?data:{};\r\n\r\n\t\t\t var requestNewPasswordPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + data.uid  + '/' + UserResourceConstant.actions.request_new_password,\r\n\t\t\t \t requestConfig = {\r\n\t\t \t\t\tmethod: 'POST',\r\n\t\t\t\t\turl : requestNewPasswordPath,\r\n\t\t\t\t\tdata : {\r\n\t\t\t\t\t\tname : data.name\r\n\t\t\t\t\t}\r\n\t\t \t \t  };\r\n\t\t \r\n\t\t \treturn BaseResource.request(requestConfig, UserChannel.pubRequestNewPasswordConfirmed, UserChannel.pubRequestNewPasswordFailed);\r\n\t\t};\r\n\t    \r\n\t    \r\n\t\t/**\r\n\t\t * login\r\n\t\t * \r\n\t\t * Login a user for a new session\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/user/login\r\n\t\t * \r\n\t\t * @params  {Object} data The requests data\r\n\t\t * \t\t\t@key \t{String} username A valid username, required:true, source:post body\r\n\t\t * \t\t\t@key \t{String} password A valid password, required:true, source:post body\r\n\t\t * \r\n\t\t * @return \t{Promise} \r\n\t\t * \r\n\t\t**/\t\r\n\t    function login( data ) {\r\n\t\t\t//undefined check\r\n\t    \tdata = (data)?data:{};\r\n\r\n\t\t\tvar pathToLogin = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + UserResourceConstant.actions.login,\r\n\t\t\t\trequestConfig = {\r\n\t\t\t\t\t\turl : pathToLogin,\r\n\t\t\t\t\t\tmethod :'POST',\r\n\t\t\t\t\t\tdata : {\r\n\r\n\t\t\t\t\t\t\tusername : data.username,\r\n\t\t\t\t\t\t\tpassword : data.password\r\n\t\t\t\t\t\t},\r\n\t\t\t\t};\r\n\t    \t\r\n\t\t\treturn BaseResource.request(requestConfig, UserChannel.pubLoginConfirmed, UserChannel.pubLoginFailed);\r\n\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * logout\r\n\t\t * \r\n\t\t * Logout a user session\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/user/logout\r\n\t\t * \r\n\t\t * @return \t{Promise}\r\n\t\t * \r\n\t\t**/\t\r\n\t\tfunction logout() {\r\n\t\t\t \r\n\t\t\tvar pathToLogout = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + UserResourceConstant.actions.logout,\r\n\t\t\t \trequestConfig = {\r\n\t\t\t \t\t\turl \t: pathToLogout,\r\n\t\t\t \t\t\tmethod\t: 'POST'\r\n\t\t\t\t};\r\n\t\t\t \r\n\t\t\treturn BaseResource.request(requestConfig, UserChannel.pubLogoutConfirmed, UserChannel.pubLogoutFailed);\r\n\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * token\r\n\t\t * \r\n\t\t * Returns the CSRF token of the current session.\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/user/token\r\n\t\t * \r\n\t\t * @return \t{Promise}\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction token() {\r\n\t\t\tvar  pathToToken = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + UserResourceConstant.actions.token,\r\n\t\t\t\t requestConfig = {\r\n\t\t\t     \turl\t\t: pathToToken,\r\n\t\t\t     \tmethod\t: 'POST'\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\treturn BaseResource.request(requestConfig,UserChannel.pubTokenConfirmed,  UserChannel.pubTokenFailed);\r\n\r\n\t\t};\r\n\t\t\t\t\t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n    \r\n    /**\r\n\t *  Constants for UserResourceModules\r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in your app.js config section\r\n\t */\r\n\tvar UserResourceConstant =  {\r\n\r\n\t\t// NOTE: This is the default alias aliases for your system resources defined in Drupal\r\n\t\tresourcePath : 'user',\r\n\t\t//actions of user resource\r\n\t\tactions : {\r\n\t\t\t//following actions are defined over their request method (GET, POST, PUT, DELETE) so they are commented out\r\n\t\t\t//retrieve \t\t\t\t: 'retrieve',\r\n\t\t\t//create \t\t\t\t: 'create',\r\n\t\t\t//update \t\t\t\t: 'update',\r\n\t\t\t//delete \t\t\t\t: 'delete',\r\n\t\t    //index \t\t\t\t: 'index',\r\n\t\t\t//\r\n\t\t\tlogin \t\t\t\t\t: 'login',\r\n\t\t\tlogout \t\t\t\t\t: 'logout',\r\n\t\t\ttoken \t\t\t\t\t: 'token',\r\n\t\t\trequest_new_password \t: 'request_new_password',\r\n\t\t\tregister \t\t\t\t: 'register',\r\n\t\t\tcancel \t\t\t\t\t: 'cancel',\r\n\t\t\tpassword_reset \t\t\t: 'password_reset',\r\n\t\t\tresend_welcome_email \t: 'resend_welcome_email'\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * User Constant Modules\r\n\t */\r\n\tangular\r\n\t    .module('d7-services.resources.user.resourceConstant', [])\r\n\t    .constant(\"UserResourceConstant\", UserResourceConstant);\r\n\t\r\n})();\r\n","(function() {\r\n    'use strict';\r\n    \r\n\t/**\r\n\t * Views modules bundle\r\n\t**/\r\n\tangular.module('d7-services.resources.views', \r\n\t\t\t['d7-services.resources.views.resourceConstant', \r\n\t\t\t 'd7-services.resources.views.resource', \r\n\t\t\t 'd7-services.resources.views.channelConstant', \r\n\t\t\t 'd7-services.resources.views.channel',\r\n\t\t\t 'd7-services.resources.views.operatorsConstant']);\r\n})();\r\n",";(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * Views Channel Module\r\n\t */\r\n\tangular.module('d7-services.resources.views.channel', ['d7-services.commons.baseChannel', 'd7-services.resources.views.channelConstant'])\r\n\t\t   .factory('ViewsChannel', ViewsChannel);\r\n\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\tViewsChannel.$inject = [ 'BaseChannel', 'ViewsChannelConstant' ];\r\n\t\r\n\t/**\r\n\t * Notification channel for views resource \r\n\t**/\r\n\t/** @ngInject */\r\n\tfunction ViewsChannel(BaseChannel, ViewsChannelConstant) {\r\n\t\r\n\t\t//setup and return service            \t\r\n        var viewsChannelService = {\r\n  \r\n    \t\tpubRetrieveConfirmed \t: pubRetrieveConfirmed,\r\n    \t\tsubRetrieveConfirmed\t\t: subRetrieveConfirmed,\r\n    \t\tpubRetrieveFailed \t\t: pubRetrieveFailed,\r\n    \t\tsubRetrieveFailed\t\t: subRetrieveFailed\r\n    \t\t\r\n        };\r\n        \r\n        return viewsChannelService;\r\n\r\n        ////////////\r\n        \r\n        //Views retrieve request functions\r\n        \r\n        /**\r\n\t\t * pubRetrieveConfirmed\r\n\t\t * \r\n\t\t * Publish the ViewsRetrieveConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubRetrieveConfirmed(args) {\r\n    \t\tBaseChannel.pubRootEmit(ViewsChannelConstant.retrieveConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t /**\r\n\t\t * subRetrieveConfirmed\r\n\t\t * \r\n\t\t * subscribe for the ViewsRetrieveConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for ViewsRetrieveConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subRetrieveConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( ViewsChannelConstant.retrieveConfirmed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubRetrieveConfirmed\r\n\t\t * \r\n\t\t * Publish the ViewsRetrieveConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubRetrieveFailed(args) {\r\n    \t\tBaseChannel.pubRootEmit(ViewsChannelConstant.retrieveFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subRetrieveFailed\r\n\t\t * \r\n\t\t * subscribe for the ViewsRetrieveFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for ViewsRetrieveFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subRetrieveFailed(_Scope, scopeHandler) {\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( ViewsChannelConstant.retrieveFailed, _Scope, scopeHandler);\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//__________________________________________________________________________________________________________________\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n\r\n    /**\r\n\t *  Constants for ViewsChannel\r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in a config section of angular\r\n\t */\r\n\tvar ViewsChannelConstant =  {\r\n \t\t// Connect action\r\n\t\tretrieveConfirmed\t: 'event:drupal-views-retrieveConfirmed',\r\n\t\tretrieveFailed  \t: 'event:drupal-views-retrieveFailed',\r\n\t};\r\n    \r\n\t/**\r\n\t * Views Channel Constant\r\n\t */\r\n\tangular\r\n\t    .module('d7-services.resources.views.channelConstant', [])\r\n\t    .constant(\"ViewsChannelConstant\", ViewsChannelConstant);\r\n\r\n})();\r\n",";(function() {\r\n    'use strict';\r\n    \r\n    /**\r\n\t *  Constants for views request option names\r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in your app.js config section\r\n\t */\r\n\tvar ViewsOperatorsConstant =  {\r\n\t\t\tsort_operators : {\r\n\t\t\t\tasc\t\t: \"ASC\",\r\n\t\t\t\tdesc\t: \"DESC\"\r\n\t\t\t},\r\n\t\t\tfilter_operators : {\r\n\t\t\t\tis_less_than\t\t\t\t: \"<\",\r\n\t\t\t\tis_less_than_or_equal_to\t: \"<=\",\r\n\t\t\t\tis_equal_to\t\t\t\t\t: \"=\",\r\n\t\t\t\tis_not_equal_to\t\t\t\t: \"!=\",\r\n\t\t\t\tis_greater_than_or_equal_to\t: \">=\",\r\n\t\t\t\tis_greater_than\t\t\t\t: \">\",\r\n\t\t\t\tis_between\t\t\t\t\t: \"between\",\r\n\t\t\t\tis_not_between\t\t\t\t: \"not+between\",\r\n\t\t\t\tregular_expression\t\t\t: \"regular_expression\"\r\n\t \t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Views Constant Modules\r\n\t */\r\n\tangular\r\n\t    .module('d7-services.resources.views.operatorsConstant', [])\r\n\t    .constant(\"ViewsOperatorsConstant\", ViewsOperatorsConstant);\r\n\t\r\n})();\r\n",";(function() {\r\n    'use strict';\r\n\r\n\t/**\r\n\t * Views Resource Modules\r\n\t * \r\n\t * see sourcecode in services/resources/views_resource.inc\r\n\t * \r\n\t**/\r\n    angular.module('d7-services.resources.views.resource', ['d7-services.commons.configurations', 'd7-services.commons.baseResource', 'd7-services.resources.views.resourceConstant', 'd7-services.resources.views.channel'])\r\n    \r\n    /**\r\n\t * ViewsResource\r\n\t * \r\n\t * This service mirrors the Drupal views resource of the services 3.x module.\r\n\t * To use this you have to set following line in your Drupal CORS module settings\r\n\t * \r\n\t**/\r\n    .factory('ViewsResource', ViewsResource);\r\n\r\n    /**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t**/\r\n    ViewsResource.$inject = ['$http', 'DrupalApiConstant', 'BaseResource', 'ViewsResourceConstant', 'ViewsChannel'];\r\n    \r\n\t/** @ngInject */\r\n\tfunction ViewsResource($http, DrupalApiConstant, BaseResource, ViewsResourceConstant, ViewsChannel) { \r\n\t\t\r\n\t\t//setup and return service            \t\r\n        var viewsResourceService = {\r\n        \tretrieve : retrieve\r\n        };\r\n        \r\n        return viewsResourceService;\r\n\r\n        ////////////\r\n\r\n\t\t/**\r\n\t\t * retrieve\r\n\t\t * \r\n\t\t * Retrieves a view.\r\n\t\t * \r\n\t\t * Method: GET \r\n\t\t * Url: http://drupal_instance/api_endpoint/views/{VIEW_NAME}\r\n\t\t * \r\n\t\t * @params  {Object} data The requests data\r\n\t\t * \t\t\t@key {String} view_name The name of the view to get., required:true, source:path\r\n\t\t * \t\t\t@key {String} display_id The display ID of the view to get., required:false, source:param\r\n\t\t * \t\t\t@key {Array} args A list of arguments to pass to the view., required:false, source:param\r\n\t\t * \t\t\t@key {Integer} offset The number of the entry for the page begin with., required:false, source:param\r\n\t\t * \t\t\t@key {Integer} limit The total number of entries to list., required:false, source:param\r\n\t\t * \t\t\t@key {Boolean} format_output Whether to return the raw data results or style the results., required:false, source:param\r\n\t\t * \t\t\t@key {Array} exposed_sortss A list of sort options to pass to the view. These are defined by the exposed sorts on your view, required:false, source:param\r\n\t\t * \t\t\t@key {Array} exposed_filters A list of filters to pass to the view. These are defined by the exposed filters on your view, required:false, source:param\r\n\t\t * \r\n\t\t * \r\n\t\t * @return \t{Promise}\r\n\t\t * \r\n\t\t * Custom view settings\r\n\t\t * exposed filters: \r\n\t\t * \tcreate them in the view under \"Filter criteria\". Expose them for users. Under the more tab in \"Configure filter criterion\" in the field \"Filter identifier\" you can change the field name. Use it like => comment_count=4\r\n\t\t * order by : create them in the view under \"Sort criteria\".  Expose it for users and use it like => sort_by=created&sort_order=ASC\r\n\t\t * \r\n\t\t *\r\n\t\t **/\r\n\t\t function retrieve(data){\r\n\t\t\tvar _data = {};\r\n\r\n\t\t\t//we angular.merge \"deep copy\" because we don't want to change the views/controllers values\r\n\t\t\tangular.merge(_data, data);\r\n\t\t\r\n\t\t\tvar retrievePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + ViewsResourceConstant.resourcePath + '/' + _data.view_name;\r\n\t\t\t\r\n\t\t\tdelete _data.view_name;\t\t\t\r\n\t\t\t\r\n\t\t\t//prepare params\r\n\t\t\tvar format = undefined,\r\n\t\t\t\tpreparedParams  = undefined,\r\n\t\t\t\tpreparedParamsArray = [];\r\n\t\t\t\r\n\t\t\tvar exposedFiltersFieldsWithOperators = [];\r\n\t\t\t//collect all exposed filters with operators\r\n\t\t\tif(_data.exposed_filters) {\r\n\t\t\t\tvar fieldName = undefined;\r\n\t\t\t\tangular.forEach(_data.exposed_filters , function(value, key)  {\r\n\t\t\t\t\t//if a key ends with _op\r\n\t\t\t\t\tif(key.substr(key.length - 3) == '_op') {\r\n\t\t\t\t\t\tfieldName = key.split('_op').shift();\r\n\t\t\t\t\t\texposedFiltersFieldsWithOperators.push(fieldName);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\r\n\t\t\t//prepare exposed filters fields that have operators\r\n\t\t\tangular.forEach(_data.exposed_filters , function(value, key)  {\r\n\t\t\t\t//if a key is in exposedFiltersFieldsWithOperators array\r\n\t\t\t\tif(exposedFiltersFieldsWithOperators.indexOf(key) > -1) {\r\n\t\t\t\t\tdelete _data.exposed_filters[key];\r\n\t\t\t\t\tpreparedParamsArray.push(BaseResource.prepareGetParams(value, key, 'array_key_value'));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tangular.forEach(_data, function(value , key) {\r\n\t\t\t\tif(key === 'exposed_filters' || key === 'exposed_sorts') { format = 'json'; }\r\n\t\t\t\t\r\n\t\t\t\tpreparedParams = BaseResource.prepareGetParams(value, key, format);\r\n\t\t\t\tif(preparedParams) {\r\n\t\t\t\t\tpreparedParamsArray.push(preparedParams);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tformat = undefined;\r\n\t\t    });\r\n\t\t\t\t\r\n\t\t\tif(preparedParamsArray.length > 0) {\r\n\t\t\t\tretrievePath += '?'+ preparedParamsArray.join('&');\r\n\t\t\t}\r\n\t\t\t\r\n    \t\treturn BaseResource.retrieve( retrievePath, ViewsChannel.pubRetrieveConfirmed,  ViewsChannel.pubRetrieveFailed);\r\n\r\n\t\t};\r\n\t\t\t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n    \r\n    /**\r\n\t *  Constants for ViewsResourceModules \r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in your app.js config section\r\n\t */\r\n\tvar ViewsResourceConstant =  {\r\n\r\n\t \t\t// NOTE: This is the default alias aliases for your views resources defined in Drupal\r\n\t \t\tresourcePath : 'views',\r\n\t \t\t//actions of node resource\r\n\t \t\tactions : {\r\n\t \t\t\t//retrieve \t: 'retrieve'\r\n\t \t\t},\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Views Constant Modules\r\n\t */\r\n\tangular\r\n\t    .module('d7-services.resources.views.resourceConstant', [])\r\n\t    .constant(\"ViewsResourceConstant\", ViewsResourceConstant);\r\n\t\r\n})();\r\n"],"sourceRoot":"/source/"}