{"version":3,"sources":["src/commons/commons.baseChannel.js","src/commons/commons.baseResource.js","src/commons/commons.bundle.js","src/commons/commons.drupalApiConfig.js","src/commons/commons.helperService.js","src/commons/commons.validationConstant.js","src/commons/accessControl/accessControl.bundle.js","src/commons/accessControl/acl.constant.js","src/commons/authentication/authentication.bundle.js","src/commons/authentication/authentication.channel.js","src/commons/authentication/authentication.channelConstant.js","src/commons/authentication/authentication.httpIntercepter.js","src/commons/authentication/authentication.service.js","src/commons/authentication/authentication.serviceConstant.js","src/commons/directives/directives.bundle.js","src/commons/directives/directives.toggleByAccessLevel.js","src/commons/http/http.bundle.js","src/commons/http/http.configurations.js","src/commons/http/http.requestAcceptIntercepter.js","src/resources/node/node.bundle.js","src/resources/node/node.channel.js","src/resources/node/node.channelConstant.js","src/resources/node/node.resource.js","src/resources/node/node.resourceConstant.js","src/resources/user/user.bundle.js","src/resources/user/user.channel.js","src/resources/user/user.channelConstant.js","src/resources/user/user.resource.js","src/resources/user/user.resourceConstant.js","src/resources/system/system.bundle.js","src/resources/system/system.channel.js","src/resources/system/system.channelConstant.js","src/resources/system/system.resource.js","src/resources/system/system.resourceConstant.js","bower_components/angular-cookies/angular-cookies.min.js","bower_components/angular-cookies/angular-cookies.js","bower_components/ngstorage/ngStorage.min.js"],"names":["BaseChannel","$rootScope","subRootEmit","eventName","_Scope","scopeHandler","mapArgs","unsubsSopeHandler","$on","event","args","pubRootEmit","$emit","baseChannelService","angular","module","factory","$inject","baseResource","$http","$q","DrupalApiConstant","request","requestConfig","pubError","pubSuccess","errors","length","reject","success","responseData","status","headers","config","console","log","error","responseError","retrieve","retrievePath","url","method","create","data","createPath","update","updatePath","_delete","deletePath","index","indexPath","options","page","pagesize","Object","keys","parameters","fields","prepareIndexGetParams","type","getParamsString","prepaeredParams","forEach","value","key","prepareGetParams","preparePostData","values","format","postData","undefined","formats","array_of_keys","array_of_values","arrayValues","k","this","push","getParams","array","array_keys","array_key_value","json","parseInt","NaN","join","baseResourceService","delete","drupal_instance","api_endpoint","responseFormat","session_expiration_time","session_expiration_unite","publicFilePath","privateFilePath","constant","DrupalHelperService","structureField","_label","language","label","isArray","field_array","i","l","item","und","Date","obj","date","getMonth","getDate","getFullYear","getHours","getMinutes","getSeconds","sprintf","regex","a","arguments","pad","str","len","chr","leftJustify","padding","Array","justify","prefix","minWidth","zeroPad","customPadChar","diff","slice","formatBaseX","base","precision","number","2","8","16","toString","formatString","doFormat","substring","valueIndex","flags","textTransform","j","positivePrefix","prefixBaseX","flagsl","charAt","isFinite","Error","indexOf","String","fromCharCode","toUpperCase","Math","round","abs","toLowerCase","replace","drupalHelperService","ValidationConstant","isRequired","isInteger","accessControlConstant","roles","accessLevels","public","anon","user","admin","AuthenticationChannel","AuthenticationChannelConstant","pubAuthenticationLoginConfirmed","authentication_loginConfirmed","subAuthenticationLoginConfirmed","prepArgs","pubAuthenticationLoginFailed","authentication_loginFailed","subAuthenticationLoginFailed","pubAuthenticationLogoutConfirmed","authentication_logoutConfirmed","subAuthenticationLogoutConfirmed","pubAuthenticationLogoutFailed","authentication_logoutFailed","subAuthenticationLogoutFailed","pubAuthenticationRefreshConnectionConfirmed","authentication_refreshConnectionConfirmed","subAuthenticationRefreshConnectionConfirmed","pubAuthenticationRefreshConnectionFailed","authentication_refreshConnectionFailed","subAuthenticationRefreshConnectionFailed","pubAuthenticationTryConnectConfirmed","authentication_tryConnectConfirmed","subAuthenticationTryConnectConfirmed","pubAuthenticationTryConnectFailed","authentication_tryConnectFailed","subAuthenticationTryConnectFailed","pubAuthenticationConnectionStateUpdated","authentication_connectionStateUpdated","subAuthenticationConnectionStateUpdated","pubAuthenticationCurrentUserUpdated","authentication_currentUserUpdated","subAuthenticationCurrentUserUpdated","authenticationChannelService","AuthenticationHttpInterceptor","$injector","doRequestCongiguration","tokenHeaders","invoke","AuthenticationService","getAuthenticationHeaders","extend","withCredentials","intercepter","AuthenticationServiceConstant","SystemResource","UserResource","$cookies","isAuthorized","accessLevel","currentUser","getCurrentUser","isGranted","prop","login","loginData","setAuthenticationHeaders","token","setLastConnectTime","now","setConnectionState","uid","setCookies","sessid","session_name","setCurrentUser","logout","delAuthenticationHeaders","delCookies","anonymousUser","refreshConnection","refreshTokenFromServer","tryConnect","connect","newUser","getConnectionState","newState","userIsConected","authenticationHeaders","newToken","newData","Authorization","X-CSRF-TOKEN","newSessid","newSession_name","put","sessionCookieOptions","remove","path","getLastConnectTime","lastConnectTime","newTimeInMs","domain","authenticationService","1","cache","timestamp","toggleByAccesslevel","restrict","link","$scope","element","attrs","updateCSS","userRoles","toggleAction","css","prevDisp","currentUserUpdatedHandler","$observe","al","$eval","directive","hTTPConfigurations","$httpProvider","interceptors","RequestIntercepterAccept","NodeChannel","NodeChannelConstant","pubRetrieveConfirmed","node_retrieveConfirmed","subRetrieveConfirmed","pubRetrieveFailed","node_retrieveFailed","subRetrieveFailed","pubCreateConfirmed","node_createConfirmed","subCreateConfirmed","pubCreateFailed","node_createFailed","subCreateFailed","pubUpdateConfirmed","node_updateConfirmed","subUpdateConfirmed","pubUpdateFailed","node_updateFailed","subUpdateFailed","pubDeleteConfirmed","node_deleteConfirmed","subDeleteConfirmed","pubDeleteFailed","node_deleteFailed","subDeleteFailed","pubIndexConfirmed","node_indexConfirmed","subIndexConfirmed","pubIndexFailed","node_indexFailed","subIndexFailed","pubFilesConfirmed","node_filesConfirmed","subFilesConfirmed","pubFilesFailed","node_filesFailed","subFilesFailed","pubCommentsConfirmed","node_commentsConfirmed","subCommentsConfirmed","pubCommentsFailed","node_commentsFailed","subCommentsFailed","pubAttachFileConfirmed","node_attachFileConfirmed","subAttachFileConfirmed","pubAttachFileFailed","node_attachFileFailed","subAttachFileFailed","nodeChannelService","NodeResource","NodeResourceConstant","resourcePath","nid","createdata","name","pass","mail","notify","updateData","files","filesPath","comments","commentsPath","attachFile","attachFilePath","nodeResourceService","actions","attach_file","UserChannel","UserChannelConstant","user_retrieveConfirmed","user_retrieveFailed","user_createConfirmed","user_createFailed","user_updateConfirmed","user_updateFailed","user_deleteConfirmed","user_deleteFailed","user_indexConfirmed","user_indexFailed","pubLoginConfirmed","user_loginConfirmed","subLoginConfirmed","pubLoginFailed","user_loginFailed","subLoginFailed","pubLogoutConfirmed","user_logoutConfirmed","subLogoutConfirmed","pubLogoutFailed","user_logoutFailed","subLogoutFailed","pubTokenConfirmed","user_tokenConfirmed","subTokenConfirmed","pubTokenFailed","user_tokenFailed","subTokenFailed","pubRegisterConfirmed","user_registerConfirmed","subRegisterConfirmed","pubRegisterFailed","user_registerFailed","subRegisterFailed","pubResendWelcomeEmailConfirmed","user_resend_welcome_emailConfirmed","subResendWelcomeEmailConfirmed","pubResendWelcomeEmailFailed","user_resend_welcome_emailFailed","subResendWelcomeEmailFailed","pubCancelConfirmed","user_cancelConfirmed","subCancelConfirmed","pubCancelFailed","user_cancelFailed","subCancelFailed","pubPasswordResetConfirmed","user_password_resetConfirmed","subPasswordResetConfirmed","pubPasswordResetFailed","user_password_resetFailed","subPasswordResetFailed","pubRequestNewPasswordConfirmed","user_xxxConfirmed","subRequestNewPasswordConfirmed","pubRequestNewPasswordFailed","user_xxxFailed","subRequestNewPasswordFailed","user_requestNewPasswordFailed","userChannelService","user_requestNewPasswordConfirmed","user_passwordResetConfirmed","user_passwordResetFailed","user_resendWelcomeEmailConfirmed","user_resendWelcomeEmailFailed","UserResourceConstant","register","registerPath","resendWelcomeEmail","resendWelcomeEmailPath","resend_welcome_email","cancel","cancelPath","passwordReset","passwordResetPath","password_reset","requestNewPassword","requestNewPasswordPath","request_new_password","pathToLogin","username","password","pathToLogout","pathToToken","userResourceService","SystemChannel","SystemChannelConstant","pubConnectConfirmed","system_connectConfirmed","subConnectConfirmed","pubConnectFailed","system_connectFailed","subConnectFailed","pubGetVariableConfirmed","system_getVariableConfirmed","subGetVariableConfirmed","pubGetVariableFailed","system_getVariableFailed","subGetVariableFailed","pubSetVariableConfirmed","system_setVariableConfirmed","subSetVariableConfirmed","pubSetVariableFailed","system_setVariableFailed","subSetVariableFailed","pubDelVariableConfirmed","system_delVariableConfirmed","subDelVariableConfirmed","pubDelVariableFailed","system_delVariableFailed","subDelVariableFailed","systemChannelService","SystemResourceConstant","connectPath","get_variable","getVariablePath","set_variable","setVariablePath","defer","del_variable","delVariablePath","systemResourceService","p","c","n","$$CookieWriter","$document","$log","$browser","cookiePath","baseHref","rawDocument","expires","isDefined","isUndefined","isString","encodeURIComponent","toUTCString","secure","cookieLength","warn","cookie","provider","$CookiesProvider","defaults","$get","$$cookieReader","$$cookieWriter","get","getObject","fromJson","getAll","putObject","toJson","$$CookieWriterProvider","window","b","define","amd","exports","require","setKeyPrefix","TypeError","d","e","setSerializer","setDeserializer","getItem","set","setItem","f","g","h","random","localStorage","removeItem","m","noop","o","$default","$sync","$reset","$apply","equals","copy","$watch","addEventListener","newValue"],"mappings":"CAAC,WACA,YAmBA,SAASA,GAAYC,GAwBhB,QAASC,GAAYC,EAAWC,EAAQC,EAAcC,GAGrD,GAAIC,GAAoBN,EAAWO,IAAIL,EAAW,SAASM,EAAOC,GAEhEL,EAAaC,EAAQI,KAUvB,OANAN,GAAOI,IAAI,WAAY,WAEtBD,MAIMA,EAYR,QAASI,GAAYR,EAAWO,GAE9BT,EAAWW,MAAMT,EAAWO,GAnDlC,GAAIG,IACFF,YAAcA,EACRT,YAAcA,EAGhB,OAAOW,GArBdC,QAAQC,OAAO,gDACVC,QAAQ,cAAehB,GAM5BA,EAAYiB,SAAY;CCbxB,WACA,YAmBA,SAASC,GAAaC,EAAOC,EAAIC,GA+B1B,QAASC,GAAQC,EAAeC,EAAUC,GAE5C,GAAIC,KAEJ,OAAoB,IAAjBA,EAAOC,QACTH,EAASE,GACFN,EAAGQ,OAAOF,IAGXP,EAAMI,GACXM,QAAQ,SAASC,EAAcC,EAAQC,EAASC,GAChDC,QAAQC,IAAIL,EAAcC,EAAQC,EAASC,GAC3CR,EAAWK,KAEXM,MAAM,SAASC,EAAeN,EAAQC,EAASC,GAC/CC,QAAQC,IAAIE,EAAeN,EAAQC,EAASC,GAC5CT,EAASa,KAiBT,QAASC,GAASC,EAAcf,EAAUC,GAEzC,GAAIF,IACLiB,IAAOD,EACPE,OAAS,MAGR,OAAOnB,GAAQC,EAAeC,EAAUC,GAiBzC,QAASiB,GAAQC,EAAMC,EAAYpB,EAAUC,GAE5C,GAAIF,IACLiB,IAAOI,EACPH,OAAU,OACVE,KAAUA,EAGT,OAAOrB,GAAQC,EAAeC,EAAUC,GAgBzC,QAASoB,GAAQF,EAAMG,EAAYtB,EAAUC,GAE5C,GAAIF,IACLiB,IAAOM,EACPL,OAAU,MACVE,KAAQA,EAGP,OAAOrB,GAAQC,EAAeC,EAAUC,GAezC,QAASsB,GAASC,EAAYxB,EAAUC,GAEvC,GAAIF,IACLiB,IAAOQ,EACPP,OAAU,SAGT,OAAOnB,GAAQC,EAAeC,EAAUC,GAgBzC,QAASwB,GAAMN,EAAMO,EAAW1B,EAAUC,GAEzC,GAAI0B,KAEa,MAAdR,EAAKS,OAAcD,EAAQC,KAAOT,EAAKS,MACvCT,EAAKU,WAAWF,EAAQE,SAAWV,EAAKU,UACtCC,OAAOC,KAAKZ,EAAKa,YAAY7B,OAAS,IAAKwB,EAAQK,WAAab,EAAKa,YACvEF,OAAOC,KAAKZ,EAAKc,QAAQ9B,OAAS,IAAKwB,EAAQM,OAASd,EAAKc,QAE7DN,IACLD,GAAa,IAAMQ,EAAsBP,GAGvC,IAAI5B,IACLiB,IAAOU,EACPT,OAAS,MAGR,OAAOnB,GAAQC,EAAeC,EAAUC,GAWzC,QAASiC,GAAsBP,GAC9B,GAAIQ,GAAO,GACbC,EAAkB,GAClBC,EAAkB,EAEhB,OADA3B,SAAQC,IAAIgB,GACRA,GAGPrC,QAAQgD,QAAQX,EAAS,SAASY,EAAQC,GAC9B,eAARA,EAAwBL,EAAO,kBAClB,WAARK,IAAoBL,EAAO,SAEnCE,EAAkBI,EAAiBF,EAAOC,EAAKL,GAC/CzB,QAAQC,IAAI0B,GAEZD,GAAuC,IAAnBA,EAAuBC,EAAgB,IAAIA,EAE/DA,EAAkB,GACZF,EAAO,KAGPC,GAhBmB,GA8BvB,QAASM,GAAgBC,EAAQC,GAChC,GAAIC,GAAWC,OACZC,GACFC,eAAkB,EAClBC,iBAAoB,EAIxB,KAAIF,EAAQH,GAAW,MAAO,EAI/B,IAAc,kBAAXA,GAA8Bd,OAAOC,KAAKY,GAAQxC,OAAS,EAAG,CAEhE,GAAI+C,KAKJ,OAJA5D,SAAQgD,QAAQK,EAAQ,SAASJ,EAAOY,GACpCZ,KAAU,GAASa,KAAKC,KAAKF,IAC9BD,GACAA,EAAY/C,SAAU0C,EAAWK,GAC7BL,EAGR,GAAc,oBAAXD,GAAgCd,OAAOC,KAAKY,GAAQxC,OAAS,EAAG,CAElE,GAAI+C,KAKJ,OAJA5D,SAAQgD,QAAQK,EAAQ,SAASJ,EAAOY,GACpCZ,KAAU,GAASa,KAAKC,KAAKd,IAC9BW,GACAA,EAAY/C,SAAU0C,EAAWK,GAC7BL,GAiBL,QAASJ,GAAiBE,EAAQH,EAAKI,GACtClC,QAAQC,IAAIgC,EAAQH,EAAKI,EACvB,IAAIU,MACHP,GACDQ,OAAU,EACVC,YAAe,EACfC,iBAAoB,EACpBC,MAAS,EAIf,KAAGlB,EAGM,OAAO,CADf,IADAA,EAAM,EAAMA,GAAI,EACbA,KAAQ,EAAQ,OAAO,CAO3B,IAHAG,EAAUA,GAAqB,IAAXA,EAAcA,GAAO,EAGtCA,KAAW,EAAQ,OAAO,CAExB,IAAIgB,SAAShB,KAAYiB,EAAAA,GAC1B9B,OAAOC,KAAKY,GAAQxC,QAAU,EAChC,OAAO,CAKT,KAAIyC,EAEH,OADGD,GAAqB,IAAXA,KAAgBW,EAAYd,EAAM,IAAMG,GAC9CW,CAIR,KAAIP,EAAQH,GAAW,MAAO,EAI9B,IAAc,SAAXA,EAIF,MAHAtD,SAAQgD,QAAQK,EAAQ,SAASJ,EAAOY,GACpCZ,GAASe,EAAUD,KAAKF,EAAI,IAAMZ,KAE/Be,EAAUO,KAAK,IAIvB,IAAc,UAAXjB,GAAsBd,OAAOC,KAAKY,GAAQxC,OAAS,EAAG,CAExD,GAAI+C,KAKJ,OAJA5D,SAAQgD,QAAQK,EAAQ,SAASJ,EAAOY,GACpCZ,KAAU,GAASa,KAAKC,KAAKF,IAC9BD,GACAA,EAAY/C,QAAUmD,EAAUD,KAAKb,EAAM,IAAMU,EAAYW,KAAK,MAC9DP,EAAUO,KAAK,KAIvB,MAAc,eAAXjB,GACFtD,QAAQgD,QAAQK,EAAQ,SAASJ,EAAOY,GACpCZ,GAASe,EAAUD,KAAKb,EAAM,IAAMW,KAEjCG,EAAUO,KAAK,MAKT,oBAAXjB,GAEFtD,QAAQgD,QAAQK,EAAQ,SAASJ,EAAOY,GACpCZ,GAASe,EAAUD,KAAKb,EAAI,IAAIW,EAAE,KAAMZ,KAErCe,EAAUO,KAAK,MALvB,OA7UJ,GAAIC,IACHrB,iBAAmBA,EACnBC,gBAAiBA,EAEjB5C,QAAWA,EACXgB,SAAYA,EACZI,OAAWA,EACXG,OAAWA,EACX0C,SAAWxC,EACXE,MAAUA,EAGL,OAAOqC,GA5BdxE,QAAQC,OAAO,8CAA+C,iDACzDC,QAAQ,eAAgBE,GAM7BA,EAAaD,SAAW,QAAS,KAAM;CCbvC,WACG,YAEAH,SAAQC,OAAO,WAAY,8CAA+C,+CAAgD,qCAAsC,2CACrI,4CAA6C,6CAA8C,+CAAgD,8CAA+C;CCJxN,WACG,YAKH,IAAIM,IAMAmE,gBAAkB,yBAGlBC,aAAe,OAIfC,eAAiB,mBAafC,wBAA0B,IAG5BC,yBAA2B,UAG3BC,eAAiB,YAGjBC,gBAAkB,aAOtBhF,SACKC,OAAO,mDACPgF,SAAS,oBAAqB1E;CClDnC,WACA,YAoBA,SAAS2E,KAkBF,QAASC,GAAelC,EAAOmC,EAAQC,GAGxC,GAAIC,GAAQF,GAAU,OAGtB,IAAIpF,QAAQuF,QAAQtC,GAAQ,CAG1B,IAAK,GADDuC,MACKC,EAAG,EAAGC,EAAEzC,EAAMpC,OAAU6E,EAAFD,EAAKA,IAAK,CACvC,GAAIE,KACJA,GAAKL,GAASrC,EAAMwC,GAEpBD,EAAYzB,KAAK4B,GAEnB,OACEC,IAAKJ,GAIT,GAAIvC,YAAiB4C,MAAM,CAEzB,GAAIC,IACF7C,OACE8C,KAAO9C,EAAM+C,WAAW,EAAG,IAAI/C,EAAMgD,UAAU,IAAIhD,EAAMiD,cAAc,MAAMjD,EAAMkD,WAAW,IAAIlD,EAAMmD,aAAa,IAAInD,EAAMoD,cAInI,QACCT,KACGE,KAQL,QAASQ,KAuBN,GAAIC,GAAQ,wFACRC,EAAIC,UACJhB,EAAI,EACJnC,EAASkD,EAAEf,KAGXiB,EAAM,SAASC,EAAKC,EAAKC,EAAKC,GAC3BD,IACHA,EAAM,IAER,IAAIE,GAAWJ,EAAI9F,QAAU+F,EAAO,GAAK,GAAII,OAAM,EAAIJ,EAAMD,EAAI9F,SAAW,GACzE0D,KAAKsC,EACR,OAAOC,GAAcH,EAAMI,EAAUA,EAAUJ,GAI7CM,EAAU,SAAShE,EAAOiE,EAAQJ,EAAaK,EAAUC,EAASC,GACpE,GAAIC,GAAOH,EAAWlE,EAAMpC,MAQ5B,OAPIyG,GAAO,IAEPrE,EADE6D,IAAgBM,EACVV,EAAIzD,EAAOkE,EAAUE,EAAeP,GAEpC7D,EAAMsE,MAAM,EAAGL,EAAOrG,QAAU6F,EAAI,GAAIY,EAAM,KAAK,GAAQrE,EAAMsE,MAAML,EAAOrG,SAGnFoC,GAILuE,EAAc,SAASvE,EAAOwE,EAAMP,EAAQJ,EAAaK,EAAUO,EAAWN,GAEhF,GAAIO,GAAS1E,IAAU,CAOvB,OANAiE,GAAUA,GAAUS,IAClBC,EAAO,KACPC,EAAO,IACPC,GAAO,MACPL,IAAU,GACZxE,EAAQiE,EAASR,EAAIiB,EAAOI,SAASN,GAAOC,GAAa,EAAG,KAAK,GAC1DT,EAAQhE,EAAOiE,EAAQJ,EAAaK,EAAUC,IAInDY,EAAe,SAAS/E,EAAO6D,EAAaK,EAAUO,EAAWN,EAASC,GAI5E,MAHkB,QAAdK,GAAoClE,SAAdkE,IACxBzE,EAAQA,EAAMsE,MAAM,EAAGG,IAElBT,EAAQhE,EAAO,GAAI6D,EAAaK,EAAUC,EAASC,IAIxDY,EAAW,SAASC,EAAWC,EAAYC,EAAOjB,EAAUO,EAAW7E,GACzE,GAAI8E,GAAQT,EAAQvF,EAAQ0G,EAAepF,CAE3C,IAAkB,OAAdiF,EACF,MAAO,GAIT,IAMII,GANAxB,GAAc,EACdyB,EAAiB,GACjBnB,GAAU,EACVoB,GAAc,EACdnB,EAAgB,IAChBoB,EAASL,EAAMvH,MAEnB,KAAKyH,EAAI,EAAGF,GAAaK,EAAJH,EAAYA,IAC/B,OAAQF,EAAMM,OAAOJ,IACrB,IAAK,IACHC,EAAiB,GACjB,MACF,KAAK,IACHA,EAAiB,GACjB,MACF,KAAK,IACHzB,GAAc,CACd,MACF,KAAK,IACHO,EAAgBe,EAAMM,OAAOJ,EAAI,EACjC,MACF,KAAK,IACHlB,GAAU,EACVC,EAAgB,GAChB,MACF,KAAK,IACHmB,GAAc,EAuBlB,GAbErB,EAHGA,EAEmB,MAAbA,GACGX,EAAEf,KACkB,MAAvB0B,EAASuB,OAAO,IACblC,EAAEW,EAASI,MAAM,EAAG,MAEpBJ,EAND,EAUE,EAAXA,IACFA,GAAYA,EACZL,GAAc,IAGX6B,SAASxB,GACZ,KAAM,IAAIyB,OAAM,0CAgBlB,QAVElB,EAHGA,EAEoB,MAAdA,GACIlB,EAAEf,KACkB,MAAxBiC,EAAUgB,OAAO,IACblC,EAAEkB,EAAUH,MAAM,EAAG,MAErBG,EAND,OAAOmB,QAAQhG,GAAQ,GAAK,EAAc,MAATA,EAAgB,EAAIW,OAUnEP,EAAQkF,EAAa3B,EAAE2B,EAAWZ,MAAM,EAAG,KAAOf,EAAEf,KAE5C5C,GACR,IAAK,IACH,MAAOmF,GAAac,OAAO7F,GAAQ6D,EAAaK,EAAUO,EAAWN,EAASC,EAChF,KAAK,IACH,MAAOW,GAAac,OAAOC,cAAc9F,GAAQ6D,EAAaK,EAAUO,EAAWN,EACrF,KAAK,IACH,MAAOI,GAAYvE,EAAO,EAAGuF,EAAa1B,EAAaK,EAAUO,EAAWN,EAC9E,KAAK,IACH,MAAOI,GAAYvE,EAAO,EAAGuF,EAAa1B,EAAaK,EAAUO,EAAWN,EAC9E,KAAK,IACH,MAAOI,GAAYvE,EAAO,GAAIuF,EAAa1B,EAAaK,EAAUO,EAAWN,EAC/E,KAAK,IACH,MAAOI,GAAYvE,EAAO,GAAIuF,EAAa1B,EAAaK,EAAUO,EAAWN,GAC1E4B,aACL,KAAK,IACH,MAAOxB,GAAYvE,EAAO,GAAIuF,EAAa1B,EAAaK,EAAUO,EAAWN,EAC/E,KAAK,IACL,IAAK,IAMH,MALAO,IAAU1E,GAAS,EAEnB0E,EAASsB,KAAKC,MAAMvB,EAASA,EAAS,GACtCT,EAAkB,EAATS,EAAa,IAAMY,EAC5BtF,EAAQiE,EAASR,EAAIoC,OAAOG,KAAKE,IAAIxB,IAAUD,EAAW,KAAK,GACxDT,EAAQhE,EAAOiE,EAAQJ,EAAaK,EAAUC,EACvD,KAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IAMH,MALAO,IAAU1E,EACViE,EAAkB,EAATS,EAAa,IAAMY,EAC5B5G,GAAU,gBAAiB,UAAW,eAAe,MAAMkH,QAAQhG,EAAKuG,gBACxEf,GAAiB,WAAY,eAAe,SAASQ,QAAQhG,GAAQ,GACrEI,EAAQiE,EAAS+B,KAAKE,IAAIxB,GAAQhG,GAAQ+F,GACnCT,EAAQhE,EAAOiE,EAAQJ,EAAaK,EAAUC,GAASiB,IAChE,SACE,MAAOH,IAIX,OAAO5E,GAAO+F,QAAQ9C,EAAO0B,GAjPhC,GAAIqB,IACFhD,QAAYA,EACZnB,eAAkBA,EAGpB,OAAOmE,GAvBdtJ,QAAQC,OAAO,kDACVC,QAAQ,sBAAuBgF;CCPpC,WACG,YAKH,IAAIqE,IAGCC,WAAa,wBACbC,UAAY,iCAMjBzJ,SACKC,OAAO,uDACPgF,SAAS,qBAAsBsE;CClBpC,WACG,YAEAvJ,SAAQC,OAAO,yBAA0B;CCH5C,WACG,YAKH,IAAIyJ,IAECC,OACW,iBACA,qBACA,iBAELC,cACIC,SAAW,IACXC,MAAS,kBACTC,MAAU,sBACVC,OAAU,kBAOzBhK,SACKC,OAAO,2DACPgF,SAAS,wBAAyByE;CC1BxC,WACI,YAKH1J,SACKC,OAAO,gDAAiD,+DAAgE,uDAAwD,+DAAgE,+DAAgE;CCPtT,WACC,YAmBA,SAASgK,GAAsB/K,EAAagL,GAqDxC,QAASC,GAAgCvK,GACxC,GAAIA,GAAOA,CAEXV,GAAYW,YAAYqK,EAA8BE,8BAA+BxK,GActF,QAASyK,GAAgC/K,EAAQC,GAChD,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAa8K,EAA8BE,8BAA+B9K,EAAQC,EAAc+K,EAEpI,OAAO7K,GAeR,QAAS8K,GAA6B3K,GACrC,GAAIA,IAAQgB,OAAQhB,EAEpBV,GAAYW,YAAYqK,EAA8BM,2BAA4B5K,GAcnF,QAAS6K,GAA6BnL,EAAQC,GAC7C,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAa8K,EAA8BM,2BAA4BlL,EAAQC,EAAc+K,EAEjI,OAAO7K,GAgBR,QAASiL,GAAiC9K,GACzC,GAAIA,GAAOA,CACXV,GAAYW,YAAYqK,EAA8BS,+BAAgC/K,GAcvF,QAASgL,GAAiCtL,EAAQC,GACjD,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAa8K,EAA8BS,+BAAgCrL,EAAQC,EAAc+K,EAErI,OAAO7K,GAeR,QAASoL,GAA8BjL,GACtC,GAAIA,IAAQgB,OAAQhB,EACpBV,GAAYW,YAAYqK,EAA8BY,4BAA6BlL,GAcpF,QAASmL,GAA8BzL,EAAQC,GAC9C,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAa8K,EAA8BY,4BAA6BxL,EAAQC,EAAc+K,EAElI,OAAO7K,GAiBR,QAASuL,GAA4CpL,GACpD,GAAIA,GAAOA,CAEXV,GAAYW,YAAYqK,EAA8Be,0CAA2CrL,GAclG,QAASsL,GAA4C5L,EAAQC,GAC5D,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAa8K,EAA8Be,0CAA2C3L,EAAQC,EAAc+K,EAEhJ,OAAO7K,GAeR,QAAS0L,GAAyCvL,GACjD,GAAIA,IAAQgB,OAAQhB,EAEpBV,GAAYW,YAAYqK,EAA8BkB,uCAAwCxL,GAc/F,QAASyL,GAAyC/L,EAAQC,GACzD,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAa8K,EAA8BkB,uCAAwC9L,EAAQC,EAAc+K,EAE7I,OAAO7K,GAiBR,QAAS6L,GAAqC1L,GAC7C,GAAIA,GAAOA,CAEXV,GAAYW,YAAYqK,EAA8BqB,mCAAoC3L,GAc3F,QAAS4L,GAAqClM,EAAQC,GACrD,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAa8K,EAA8BqB,mCAAoCjM,EAAQC,EAAc+K,EAEzI,OAAO7K,GAeR,QAASgM,GAAkC7L,GAC1C,GAAIA,IAAQgB,OAAQhB,EAEpBV,GAAYW,YAAYqK,EAA8BwB,gCAAiC9L,GAcxF,QAAS+L,GAAkCrM,EAAQC,GAClD,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAa8K,EAA8BwB,gCAAiCpM,EAAQC,EAAc+K,EAEtI,OAAO7K,GAeR,QAASmM,GAAwChM,GAChD,GAAIA,GAAOA,CAEXV,GAAYW,YAAYqK,EAA8B2B,sCAAuCjM,GAc9F,QAASkM,GAAwCxM,EAAQC,GACxD,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAa8K,EAA8B2B,sCAAuCvM,EAAQC,EAAc+K,EAE5I,OAAO7K,GAeR,QAASsM,GAAoCnM,GAC5C,GAAIA,GAAOA,CAEXV,GAAYW,YAAYqK,EAA8B8B,kCAAmCpM,GAc1F,QAASqM,GAAoC3M,EAAQC,GACpD,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAa8K,EAA8B8B,kCAAmC1M,EAAQC,EAAc+K,EAExI,OAAO7K,GA5aL,GAAIyM,IAGN/B,gCAAmCA,EACnCE,gCAAmCA,EACnCE,6BAAiCA,EACjCE,6BAAgCA,EAGhCC,iCAAoCA,EACjCE,iCAAmCA,EACnCC,8BAAkCA,EAClCE,8BAAiCA,EAGpCC,4CAA+CA,EAC5CE,4CAA+CA,EAC/CC,yCAA6CA,EAC7CE,yCAA4CA,EAG5CC,qCAAuCA,EACvCE,qCAAwCA,EACxCC,kCAAqCA,EACrCE,kCAAsCA,EAGzCC,wCAA2CA,EAC3CE,wCAA2CA,EAG3CC,oCAAuCA,EACvCE,oCAAuCA,EAGrC,OAAOC,GApDdlM,QAAQC,OAAO,wDAAyD,4CAA6C,iEAChHC,QAAQ,wBAAyB+J,GAOtCA,EAAsB9J,SAAY,cAAe;CCdlD,WACI,YAOH,IAAI+J,IAEHE,8BAAkC,0CAClCI,2BAA+B,uCAE/BG,+BAAkC,2CAClCG,4BAAgC,wCAEhCG,0CAA8C,sDAC9CG,uCAA2C,mDAE3CG,mCAAsC,+CACtCG,gCAAmC,4CAEnCG,sCAA0C,kDAE1CG,kCAAqC,8CAOtChM,SACCC,OAAO,mEACHgF,SAAS,gCAAiCiF;CCjChD,WACC,YAmBA,SAASiC,GAA8BC,GAuBhC,QAASC,GAAwBlL,GAChC,GAAImL,GAAe,IAyBnB,OAlBAF,GAAUG,QAAQ,wBAAyB,SAAUC,GACjDF,EAAeE,EAAsBC,8BAOrCH,GACAtM,QAAQ0M,OAAOvL,EAAOD,QAASoL,GAOnCnL,EAAOwL,iBAAkB,EAElBxL,EA9CR,GAAIyL,IACHpM,QAAW6L,EAGZ,OAAOO,GApBd5M,QAAQC,OAAO,gEAAiE,yDAC3EC,QAAQ,gCAAiCiM,GAM9CA,EAA8BhM,SAAY;CCd3C,WACI,YAuCH,SAASqM,GAAuBrN,EAAYoB,EAAmBsM,EAA+B5C,EAAuB6C,EAAgBC,EAAcC,EAAU3M,EAAOC,GA2C7J,QAAS2M,GAAaC,EAAavD,GASjC,GAPHwD,EAAcC,IAEE5J,SAAVmG,IACNA,EAAQwD,EAAYxD,OAIC,KAAfuD,EAAsB,OAAO,CAGnC,KAAK,GADEG,IAAY,EACV5H,EAAI,EAAGA,EAAIyH,EAAYrM,OAAQ4E,IACvC,IAAK,GAAI6H,KAAQ3D,GACduD,EAAYzH,IAAM0H,EAAYxD,MAAM2D,KACrCD,GAAY,EAIZ,OAAOA,GASf,QAASE,GAAMC,GAEd,MAAOT,GACJQ,MAAMC,GACLzM,QAAQ,SAAUC,EAAcC,EAAQC,EAASC,GACjDsM,EAAyBzM,EAAa0M,OAEtCC,EAAmB9H,KAAK+H,OACxBC,EAA8C,IAA1B7M,EAAa+I,KAAK+D,KAAW,GAAM,GACvDC,EAAW/M,EAAagN,OAAQhN,EAAaiN,cAC7CC,EAAelN,EAAa+I,MAE5BE,EAAsBE,gCAAgCnJ,KAEtDM,MAAM,SAAUC,EAAeN,EAAQC,EAASC,GAChD8I,EAAsBM,6BAA6BhJ,KAYxD,QAAS4M,KAER,MAAOpB,GACJoB,SACCpN,QAAQ,SAAUC,EAAcC,EAAQC,EAASC,GACjDiN,IACAC,IACAR,GAAmB,GACnBK,EAAerB,EAA8ByB,eAE7CrE,EAAsBS,iCAAiC1J,KAEvDM,MAAM,SAAUC,EAAeN,EAAQC,EAASC,GAChD8I,EAAsBY,8BAA8BtJ,KAazD,QAASgN,KAGR,MAAOC,KACHzN,QAAS,SAASC,EAAcC,EAAQC,EAASC,GACjD,MAAOsN,KACJ1N,QAAQ,SAASC,EAAcC,EAAQC,EAASC,GAChD8I,EAAsBe,4CAA4ChK,OAGrEM,MAAO,SAASC,EAAeN,EAAQC,EAASC,GAChD8I,EAAsBkB,yCAAyC5J,KAYpE,QAASkN,KAEP,MAAO3B,GACH4B,UACC3N,QAAS,SAAUC,EAAcC,EAAQC,EAASC,GACzCwM,EAAmB9H,KAAK+H,OACxBG,EAAW/M,EAAagN,OAAQhN,EAAaiN,cAC7CJ,EAA8C,IAA1B7M,EAAa+I,KAAK+D,KAAW,GAAM,GACvDI,EAAelN,EAAa+I,MAE5BE,EAAsBqB,qCAAqCtK,KAE5DM,MAAM,SAASC,EAAeN,EAAQC,EAASC,GAC/C8I,EAAsBwB,kCAAkClK,KAavE,QAASiN,KAER,MAAOzB,GACJW,QACC3M,QAAQ,SAASC,EAAcC,EAAQC,EAASC,GAC9CsM,EAAyBzM,EAAa0M,SAExCpM,MAAM,SAASC,MAepB,QAAS6L,KAAmB,MAAOD,GAQnC,QAASe,GAAeS,GACpBxB,GAAewB,IACXxB,EAAcwB,EACZ1E,EAAsB8B,oCAAoC4C,IAYpE,QAASC,KAAuB,MAAO,IAAiB,GAAK,EAQ7D,QAASf,GAAmBgB,GAClBA,GAAYC,IACbA,EAAiB,GAAW,GAAK,EAClC7E,EAAsB2B,wCAAwCkD,IAYhE,QAASrC,KAA6B,MAAOsC,GAY7C,QAAStB,GAAyBuB,GAEjC,GAAIC,IACRC,cAAkBF,EAClBG,eAAkBH,EAKXD,GACCA,EAAsBG,eAAiBF,IACzCD,EAAwBE,GAKzBF,EAAwBE,EAY1B,QAASb,KACPW,EAAwB,KAsB1B,QAAShB,GAAWqB,EAAWC,GAE9BrB,EAASoB,EACfnB,EAAeoB,EAIfrC,EAASsC,IAAID,EAAiBD,EAAWG,GASpC,QAASlB,KAERL,EAAS,KACfC,EAAe,KAIfjB,EAASwC,OAAOvB,EAAcsB,EAAqBE,MAWpD,QAASb,KAAuB,MAAOE,GAQvC,QAASjB,GAAmBgB,GAE3BA,EAAW,GAAW,GAAK,EAElBA,GAAYC,IACbA,EAAiBD,EAClB5E,EAAsB2B,wCAAwCkD,IAYtE,QAASY,KAAuB,MAAOC,GAQvC,QAAShC,GAAmBiC,GAC3B,GAAIA,GAAcvL,SAASuL,EACxBA,KAAgBtL,EAAAA,GAAqB,EAAdsL,IAC1BD,EAAkBC,GArXnB,GAAId,IAAiB,EACpB3B,EAAeN,EAA8ByB,cAE7CqB,EAAmB,EAEnBZ,EAAwB,KAExBf,EAAS,KACTC,EAAe,KACfsB,GACCM,OAAYtP,EAAkBmE,gBAC9B+K,KAAS,KAODK,GACF7C,aAAgBA,EAChBM,MAAUA,EACbY,OAAWA,EACXI,kBAAsBA,EACtBmB,mBAAuBA,EACvBd,mBAAuBA,EACvBnC,yBAA4BA,EAC5BW,eAAoBA,EAGnB,OAAO0C,GAjEX9P,QAAQC,OAAO,wDACX,+CACC,+DACA,uDACA,kDACA,gDACA,cAWJC,QAAQ,wBAAyBsM,GAMlCA,EAAsBrM,SAAW,aAAc,oBAAqB,gCAAiC,wBAAyB,iBAAkB,eAAgB,WAAY,QAAS;CC7BzL,WACI,YAOH,IAAI0M,IAEHyB,eACER,IAAS,EACTnE,OACIoG,EAAM,kBAEVC,MAAW,EACXC,UAAcpK,KAAK+H,OAUtB5N,SACKC,OAAO,mEACPgF,SAAS,gCAAiC4H;CC5B/C,WACG,YAEA7M,SAAQC,OAAO,4CAA6C;CCH/D,WACG,YAaA,SAASiQ,GAAoBjG,EAAuBuC,GAEhD,OACC2D,SAAU,IAEPC,KAAM,SAASC,EAAQC,EAASC,GAgC5B,QAASC,KAEFC,GAAavD,IAEI,QAAhBwD,EAEElE,EAAsBS,aAAaC,GAG7BoD,EAAQK,IAAI,UAAWC,GAFvBN,EAAQK,IAAI,UAAW,QAIV,QAAhBD,IAEHlE,EAAsBS,aAAaC,GAGhCoD,EAAQK,IAAI,UAAW,QAF7BL,EAAQK,IAAI,UAAWC,KAS9B,QAASC,GAA0B9G,GAClCsG,EAAOtG,KAAOA,EACX0G,EAAYJ,EAAOtG,KAAKJ,MACxB6G,IAxDPH,EAAOtG,KAAOyC,EAAsBY,gBAEpC,IAESF,GACFwD,EAHHE,EAAWN,EAAQK,IAAI,WAClBF,EAAYJ,EAAOtG,KAAKJ,KAKhC+G,GADyB,SAAvBH,EAAMG,cAAkD,SAAvBH,EAAMG,aAC1B,OAEAH,EAAMG,aAKnBzG,EAAsBgC,oCAAoCoE,EAAQQ,GAElEN,EAAMO,SAAS,sBAAuB,SAASC,GAExCA,IAEF7D,EAAcmD,EAAOW,MAAMD,IAG5BP,QA1ChBxQ,QACKC,OAAO,gEAAiE,uDAAwD,yDAChIgR,UAAU,sBAAuBf,GAMtCA,EAAoB/P,SAAW,wBAAyB;CCX3D,WACA,YAKAH,SAAQC,OAAO,sCAAuC,oDAAqD,iEACtGkB,OAAO+P;CCPZ,WACA,YAmBA,SAASA,GAAoBC,GAE5BA,EAAcC,aAAarN,KAAK,4BAChCoN,EAAcC,aAAarN,KAAK,iCAjBjC/D,QAAQC,OAAO,qDAAsD,+DAAgE,iEAChIkB,OAAO+P,GAMZA,EAAmB/Q,SAAY;CCbhC,WACC,YAqBA,SAASkR,GAAyBjF,GAuB3B,QAAS5L,GAAQW,GAQtB,MANMiL,GAAUG,QAAQ,oBAAqB,SAAUhM,GAC7CY,EAAOD,QAAgB,OAAIX,EAAkBqE,eAC7CzD,EAAOD,QAAQ,gBAAkBX,EAAkBqE,kBAItDzD,EA5BF,GAAIyL,IACHpM,QAAWA,EAGZ,OAAOoM,GAvBd5M,QAAQC,OAAO,gEAAiE,iDAC3EC,QAAQ,2BAA4BmR,GASzCA,EAAyBlR,SAAY;CChBrC,WACG,YAKHH,SAAQC,OAAO,wCAAyC,wDAAyD,gDAAiD,uDAAwD;CCN1N,WACA,YAoBA,SAASqR,GAAYpS,EAAaqS,GAsE9B,QAASC,GAAqB5R,GAC7B,GAAIA,GAAOA,CACXV,GAAYW,YAAY0R,EAAoBE,uBAAwB7R,GAcrE,QAAS8R,GAAqBpS,EAAQC,GACrC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAamS,EAAoBE,uBAAwBnS,EAAQC,EAAc+K,EAEnH,OAAO7K,GAeR,QAASkS,GAAkB/R,GAC1B,GAAIA,IAAQgB,OAAQhB,EACpBV,GAAYW,YAAY0R,EAAoBK,oBAAqBhS,GAclE,QAASiS,GAAkBvS,EAAQC,GAClC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAamS,EAAoBK,oBAAqBtS,EAAQC,EAAc+K,EAEhH,OAAO7K,GAgBR,QAASqS,GAAmBlS,GAC3B,GAAIA,GAAOA,CACXwB,SAAQC,IAAI,8BACZnC,EAAYW,YAAY0R,EAAoBQ,qBAAsBnS,GAcnE,QAASoS,GAAmB1S,EAAQC,GACnC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAamS,EAAoBQ,qBAAsBzS,EAAQC,EAAc+K,EAEjH,OAAO7K,GAeR,QAASwS,GAAgBrS,GACxB,GAAIA,IAAQgB,OAAQhB,EACpBwB,SAAQC,IAAI,2BACZnC,EAAYW,YAAY0R,EAAoBW,kBAAmBtS,GAchE,QAASuS,GAAgB7S,EAAQC,GAChC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAamS,EAAoBW,kBAAmB5S,EAAQC,EAAc+K,EAE9G,OAAO7K,GAgBR,QAAS2S,GAAmBxS,GAC3B,GAAIA,GAAOA,CACXwB,SAAQC,IAAI,8BACZnC,EAAYW,YAAY0R,EAAoBc,qBAAsBzS,GAcnE,QAAS0S,GAAmBhT,EAAQC,GACnC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAamS,EAAoBc,qBAAsB/S,EAAQC,EAAc+K,EAEjH,OAAO7K,GAcR,QAAS8S,GAAgB3S,GACxB,GAAIA,IAAQgB,OAAQhB,EACpBwB,SAAQC,IAAI,2BACZnC,EAAYW,YAAY0R,EAAoBiB,kBAAmB5S,GAchE,QAAS6S,GAAgBnT,EAAQC,GAChC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAamS,EAAoBiB,kBAAmBlT,EAAQC,EAAc+K,EAE9G,OAAO7K,GAgBR,QAASiT,GAAmB9S,GAC3B,GAAIA,GAAOA,CACXwB,SAAQC,IAAI,8BACZnC,EAAYW,YAAY0R,EAAoBoB,qBAAsB/S,GAcnE,QAASgT,GAAmBtT,EAAQC,GACnC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAamS,EAAoBoB,qBAAsBrT,EAAQC,EAAc+K,EAEjH,OAAO7K,GAeR,QAASoT,GAAgBjT,GACxB,GAAIA,IAAQgB,OAAQhB,EACpBwB,SAAQC,IAAI,2BACZnC,EAAYW,YAAY0R,EAAoBuB,kBAAmBlT,GAchE,QAASmT,GAAgBzT,EAAQC,GAChC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAamS,EAAoBuB,kBAAmBxT,EAAQC,EAAc+K,EAE9G,OAAO7K,GAgBR,QAASuT,GAAkBpT,GAC1B,GAAIA,GAAOA,CACXwB,SAAQC,IAAI,6BACZnC,EAAYW,YAAY0R,EAAoB0B,oBAAqBrT,GAclE,QAASsT,GAAkB5T,EAAQC,GAClC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAamS,EAAoB0B,oBAAqB3T,EAAQC,EAAc+K,EAEhH,OAAO7K,GAeR,QAAS0T,GAAevT,GACvB,GAAIA,IAAQgB,OAAQhB,EACpBwB,SAAQC,IAAI,0BACZnC,EAAYW,YAAY0R,EAAoB6B,iBAAkBxT,GAc/D,QAASyT,GAAe/T,EAAQC,GAC/B,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAamS,EAAoB6B,iBAAkB9T,EAAQC,EAAc+K,EAE7G,OAAO7K,GAgBR,QAAS6T,GAAkB1T,GAC1B,GAAIA,GAAOA,CACXwB,SAAQC,IAAI,6BACZnC,EAAYW,YAAY0R,EAAoBgC,oBAAqB3T,GAclE,QAAS4T,GAAkBlU,EAAQC,GAClC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAamS,EAAoBgC,oBAAqBjU,EAAQC,EAAc+K,EAEhH,OAAO7K,GAeR,QAASgU,GAAe7T,GACvB,GAAIA,IAAQgB,OAAQhB,EACpBwB,SAAQC,IAAI,0BACZnC,EAAYW,YAAY0R,EAAoBmC,iBAAkB9T,GAc/D,QAAS+T,GAAerU,EAAQC,GAC/B,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAamS,EAAoBmC,iBAAkBpU,EAAQC,EAAc+K,EAE7G,OAAO7K,GAiBR,QAASmU,GAAqBhU,GAC7B,GAAIA,GAAOA,CACXwB,SAAQC,IAAI,gCACZnC,EAAYW,YAAY0R,EAAoBsC,uBAAwBjU,GAcrE,QAASkU,GAAqBxU,EAAQC,GACrC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAamS,EAAoBsC,uBAAwBvU,EAAQC,EAAc+K,EAEnH,OAAO7K,GAeR,QAASsU,GAAkBnU,GAC1B,GAAIA,IAAQgB,OAAQhB,EACpBwB,SAAQC,IAAI,6BACZnC,EAAYW,YAAY0R,EAAoByC,oBAAqBpU,GAclE,QAASqU,GAAkB3U,EAAQC,GAClC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAamS,EAAoByC,oBAAqB1U,EAAQC,EAAc+K,EAEhH,OAAO7K,GAkBR,QAASyU,GAAuBtU,GAC/B,GAAIA,GAAOA,CACXwB,SAAQC,IAAI,kCACZnC,EAAYW,YAAY0R,EAAoB4C,yBAA0BvU,GAcvE,QAASwU,GAAuB9U,EAAQC,GACvC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAamS,EAAoB4C,yBAA0B7U,EAAQC,EAAc+K,EAErH,OAAO7K,GAeR,QAAS4U,GAAoBzU,GAC5B,GAAIA,IAAQgB,OAAQhB,EACpBwB,SAAQC,IAAI,+BACZnC,EAAYW,YAAY0R,EAAoB+C,sBAAuB1U,GAcpE,QAAS2U,GAAoBjV,EAAQC,GACpC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAamS,EAAoB+C,sBAAuBhV,EAAQC,EAAc+K,EAElH,OAAO7K,GA3qBL,GAAI+U,IAGNhD,qBAAwBA,EACxBE,qBAAuBA,EACvBC,kBAAsBA,EACtBE,kBAAqBA,EAGlBC,mBAAuBA,EACvBE,mBAAsBA,EACtBC,gBAAoBA,EACpBE,gBAAoBA,EAGpBC,mBAAuBA,EACvBE,mBAAsBA,EACtBC,gBAAoBA,EACpBE,gBAAoBA,EAGpBC,mBAAuBA,EACvBE,mBAAsBA,EACtBC,gBAAoBA,EACpBE,gBAAoBA,EAGpBC,kBAAsBA,EACtBE,kBAAqBA,EACrBC,eAAoBA,EACpBE,eAAmBA,EAGlBC,kBAAqBA,EACrBE,kBAAqBA,EACrBC,eAAmBA,EACnBE,eAAoBA,EAGpBC,qBAAuBA,EACvBE,qBAAuBA,EACvBC,kBAAqBA,EACrBE,kBAAsBA,EAGtBC,uBAAyBA,EACzBE,uBAAyBA,EACzBC,oBAAuBA,EACvBE,oBAAuBA,EAIzB,OAAOC,GAtEdxU,QAAQC,OAAO,gDAAiD,4CAA6C,yDACxGC,QAAQ,cAAeoR,GAO5BA,EAAYnR,SAAY,cAAe;CCdvC,WACG,YAOH,IAAIoR,IAEDE,uBAA2B,sCAC3BG,oBAAyB,mCAEzBG,qBAAwB,oCACxBG,kBAAwB,iCAExBG,qBAAwB,oCACxBG,kBAAwB,iCAExBG,qBAAwB,oCACxBG,kBAAwB,iCAExBG,oBAAyB,mCACzBG,iBAAuB,gCAEvBG,oBAAwB,mCACxBG,iBAAuB,gCAEvBG,uBAA0B,sCAC1BG,oBAAyB,mCAEzBG,yBAA2B,wCAC3BG,sBAA2B,qCAO9BtU,SACKC,OAAO,wDAAyD,iDAChEgF,SAAS,sBAAuBsM;CCzCrC,WACG,YA0BH,SAASkD,GAAapU,EAAOC,EAAIF,EAAcG,EAAmBmU,EAAsBpD,GAkCpF,QAAS9P,GAASK,GACjB,GAAIJ,GAAelB,EAAkBmE,gBAAkBnE,EAAkBoE,aAAe+P,EAAqBC,aAAe,IAAM9S,EAAK+S,GACvI,OAAOxU,GAAaoB,SAAUC,EAAc6P,EAAYK,kBAAmBL,EAAYE,sBA8BxF,QAAS5P,GAAOC,GAEf,GAAIC,GAAavB,EAAkBmE,gBAAkBnE,EAAkBoE,aAAe+P,EAAqBC,aAEvGE,GACNC,KAAOjT,EAAKiT,KACZC,KAAOlT,EAAKkT,KACZC,KAAOnT,EAAKmT,KAiBV,QAZGnT,EAAKZ,QAAyB,GAAfY,EAAKZ,UACtB4T,EAAW5T,OAAUY,EAAW,OAAE,EAAE,IAGlCA,EAAKoT,QAAyB,GAAfpT,EAAKoT,UACtBJ,EAAWI,OAAUpT,EAAW,OAAE,EAAE,GAGjCA,EAAK8H,QACRkL,EAAWlL,MAAQvJ,EAAagD,gBAAgBvB,EAAK8H,MAAO,oBAGtDvJ,EAAawB,OAAQiT,EAAY/S,EAAYwP,EAAYW,gBAAiBX,EAAYQ,oBAmB9F,QAAS/P,GAAOF,GAEf,GAAIG,GAAazB,EAAkBmE,gBAAkBnE,EAAkBoE,aAAe+P,EAAqBC,aAAe,IAAM9S,EAAK+S,IAEjIM,GACNJ,KAAOjT,EAAKiT,KACZE,KAAOnT,EAAKmT,KAGV,OAAO5U,GAAa2B,OAAQmT,EAAYlT,EAAYsP,EAAYiB,gBAAiBjB,EAAYc,oBAkB9F,QAASnQ,GAAQJ,GAChB,GAAIK,GAAa3B,EAAkBmE,gBAAkBnE,EAAkBoE,aAAe+P,EAAqBC,aAAe,IAAM9S,EAAK+S,GACrI,OAAOxU,GAAAA,UAAoB8B,EAAYoP,EAAYuB,gBAAiBvB,EAAYoB,oBAsBjF,QAASvQ,GAAMN,GACd,GAAIO,GAAY7B,EAAkBmE,gBAAkBnE,EAAkBoE,aAAe+P,EAAqBC,aAAe,GACzH,OAAOvU,GAAa+B,MAAMN,EAAMO,EAAWkP,EAAY6B,eAAgB7B,EAAY0B,mBAmBpF,QAASmC,GAAMtT,GACd,GAAIuT,GAAY7U,EAAkBmE,gBAAkBnE,EAAkBoE,aAAe+P,EAAqBC,aAAe,IAAM9S,EAAK+S,GACpI,OAAOxU,GAAAA,UAAoBgV,EAAW9D,EAAYuB,gBAAiBvB,EAAYoB,oBAsBhF,QAAS2C,GAASxT,GACjB,GAAIyT,GAAe/U,EAAkBmE,gBAAkBnE,EAAkBoE,aAAe+P,EAAqBC,aAAe,IAAM9S,EAAK+S,GACvI,OAAOxU,GAAAA,UAAoBkV,EAAchE,EAAYuB,gBAAiBvB,EAAYoB,oBAsBnF,QAAS6C,GAAW1T,GAEnB,GAAI2T,GAAiBjV,EAAkBmE,gBAAkBnE,EAAkBoE,aAAe+P,EAAqBC,aAAe,IAAM9S,EAAK+S,GACzI,OAAOxU,GAAAA,UAAoBoV,EAAgBlE,EAAYuB,gBAAiBvB,EAAYoB,oBArOlF,GAAI+C,IAEHjU,SAAYA,EACfI,OAAWA,EACXG,OAAWA,EACX0C,SAAWxC,EACRE,MAAUA,EAEVgT,MAASA,EACfE,SAAYA,EACZE,WAAaA,EAGR,OAAOE,GAnCXzV,QAAQC,OAAO,iDAAkD,+CAAgD,wDAAyD,+CAAgD,+CAUzNC,QAAQ,eAAgBuU,GAMzBA,EAAatU,SAAW,QAAS,KAAM,eAAgB,oBAAqB,uBAAwB;CCxBvG,WACG,YAOH,IAAIuU,IAGHC,aAAe,OAEfe,SAQCP,MAAS,QACTE,SAAY,WACZM,YAAc,eAQhB3V,SACKC,OAAO,yDAA0D,iDACjEgF,SAAS,uBAAwByP;CCjCvC,WACI,YAKH1U,SACKC,OAAO,0CAA2C,0DAA2D,kDAAmD,yDAA0D;CCP/N,WACA,YAoBA,SAAS2V,GAAY1W,EAAa2W,GAoG9B,QAASrE,GAAqB5R,GAC7B,GAAIA,GAAOA,CACXV,GAAYW,YAAYgW,EAAoBC,uBAAwBlW,GAcrE,QAAS8R,GAAqBpS,EAAQC,GACrC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoBC,uBAAwBxW,EAAQC,EAAc+K,EAEnH,OAAO7K,GAeR,QAASkS,GAAkB/R,GAC1B,GAAIA,IAAQgB,OAAQhB,EACpBV,GAAYW,YAAYgW,EAAoBE,oBAAqBnW,GAclE,QAASiS,GAAkBvS,EAAQC,GAClC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoBE,oBAAqBzW,EAAQC,EAAc+K,EAEhH,OAAO7K,GAgBR,QAASqS,GAAmBlS,GAC3B,GAAIA,GAAOA,CACXwB,SAAQC,IAAI,8BACZnC,EAAYW,YAAYgW,EAAoBG,qBAAsBpW,GAcnE,QAASoS,GAAmB1S,EAAQC,GACnC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoBG,qBAAsB1W,EAAQC,EAAc+K,EAEjH,OAAO7K,GAeR,QAASwS,GAAgBrS,GACxB,GAAIA,IAAQgB,OAAQhB,EACpBwB,SAAQC,IAAI,2BACZnC,EAAYW,YAAYgW,EAAoBI,kBAAmBrW,GAchE,QAASuS,GAAgB7S,EAAQC,GAChC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoBI,kBAAmB3W,EAAQC,EAAc+K,EAE9G,OAAO7K,GAgBR,QAAS2S,GAAmBxS,GAC3B,GAAIA,GAAOA,CACXwB,SAAQC,IAAI,8BACZnC,EAAYW,YAAYgW,EAAoBK,qBAAsBtW,GAcnE,QAAS0S,GAAmBhT,EAAQC,GACnC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoBK,qBAAsB5W,EAAQC,EAAc+K,EAEjH,OAAO7K,GAcR,QAAS8S,GAAgB3S,GACxB,GAAIA,IAAQgB,OAAQhB,EACpBwB,SAAQC,IAAI,2BACZnC,EAAYW,YAAYgW,EAAoBM,kBAAmBvW,GAchE,QAAS6S,GAAgBnT,EAAQC,GAChC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoBM,kBAAmB7W,EAAQC,EAAc+K,EAE9G,OAAO7K,GAgBR,QAASiT,GAAmB9S,GAC3B,GAAIA,GAAOA,CACXwB,SAAQC,IAAI,8BACZnC,EAAYW,YAAYgW,EAAoBO,qBAAsBxW,GAcnE,QAASgT,GAAmBtT,EAAQC,GACnC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoBO,qBAAsB9W,EAAQC,EAAc+K,EAEjH,OAAO7K,GAeR,QAASoT,GAAgBjT,GACxB,GAAIA,IAAQgB,OAAQhB,EACpBwB,SAAQC,IAAI,2BACZnC,EAAYW,YAAYgW,EAAoBQ,kBAAmBzW,GAchE,QAASmT,GAAgBzT,EAAQC,GAChC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoBQ,kBAAmB/W,EAAQC,EAAc+K,EAE9G,OAAO7K,GAgBR,QAASuT,GAAkBpT,GAC1B,GAAIA,GAAOA,CACXwB,SAAQC,IAAI,6BACZnC,EAAYW,YAAYgW,EAAoBS,oBAAqB1W,GAclE,QAASsT,GAAkB5T,EAAQC,GAClC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoBS,oBAAqBhX,EAAQC,EAAc+K,EAEhH,OAAO7K,GAeR,QAAS0T,GAAevT,GACvB,GAAIA,IAAQgB,OAAQhB,EACpBwB,SAAQC,IAAI,0BACZnC,EAAYW,YAAYgW,EAAoBU,iBAAkB3W,GAc/D,QAASyT,GAAe/T,EAAQC,GAC/B,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoBU,iBAAkBjX,EAAQC,EAAc+K,EAE7G,OAAO7K,GAgBR,QAAS+W,GAAkB5W,GAC1B,GAAIA,GAAOA,CAEXV,GAAYW,YAAYgW,EAAoBY,oBAAqB7W,GAclE,QAAS8W,GAAkBpX,EAAQC,GAClC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoBY,oBAAqBnX,EAAQC,EAAc+K,EAEhH,OAAO7K,GAeR,QAASkX,GAAe/W,GACvB,GAAIA,IAAQgB,OAAQhB,EAEpBV,GAAYW,YAAYgW,EAAoBe,iBAAkBhX,GAc/D,QAASiX,GAAevX,EAAQC,GAC/B,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoBe,iBAAkBtX,EAAQC,EAAc+K,EAE7G,OAAO7K,GAgBR,QAASqX,GAAmBlX,GAC3B,GAAIA,GAAOA,CACXV,GAAYW,YAAYgW,EAAoBkB,qBAAsBnX,GAcnE,QAASoX,GAAmB1X,EAAQC,GACnC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoBkB,qBAAsBzX,EAAQC,EAAc+K,EAEjH,OAAO7K,GAeR,QAASwX,GAAgBrX,GACxB,GAAIA,IAAQgB,OAAQhB,EACpBV,GAAYW,YAAYgW,EAAoBqB,kBAAmBtX,GAchE,QAASuX,GAAgB7X,EAAQC,GAChC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoBqB,kBAAmB5X,EAAQC,EAAc+K,EAE9G,OAAO7K,GAiBR,QAAS2X,GAAkBxX,GAC1B,GAAIA,GAAOA,CACXV,GAAYW,YAAYgW,EAAoBwB,oBAAqBzX,GAclE,QAAS0X,GAAkBhY,EAAQC,GAClC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoBwB,oBAAqB/X,EAAQC,EAAc+K,EAEhH,OAAO7K,GAeR,QAAS8X,GAAe3X,GACvB,GAAIA,IAAQgB,OAAQhB,EAEpBV,GAAYW,YAAYgW,EAAoB2B,iBAAkB5X,GAc/D,QAAS6X,GAAenY,EAAQC,GAC/B,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoB2B,iBAAkBlY,EAAQC,EAAc+K,EAE7G,OAAO7K,GAgBR,QAASiY,GAAqB9X,GAC7B,GAAIA,GAAOA,CACXV,GAAYW,YAAYgW,EAAoB8B,uBAAwB/X,GAcrE,QAASgY,GAAqBtY,EAAQC,GACrC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoB8B,uBAAwBrY,EAAQC,EAAc+K,EAEnH,OAAO7K,GAeR,QAASoY,GAAkBjY,GAC1B,GAAIA,IAAQgB,OAAQhB,EAEpBV,GAAYW,YAAYgW,EAAoBiC,oBAAqBlY,GAclE,QAASmY,GAAkBzY,EAAQC,GAClC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoBiC,oBAAqBxY,EAAQC,EAAc+K,EAEhH,OAAO7K,GAgBR,QAASuY,GAA+BpY,GACvC,GAAIA,GAAOA,CACXV,GAAYW,YAAYgW,EAAoBoC,mCAAoCrY,GAcjF,QAASsY,GAA+B5Y,EAAQC,GAC/C,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoBoC,mCAAoC3Y,EAAQC,EAAc+K,EAE/H,OAAO7K,GAeR,QAAS0Y,GAA4BvY,GACpC,GAAIA,IAAQgB,OAAQhB,EAEpBV,GAAYW,YAAYgW,EAAoBuC,gCAAiCxY,GAc9E,QAASyY,GAA4B/Y,EAAQC,GAC5C,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoBuC,gCAAiC9Y,EAAQC,EAAc+K,EAE5H,OAAO7K,GAgBR,QAAS6Y,GAAmB1Y,GAC3B,GAAIA,GAAOA,CACXV,GAAYW,YAAYgW,EAAoB0C,qBAAsB3Y,GAcnE,QAAS4Y,GAAmBlZ,EAAQC,GACnC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoB0C,qBAAsBjZ,EAAQC,EAAc+K,EAEjH,OAAO7K,GAeR,QAASgZ,GAAgB7Y,GACxB,GAAIA,IAAQgB,OAAQhB,EAEpBV,GAAYW,YAAYgW,EAAoB6C,kBAAmB9Y,GAchE,QAAS+Y,GAAgBrZ,EAAQC,GAChC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoB6C,kBAAmBpZ,EAAQC,EAAc+K,EAE9G,OAAO7K,GAgBR,QAASmZ,GAA0BhZ,GAClC,GAAIA,GAAOA,CACXwB,SAAQC,IAAI,qCACZnC,EAAYW,YAAYgW,EAAoBgD,6BAA8BjZ,GAc3E,QAASkZ,GAA0BxZ,EAAQC,GAC1C,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoBgD,6BAA8BvZ,EAAQC,EAAc+K,EAEzH,OAAO7K,GAeR,QAASsZ,GAAuBnZ,GAC/B,GAAIA,IAAQgB,OAAQhB,EACpBV,GAAYW,YAAYgW,EAAoBmD,0BAA2BpZ,GAcxE,QAASqZ,GAAuB3Z,EAAQC,GACvC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoBmD,0BAA2B1Z,EAAQC,EAAc+K,EAEtH,OAAO7K,GAiBR,QAASyZ,GAA+BtZ,GACvC,GAAIA,GAAOA,CACXV,GAAYW,YAAYgW,EAAoBsD,kBAAmBvZ,GAchE,QAASwZ,GAA+B9Z,EAAQC,GAC/C,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoBsD,kBAAmB7Z,EAAQC,EAAc+K,EAE9G,OAAO7K,GAeR,QAAS4Z,GAA4BzZ,GACpC,GAAIA,IAAQgB,OAAQhB,EACpBV,GAAYW,YAAYgW,EAAoByD,eAAgB1Z,GAc7D,QAAS2Z,GAA4Bja,EAAQC,GAC5C,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAayW,EAAoB2D,8BAA+Bla,EAAQC,EAAc+K,EAE1H,OAAO7K,GA1kCL,GAAIga,KAGNjI,qBAAwBA,EACxBE,qBAAuBA,EACvBC,kBAAsBA,EACtBE,kBAAqBA,EAGlBC,mBAAuBA,EACvBE,mBAAsBA,EACtBC,gBAAoBA,EACpBE,gBAAoBA,EAGpBC,mBAAuBA,EACvBE,mBAAsBA,EACtBC,gBAAoBA,EACpBE,gBAAoBA,EAGpBC,mBAAuBA,EACvBE,mBAAsBA,EACtBC,gBAAoBA,EACpBE,gBAAoBA,EAGpBC,kBAAsBA,EACtBE,kBAAqBA,EACrBC,eAAoBA,EACpBE,eAAmBA,EAGnB+D,kBAAsBA,EACtBE,kBAAqBA,EACrBC,eAAoBA,EACpBE,eAAmBA,EAGtBC,qBAAwBA,EACxBE,qBAAuBA,EACvBC,kBAAsBA,EACtBE,kBAAqBA,EAGrBC,+BAAkCA,EAClCE,+BAAiCA,EACjCC,4BAA+BA,EAC/BE,4BAA+BA,EAG/BC,mBAAsBA,EACtBE,mBAAqBA,EACrBC,gBAAmBA,EACnBE,gBAAmBA,EAGnBnC,kBAAqBA,EACrBE,kBAAoBA,EACpBC,eAAmBA,EACnBE,eAAkBA,EAGlBC,mBAAuBA,EACpBE,mBAAsBA,EACtBC,gBAAoBA,EACpBE,gBAAoBA,EAGpByB,0BAA8BA,EAC9BE,0BAA6BA,EAC7BC,uBAA4BA,EAC5BE,uBAA2BA,EAG3BC,+BAAmCA,EACnCE,+BAAkCA,EAClCC,4BAAgCA,EAChCE,4BAAgCA,EAIjC,OAAOE,IApGdzZ,QAAQC,OAAO,gDAAiD,4CAA6C,yDACxGC,QAAQ,cAAe0V,GAO5BA,EAAYzV,SAAY,cAAe;CCdvC,WACG,YAOH,IAAI0V,IAEDC,uBAA6B,sCAC7BC,oBAA2B,mCAE3BC,qBAA0B,oCAC1BC,kBAA0B,iCAE1BC,qBAA0B,oCAC1BC,kBAA0B,iCAE1BC,qBAA0B,oCAC1BC,kBAA0B,iCAE1BC,oBAA2B,mCAC3BC,iBAAyB,gCAEzBmD,iCAAqC,gDACrCF,8BAAmC,6CAEnCjB,qBAA4B,oCAC5BG,kBAA0B,iCAE1BiB,4BAAiC,2CACjCC,yBAA+B,wCAE/BC,iCAAqC,gDACrCC,8BAAmC,6CAEnCzC,oBAA2B,mCAC3BG,iBAAyB,gCAEzBG,uBAA6B,sCAC7BG,oBAA2B,mCAE3BrB,oBAA2B,mCAC3BG,iBAAyB,gCAEzBG,qBAA4B,oCAC5BG,kBAA0B,iCAO7BlX,SACKC,OAAO,wDAAyD,iDAChEgF,SAAS,sBAAuB4Q;CCxDrC,WACG,YA0BH,SAAS9I,GAAa1M,EAAOC,EAAIF,EAAcG,EAAmBwZ,EAAsBnE,GAwCpF,QAASpU,GAASK,GACjB,GAAIJ,GAAelB,EAAkBmE,gBAAkBnE,EAAkBoE,aAAeoV,EAAqBpF,aAAe,IAAM9S,EAAKiM,GACvI,OAAO1N,GAAaoB,SAAUC,EAAcmU,EAAYjE,kBAAmBiE,EAAYpE,sBA8BxF,QAAS5P,GAAOC,GAEf,GAAIC,GAAavB,EAAkBmE,gBAAkBnE,EAAkBoE,aAAeoV,EAAqBpF,aAEvGE,GACNC,KAAOjT,EAAKiT,KACZC,KAAOlT,EAAKkT,KACZC,KAAOnT,EAAKmT,KAiBV,QAZGnT,EAAKZ,QAAyB,GAAfY,EAAKZ,UACtB4T,EAAW5T,OAAUY,EAAW,OAAE,EAAE,IAGlCA,EAAKoT,QAAyB,GAAfpT,EAAKoT,UACtBJ,EAAWI,OAAUpT,EAAW,OAAE,EAAE,GAGjCA,EAAK8H,QACRkL,EAAWlL,MAAQvJ,EAAagD,gBAAgBvB,EAAK8H,MAAO,oBAGtDvJ,EAAawB,OAAQiT,EAAY/S,EAAY8T,EAAY3D,gBAAiB2D,EAAY9D,oBAmB9F,QAAS/P,GAAOF,GAEf,GAAIG,GAAazB,EAAkBmE,gBAAkBnE,EAAkBoE,aAAeoV,EAAqBpF,aAAe,IAAM9S,EAAKiM,IAEjIoH,GACNJ,KAAOjT,EAAKiT,KACZE,KAAOnT,EAAKmT,KAGV,OAAO5U,GAAa2B,OAAQmT,EAAYlT,EAAY4T,EAAYrD,gBAAiBqD,EAAYxD,oBAkB9F,QAASnQ,GAAQJ,GAChB,GAAIK,GAAa3B,EAAkBmE,gBAAkBnE,EAAkBoE,aAAeoV,EAAqBpF,aAAe,IAAM9S,EAAKiM,GACrI,OAAO1N,GAAAA,UAAoB8B,EAAY0T,EAAY/C,gBAAiB+C,EAAYlD,oBAsBjF,QAASvQ,GAAMN,GACd,GAAIO,GAAY7B,EAAkBmE,gBAAkBnE,EAAkBoE,aAAeoV,EAAqBpF,aAAe,GACzH,OAAOvU,GAAa+B,MAAMN,EAAMO,EAAWwT,EAAYzC,eAAgByC,EAAY5C,mBAgBvF,QAASgH,GAASnY,GAEdA,EAAO,EAAOA,IAEhB,IAAIoY,GAAe1Z,EAAkBmE,gBAAkBnE,EAAkBoE,aAAeoV,EAAqBpF,aAAe,IAAMoF,EAAqBrE,QAAQsE,SAC7JvZ,GACAkB,OAAQ,OACTD,IAAMuY,EACNpY,KAAOA,EAGR,OAAOzB,GAAaI,QAAQC,EAAemV,EAAYiC,kBAAmBjC,EAAY8B,sBAiBxF,QAASwC,GAAmBrY,GAExBA,EAAO,EAAOA,IAEhB,IAAIsY,GAAyB5Z,EAAkBmE,gBAAkBnE,EAAkBoE,aAAeoV,EAAqBpF,aAAe,IAAM9S,EAAKiM,IAAO,IAAMiM,EAAqBrE,QAAQ0E,qBACzL3Z,GACAkB,OAAQ,OACTD,IAAMyY,EAGP,OAAO/Z,GAAaI,QAAQC,EAAemV,EAAYuC,4BAA6BvC,EAAYoC,gCAgBlG,QAASqC,GAAOxY,GAEZA,EAAO,EAAOA,IAEhB,IAAIyY,GAAa/Z,EAAkBmE,gBAAkBnE,EAAkBoE,aAAeoV,EAAqBpF,aAAe,IAAM9S,EAAKiM,IAAO,IAAMiM,EAAqBrE,QAAQ2E,OAC7K5Z,GACAkB,OAAQ,OACTD,IAAM4Y,EAGP,OAAOla,GAAaI,QAAQC,EAAemV,EAAY6C,gBAAiB7C,EAAY0C,oBAgBtF,QAASiC,GAAc1Y,GAEnBA,EAAO,EAAOA,IAEhB,IAAI2Y,GAAoBja,EAAkBmE,gBAAkBnE,EAAkBoE,aAAeoV,EAAqBpF,aAAe,IAAM9S,EAAKiM,IAAO,IAAMiM,EAAqBrE,QAAQ+E,eACpLha,GACAkB,OAAQ,OACTD,IAAM8Y,EAGP,OAAOpa,GAAaI,QAAQC,EAAemV,EAAYmD,uBAAwBnD,EAAYgD,2BAkB7F,QAAS8B,GAAmB7Y,GAExBA,EAAO,EAAOA,IAEhB,IAAI8Y,GAAyBpa,EAAkBmE,gBAAkBnE,EAAkBoE,aAAeoV,EAAqBpF,aAAe,IAAM9S,EAAKiM,IAAO,IAAMiM,EAAqBrE,QAAQkF,qBACzLna,GACAkB,OAAQ,OACTD,IAAMiZ,EACN9Y,MACCiT,KAAOjT,EAAKiT,MAId,OAAO1U,GAAaI,QAAQC,EAAemV,EAAYyD,4BAA6BzD,EAAYsD,gCAmB/F,QAAS3L,GAAO1L,GAEfA,EAAO,EAAOA,IAEjB,IAAIgZ,GAActa,EAAkBmE,gBAAkBnE,EAAkBoE,aAAeoV,EAAqBpF,aAAe,IAAMoF,EAAqBrE,QAAQnI,MAC7J9M,GACEiB,IAAMmZ,EACNlZ,OAAQ,OACRE,MAECiZ,SAAWjZ,EAAKiZ,SAChBC,SAAWlZ,EAAKkZ,UAIpB,OAAO3a,GAAaI,QAAQC,EAAemV,EAAYe,eAAgBf,EAAYY,mBAepF,QAASrI,KAER,GAAI6M,GAAeza,EAAkBmE,gBAAkBnE,EAAkBoE,aAAeoV,EAAqBpF,aAAe,IAAMoF,EAAqBrE,QAAQvH,OAC7J1N,GACEiB,IAAOsZ,EACPrZ,OAAS,OAGb,OAAOvB,GAAaI,QAAQC,EAAemV,EAAYqB,gBAAiBrB,EAAYkB,oBAerF,QAASpJ,KACRtM,QAAQC,IAAI0Y,EACZ,IAAKkB,GAAc1a,EAAkBmE,gBAAkBnE,EAAkBoE,aAAeoV,EAAqBpF,aAAe,IAAMoF,EAAqBrE,QAAQhI,MAC7JjN,GACIiB,IAAOuZ,EACPtZ,OAAS,OAGf,OAAOvB,GAAaI,QAAQC,EAAemV,EAAY2B,eAAgB3B,EAAYwB,mBA9X9E,GAAI8D,IAEH1Z,SAAYA,EACfI,OAAWA,EACXG,OAAWA,EACX0C,SAAWxC,EACRE,MAAUA,EAEVuL,MAASA,EACZsM,SAAYA,EACZE,mBAAsBA,EACtBG,OAAWA,EACX9M,MAAUA,EACPY,OAAWA,EACXoM,cAAkBA,EAClBG,mBAAsBA,EAIvB,OAAOQ,GAzCXlb,QAAQC,OAAO,iDAAkD,+CAAgD,wDAAyD,+CAAgD,+CAUzNC,QAAQ,eAAgB6M,GAMzBA,EAAa5M,SAAW,QAAS,KAAM,eAAgB,oBAAqB,uBAAwB;CCxBvG,WACG,YAOH,IAAI4Z,IAGHpF,aAAe,OAEfe,SAQCnI,MAAa,QACbY,OAAc,SACdT,MAAa,QACbkN,qBAAwB,uBACxBZ,SAAe,WACfK,OAAc,SACdI,eAAoB,iBACpBL,qBAAwB,wBAQ1Bpa,SACKC,OAAO,yDAA0D,iDACjEgF,SAAS,uBAAwB8U;CCtCvC,WACI,YAKH/Z,SAAQC,OAAO,wCAAyC,wDAAyD,gDAAiD,uDAAwD;CCN1N,WACA,YAmBA,SAASkb,GAAcjc,EAAakc,GAyChC,QAASC,GAAoBzb,GAC5B,GAAIA,GAAOA,CAEXV,GAAYW,YAAYub,EAAsBE,wBAAyB1b,GAcxE,QAAS2b,GAAoBjc,EAAQC,GACpC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAagc,EAAsBE,wBAAyBhc,EAAQC,EAAc+K,EAEtH,OAAO7K,GAeR,QAAS+b,GAAiB5b,GACzB,GAAIA,IAAQgB,OAAQhB,EAEpBV,GAAYW,YAAYub,EAAsBK,qBAAsB7b,GAcrE,QAAS8b,GAAiBpc,EAAQC,GACjC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAagc,EAAsBK,qBAAsBnc,EAAQC,EAAc+K,EAEnH,OAAO7K,GAgBR,QAASkc,GAAwB/b,GAChC,GAAIA,GAAOA,CAEXV,GAAYW,YAAYub,EAAsBQ,4BAA6Bhc,GAc5E,QAASic,GAAwBvc,EAAQC,GACxC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAagc,EAAsBQ,4BAA6Btc,EAAQC,EAAc+K,EAE1H,OAAO7K,GAeR,QAASqc,GAAqBlc,GAC7B,GAAIA,GAAOA,CAEXV,GAAYW,YAAYub,EAAsBW,yBAA0Bnc,GAczE,QAASoc,GAAqB1c,EAAQC,GACrC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAagc,EAAsBW,yBAA0Bzc,EAAQC,EAAc+K,EAEvH,OAAO7K,GAgBR,QAASwc,GAAwBrc,GAChC,GAAIA,GAAOA,CAEXV,GAAYW,YAAYub,EAAsBc,4BAA6Btc,GAc5E,QAASuc,GAAwB7c,EAAQC,GACxC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAagc,EAAsBc,4BAA6B5c,EAAQC,EAAc+K,EAE1H,OAAO7K,GAeR,QAAS2c,GAAqBxc,GAC7B,GAAIA,IAAQgB,OAAQhB,EAEpBV,GAAYW,YAAYub,EAAsBiB,yBAA0Bzc,GAczE,QAAS0c,GAAqBhd,EAAQC,GACrC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAagc,EAAsBiB,yBAA0B/c,EAAQC,EAAc+K,EAEvH,OAAO7K,GAgBR,QAAS8c,GAAwB3c,GAChC,GAAIA,GAAOA,CAEXV,GAAYW,YAAYub,EAAsBoB,4BAA6B5c,GAc5E,QAAS6c,GAAwBnd,EAAQC,GACxC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAagc,EAAsBoB,4BAA6Bld,EAAQC,EAAc+K,EAE1H,OAAO7K,GAeR,QAASid,GAAqB9c,GAC7B,GAAIA,IAAQgB,OAAQhB,EAEpBV,GAAYW,YAAYub,EAAsBuB,yBAA0B/c,GAczE,QAASgd,GAAqBtd,EAAQC,GACrC,GAAI+K,GAAW,SAAU1K,GACxB,MAAOA,IAGJH,EAAoBP,EAAYE,YAAagc,EAAsBuB,yBAA0Brd,EAAQC,EAAc+K,EAEvH,OAAO7K,GAlVL,GAAIod,IAENxB,oBAAuBA,EACvBE,oBAAsBA,EACtBC,iBAAqBA,EACrBE,iBAAoBA,EAEpBC,wBAA2BA,EAC3BE,wBAA0BA,EAC1BC,qBAAyBA,EACzBE,qBAAwBA,EAExBC,wBAA2BA,EAC3BE,wBAA0BA,EAC1BC,qBAAyBA,EACzBE,qBAAwBA,EAExBC,wBAA2BA,EAC3BE,wBAA0BA,EAC1BC,qBAAyBA,EACzBE,qBAAwBA,EAGtB,OAAOC,GAxCd7c,QAAQC,OAAO,kDAAmD,4CAA6C,2DAC1GC,QAAQ,gBAAiBib,GAO9BA,EAAchb,SAAY,cAAe;CCdzC,WACG,YAOH,IAAIib,IAEFE,wBAA0B,uCAC1BG,qBAAyB,oCAEzBG,4BAA8B,2CAC9BG,yBAA6B,wCAE7BG,4BAA8B,2CAC9BG,yBAA6B,wCAE7BG,4BAA8B,2CAC9BG,yBAA6B,wCAM/B3c,SACKC,OAAO,0DAA2D,iDAClEgF,SAAS,wBAAyBmW;CC5BvC,WACG,YA2BH,SAAStO,GAAezM,EAAOC,EAAIC,EAAmBH,EAAc0c,EAAwB3B,GAyBrF,QAASzM,KAMX,GAECqO,GAAcxc,EAAkBmE,gBAAkBnE,EAAkBoE,aAAemY,EAAuBnI,aAAe,IAAMmI,EAAuBpH,QAAQhH,QACjKjO,GACEkB,OAAQ,OACRD,IAAMqb,EAGT,OAAO3c,GAAaI,QAAQC,EAAe0a,EAAcK,iBAAkBL,EAAcE,qBAoB1F,QAAS2B,GAAanb,GAGlBA,EAAO,EAAOA,IAEjB,IAAIob,GAAkB1c,EAAkBmE,gBAAkBnE,EAAkBoE,aAAemY,EAAuBnI,aAAe,IAAMmI,EAAuBpH,QAAQsH,aACrKvc,GACEkB,OAAS,OACTD,IAAOub,EACPpb,MACCiT,KAAOjT,EAAKiT,MAIhB,OAAO1U,GAAaI,QAAQC,EAAe0a,EAAcW,qBAAsBX,EAAcQ,yBAoB9F,QAASuB,GAAarb,GAGlBA,EAAO,EAAOA,IAEjB,IAAIsb,GAAkB5c,EAAkBmE,gBAAkBnE,EAAkBoE,aAAemY,EAAuBnI,aAAe,IAAMmI,EAAuBpH,QAAQwH,aAErKzc,GADQH,EAAG8c,SAETzb,OAAS,OACTD,IAAOyb,EACPtb,MACCiT,KAAQjT,EAAKiT,KACb7R,MAASpB,EAAKoB,QAIlB,OAAO7C,GAAaI,QAAQC,EAAe0a,EAAciB,qBAAsBjB,EAAcc,yBAmB9F,QAASoB,GAAaxb,GAGlBA,EAAO,EAAOA,IAEjB,IAAIyb,GAAkB/c,EAAkBmE,gBAAkBnE,EAAkBoE,aAAemY,EAAuBnI,aAAe,IAAMmI,EAAuBpH,QAAQ2H,aACrK5c,GACEkB,OAAS,OACTD,IAAO4b,EACPzb,MACCiT,KAAOjT,EAAKiT,MAIhB,OAAO1U,GAAaI,QAAQC,EAAe0a,EAAcuB,qBAAsBvB,EAAcoB,yBA3IxF,GAAIgB,IACT7O,QAAYA,EACZsO,aAAgBA,EAChBE,aAAgBA,EAChBG,aAAgBA,EAGX,OAAOE,GA7BXvd,QAAQC,OAAO,mDAAoD,+CAAgD,6CAA8C,0DAA2D,mDAU3NC,QAAQ,iBAAkB4M,GAM3BA,EAAe3M,SAAW,QAAS,KAAM,oBAAqB,eAAgB,yBAA0B;CCzB3G,WACG,YAOH,IAAI2c,IAGDnI,aAAe,SAEfe,SACChH,QAAY,UACZsO,aAAe,eACfE,aAAe,eACfG,aAAe,gBAQnBrd,SACKC,OAAO,2DAA4D,iDACnEgF,SAAS,yBAA0B6X;CCtBzC,SAAUU,EAAEC,ECAXC,GAAA,YA0QDC,SAASA,GAAeC,EAAWC,EAAMC,GACvC,GAAIC,GAAaD,EAAAE,WACbC,EAAcL,EAAU,EAmC5B,OAAO,UAAS9I,EAAM7R,EAAOZ,GAjCoB,GAC3CoN,GAAMyO,CACV7b,GAgCoDA,MA/BpD6b,EAAU7b,EAAA6b,QACVzO,EAAOzP,EAAAme,UAAkB9b,EAAAoN,MAAgBpN,EAAAoN,KAAesO,EACpD/d,EAAAoe,YAAoBnb,KACtBib,EAAU,gCACVjb,EAAQ,IAENjD,EAAAqe,SAAiBH,KACnBA,EAAU,GAAIrY,MAAKqY,IAGjBvX,EAAM2X,mBAqB6BxJ,GArBF,IAAMwJ,mBAAmBrb,GAE9D0D,EADAA,GAAO8I,EAAO,SAAWA,EAAO,KACzBpN,EAAAwN,OAAiB,WAAaxN,EAAAwN,OAAiB,IACtDlJ,GAAOuX,EAAU,YAAcA,EAAAK,cAAwB,GACvD5X,GAAOtE,EAAAmc,OAAiB,UAAY,GAMhCC,EAAe9X,EAAA9F,OAAa,EAC5B4d,EAAe,MACjBZ,EAAAa,KAAU,WAS2B5J,EARnC,8DACA2J,EAAe,mBAOnBR,EAAAU,OAJOhY,GA1RX3G,EAAAC,OAAe,aAAc,OAA7B2e,SAOY,YAAaC,WAuBrB,GAAIC,GAAWhb,KAAAgb,WAiCfhb,MAAAib,MAAa,iBAAkB,iBAAkB,SAASC,EAAgBC,GACxE,OAWEC,IAAKA,SAAShc,GACZ,MAAO8b,KAAiB9b,IAa1Bic,UAAWA,SAASjc,GAElB,OADID,EAAQa,KAAAob,IAAShc,IACNlD,EAAAof,SAAiBnc,GAASA,GAY3Coc,OAAQA,WACN,MAAOL,MAeT1P,IAAKA,SAASpM,EAAKD,EAAOZ,GACxB4c,EAAe/b,EAAKD,EAAmBZ,EAvF1BrC,EAAA0M,UAAmBoS,EAuFOzc,GAvFcyc,IAsGvDQ,UAAWA,SAASpc,EAAKD,EAAOZ,GAC9ByB,KAAAwL,IAASpM,EAAKlD,EAAAuf,OAAetc,GAAQZ,IAcvCmN,OAAQA,SAAStM,EAAKb,GACpB4c,EAAe/b,EAAKM,EAAuBnB,EAtH9BrC,EAAA0M,UAAmBoS,EAsHWzc,GAtHUyc,UA4H/D9e,EAAAC,OAAe,aAAfC,QAiCS,gBAAiB,WAAY,SAAS8M,GAE3C,OAWEkS,IAAKA,SAAShc,GACZ,MAAO8J,GAAAmS,UAAmBjc,IAa5BoM,IAAKA,SAASpM,EAAKD,GACjB+J,EAAAsS,UAAmBpc,EAAKD,IAY1BuM,OAAQA,SAAStM,GACf8J,EAAAwC,OAAgBtM,QA2DxBya,EAAAxd,SAA0B,YAAa,OAAQ,YAE/CH,EAAAC,OAAe,aAAf2e,SAAqC,iBAAkBY,WACrD1b,KAAAib,KAAYpB,KAIX8B,OAAQA,OAAAzf;CChU4D,SAASwG,EAAEkZ,GAAG,YAAa,mBAAmBC,SAAQA,OAAOC,IAAID,QAAQ,WAAWD,GAAG,gBAAiBG,SAAQ5f,OAAO4f,QAAQH,EAAEI,QAAQ,YAAYJ,EAAElZ,EAAExG,UAAU8D,KAAK,SAAS0C,GAAG,YAAa,SAASkZ,GAAEA,GAAG,MAAO,YAAW,GAAIjC,GAAE,YAAa3Z,MAAKic,aAAa,SAASvZ,GAAG,GAAG,gBAAiBA,GAAE,KAAM,IAAIwZ,WAAU,iBAAiBN,EAAE,4CAA6CjC,GAAEjX,EAAG,IAAIyZ,GAAEzZ,EAAE+Y,OAAOW,EAAE1Z,EAAE4Y,QAAStb,MAAKqc,cAAc,SAAS3Z,GAAG,GAAG,kBAAmBA,GAAE,KAAM,IAAIwZ,WAAU,iBAAiBN,EAAE,6CAA8CO,GAAEzZ,GAAG1C,KAAKsc,gBAAgB,SAAS5Z,GAAG,GAAG,kBAAmBA,GAAE,KAAM,IAAIwZ,WAAU,iBAAiBN,EAAE,+CAAgDQ,GAAE1Z,GAAG1C,KAAKob,IAAI,SAAS1Y,GAAG,MAAO0Z,GAAET,OAAOC,GAAGW,QAAQ5C,EAAEjX,KAAK1C,KAAKwc,IAAI,SAAS9Z,EAAE0Z,GAAG,MAAOT,QAAOC,GAAGa,QAAQ9C,EAAEjX,EAAEyZ,EAAEC,KAAKpc,KAAKib,MAAM,aAAa,UAAU,OAAO,WAAW,SAASyB,EAAEC,EAAEC,EAAEjb,GAAG,QAAS6C,GAAE9B,GAAG,GAAIkZ,EAAE,KAAIA,EAAEe,EAAEja,GAAG,MAAMiX,GAAGiC,GAAE,EAAG,GAAGA,GAAG,iBAAiBlZ,EAAE,CAAC,GAAIyZ,GAAE,KAAKhX,KAAKC,MAAM,IAAID,KAAK0X,SAAU,KAAIC,aAAaL,QAAQN,EAAEA,GAAGW,aAAaC,WAAWZ,GAAG,MAAMxC,GAAGiC,GAAE,GAAI,MAAOA,GAAE,GAAI7b,GAAE6B,EAAEob,EAAErD,EAAE5c,OAAO6c,EAAEpV,EAAEoX,KAAKgB,EAAEhC,KAAK,+CAA+C6B,QAAQ/Z,EAAEua,KAAKV,QAAQ7Z,EAAEua,OAAOC,GAAGC,SAAS,SAASvB,GAAG,IAAI,GAAIjC,KAAKiC,GAAElZ,EAAE2X,UAAU6C,EAAEvD,MAAMuD,EAAEvD,GAAGiC,EAAEjC,GAAI,OAAOuD,GAAEE,QAAQF,GAAGG,OAAO,SAAS3a,GAAG,IAAI,GAAIkZ,KAAKsB,GAAE,MAAMtB,EAAE,UAAWsB,GAAEtB,IAAIhC,EAAEmD,WAAWpD,EAAEiC,EAAG,OAAOsB,GAAEC,SAASza,IAAI0a,MAAM,WAAW,IAAI,GAAI1a,GAAEkZ,EAAE,EAAEO,EAAEvC,EAAE7c,OAAOof,EAAEP,EAAEA,KAAKlZ,EAAEkX,EAAExa,IAAIwc,KAAKjC,IAAIjX,EAAEe,MAAM,EAAEuZ,KAAKE,EAAExa,EAAEe,MAAMuZ,IAAIZ,EAAExC,EAAE2C,QAAQ7Z,MAAM4a,OAAO,WAAW,GAAI1B,EAAE,IAAGha,EAAE,MAAMc,EAAE6a,OAAOL,EAAEnd,GAAG,CAAC6b,EAAElZ,EAAE8a,KAAKzd,GAAG2C,EAAExD,QAAQge,EAAE,SAASd,EAAEM,GAAGha,EAAE2X,UAAU+B,IAAI,MAAMM,EAAE,KAAK9C,EAAE6C,QAAQ9C,EAAE+C,EAAEP,EAAEC,UAAWR,GAAEc,KAAM,KAAI,GAAIN,KAAKR,GAAEhC,EAAEmD,WAAWpD,EAAEyC,EAAGrc,GAAE2C,EAAE8a,KAAKN,KAAM,OAAOA,GAAEE,QAAQrd,EAAE2C,EAAE8a,KAAKN,GAAGR,EAAEe,OAAO,WAAW7b,IAAIA,EAAED,EAAEub,EAAEI,OAAO,KAAI,MAAOX,EAAEe,kBAAkBf,EAAEe,iBAAiB,UAAU,SAAS9B,GAAGjC,IAAIiC,EAAExc,IAAIqE,MAAM,EAAEuZ,KAAKpB,EAAE+B,SAAST,EAAEtB,EAAExc,IAAIqE,MAAMuZ,IAAIZ,EAAER,EAAE+B,gBAAiBT,GAAEtB,EAAExc,IAAIqE,MAAMuZ,IAAIjd,EAAE2C,EAAE8a,KAAKN,GAAGR,EAAEY,YAAYX,EAAEe,kBAAkBf,EAAEe,iBAAiB,eAAe,WAAWR,EAAEI,WAAWJ,KAAK,MAAOxa,GAAEA,GAAGA,EAAEvG,OAAOuG,EAAEiZ,OAAOzf,QAAQwG,EAAEvG,OAAO,gBAAgB2e,SAAS,gBAAgBc,EAAE,iBAAiBd,SAAS,kBAAkBc,EAAE","file":"main-92eaa2793b.js","sourcesContent":[";(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * System Channel Module\r\n\t */\r\n\tangular.module('ngDrupal7Services-3_x.commons.baseChannel', [])\r\n\t\t   .factory('BaseChannel', BaseChannel);\r\n\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\tBaseChannel.$inject = [ '$rootScope' ];\r\n\t\r\n\t/**\r\n\t * The channels basic publish and subscribe functions\r\n\t * \r\n\t **/\r\n\t/** @ngInject */\r\n\tfunction BaseChannel($rootScope) {\r\n\t\t\r\n\t\tvar baseChannelService = {\r\n\t\t\t\tpubRootEmit : pubRootEmit,\r\n        \t\tsubRootEmit\t: subRootEmit\r\n\t\t};\r\n       \r\n        return baseChannelService;\r\n\r\n        ////////////\r\n\r\n        /**\r\n\t\t * subRootEmit\r\n\t\t * \r\n\t\t * subscribe for an event published over $rootScope.$emit(event, args)\r\n\t     *\r\n\t\t * @param \t{String} eventName The events name\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subscribe function\r\n\t\t * @param \t{function} scopeHandler The callback handler normally defined in the $scopes controller or directive or service\r\n\t\t * @param \t{function} $mapArgs A mapper function to customize the given event arguments \r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n     \tfunction subRootEmit(eventName, _Scope, scopeHandler, mapArgs) {\r\n     \t\t\r\n     \t\t//subscribe with rootScope to event and cache unsubscribe function\r\n     \t\tvar unsubsSopeHandler = $rootScope.$on(eventName, function(event, args) {\r\n     \t\t\t\t//console.log('in subRootEmit publish event: ' + eventName + ' with args: ' + JSON.stringify(mapArgs(args)));\r\n\t     \t\t\tscopeHandler(mapArgs(args));\r\n\t     \t\t});\r\n     \t\t \r\n     \t\t//unsubscribe rootScope listener after scope destruction\r\n     \t\t_Scope.$on('$destroy', function() {\r\n     \t\t\t//console.log('in pubRootEmit _Scope.$on($destroy)');\r\n     \t\t\tunsubsSopeHandler();\r\n     \t\t});\r\n     \t\t\r\n     \t\t//return he unsubscribe function from the $rootScope.on() call\r\n     \t\treturn unsubsSopeHandler;\r\n     \t};\r\n     \t\r\n     \t/**\r\n\t\t * pubRootEmit\r\n\t\t * \r\n\t\t * publish an event only to $rootScope\r\n\t     *\r\n\t\t * @param \t{String} eventName The events name\r\n\t\t * @param \t{object} args The events arguments \r\n\t\t * \r\n\t\t**/\r\n     \tfunction pubRootEmit(eventName, args) {\r\n     \t\t //console.log('in pubRootEmit publish event: ' + eventName + ' with args: ' + JSON.stringify(args));\r\n     \t\t $rootScope.$emit(eventName, args);\r\n     \t};\r\n     \t\r\n\t};\r\n\r\n})();",";(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * System Channel Module\r\n\t */\r\n\tangular.module('ngDrupal7Services-3_x.commons.baseResource', ['ngDrupal7Services-3_x.commons.configurations'])\r\n\t\t   .factory('baseResource', baseResource);\r\n\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\tbaseResource.$inject = ['$http', '$q', 'DrupalApiConstant'];\r\n\t\r\n\t/**\r\n\t * The resource basic functions\r\n\t * \r\n\t**/\r\n\t/** @ngInject */\r\n\tfunction baseResource($http, $q, DrupalApiConstant) {\r\n\t\t\r\n\t\tvar baseResourceService = {\r\n\t\t\tprepareGetParams : prepareGetParams,\t\r\n\t\t\tpreparePostData: preparePostData,\r\n\t\t\t//base \r\n\t\t\trequest \t: request,\r\n\t\t\tretrieve \t: retrieve,\r\n\t\t\tcreate \t\t: create,\r\n\t\t\tupdate \t\t: update,\r\n\t\t\tdelete \t\t: _delete,\r\n\t\t\tindex \t\t: index\r\n\t\t};\r\n       \r\n        return baseResourceService;\r\n\r\n        ////////////\r\n        \r\n        /**\r\n         * request\r\n         * \r\n         * generic function for drupals retrieve request\r\n         * \r\n         * @param {Object} data The requests data\r\n         * @param {Object} requestConfig The requests url\r\n         * @param {Function} pubError The requests error publish function\r\n         * @param {Function} pubSuccess The requests success publish function\r\n         * \r\n         * @return {Promise} Promise of the retrieve request\r\n         * \r\n         */\r\n        function request(requestConfig, pubError, pubSuccess) {\r\n\r\n\t    \tvar errors = [];\t\t\r\n\t    \t\r\n\t    \tif(errors.length != 0) {\r\n\t    \t\tpubError(errors)\r\n\t    \t\treturn $q.reject(errors);\r\n\t    \t};\r\n\t\t\t\r\n    \t\treturn $http(requestConfig)\r\n\t\t    \t.success(function(responseData, status, headers, config){\r\n\t\t    \t\tconsole.log(responseData, status, headers, config); \r\n\t\t    \t\tpubSuccess(responseData);\r\n\t\t    \t})\r\n\t\t    \t.error(function(responseError, status, headers, config){\r\n\t\t    \t\tconsole.log(responseError, status, headers, config); \r\n\t\t    \t\tpubError(responseError);\r\n\t\t    \t});\r\n        \t\r\n        };\r\n        \r\n        /**\r\n         * retrieve\r\n         * \r\n         * generic function for drupals retrieve request\r\n         * \r\n         * @param {String} retrievePath The requests url\r\n         * @param {Function} pubError The requests error publish function\r\n         * @param {Function} pubSuccess The requests success publish function\r\n         * \r\n         * @return {Promise} Promise of the retrieve request\r\n         * \r\n         */\r\n        function retrieve(retrievePath, pubError, pubSuccess) {\r\n        \t\r\n        \tvar requestConfig = {\r\n    \t\t\t\turl \t: retrievePath,\r\n\t    \t\t\tmethod \t:'GET'\r\n\t    \t};\r\n        \t\r\n        \treturn request(requestConfig, pubError, pubSuccess);\r\n\r\n        };\r\n        \r\n        /**\r\n         * create\r\n         * \r\n         * generic function for drupals create request\r\n         * \r\n         * @param {Object} data The requests data\r\n         * @param {String} createPath The requests url\r\n         * @param {Function} pubError The requests error publish function\r\n         * @param {Function} pubSuccess The requests success publish function\r\n         * \r\n         * @return {Promise} Promise of the create request\r\n         * \r\n         */\r\n        function create( data, createPath, pubError, pubSuccess) {\r\n        \t\r\n        \tvar requestConfig = {\r\n    \t\t\t\turl \t: createPath,\r\n\t    \t\t\tmethod \t: 'POST',\r\n\t    \t\t\tdata    : data\r\n\t    \t};\r\n   \r\n        \treturn request(requestConfig, pubError, pubSuccess);\r\n        };\r\n        \r\n        /**\r\n         * update\r\n         * \r\n         * generic function for drupals update request\r\n         * \r\n         * @param {Object} data The requests data\r\n         * @param {String} updatePath The requests url\r\n         * @param {Function} pubError The requests error publish function\r\n         * @param {Function} pubSuccess The requests success publish function\r\n         * \r\n         * @return {Promise} Promise of the update request\r\n         * \r\n         */\r\n        function update( data, updatePath, pubError, pubSuccess) {\r\n        \t\r\n        \tvar requestConfig = {\r\n    \t\t\t\turl \t: updatePath,\r\n    \t\t\t\tmethod \t: 'PUT',\r\n    \t\t\t\tdata \t: data,\r\n    \t\t};\r\n   \r\n        \treturn request(requestConfig, pubError, pubSuccess);\r\n        };\r\n        \r\n        /**\r\n         * delete\r\n         * \r\n         * generic function for drupals delete request\r\n         * \r\n         * @param {String} deletePath The requests url\r\n         * @param {Function} pubError The requests error publish function\r\n         * @param {Function} pubSuccess The requests success publish function\r\n         * \r\n         * @return {Promise} Promise of the delete request\r\n         * \r\n         */\r\n        function _delete( deletePath, pubError, pubSuccess) {\r\n        \t\r\n        \tvar requestConfig = {\r\n    \t\t\t\turl \t: deletePath,\r\n    \t\t\t\tmethod \t: 'DELETE'\r\n    \t\t};\r\n   \r\n        \treturn request(requestConfig, pubError, pubSuccess);\r\n        };\r\n        \r\n        \r\n        /**\r\n         * index\r\n         * \r\n         * generic function for drupals delete request\r\n         * \r\n         * @param {String} deletePath The requests url\r\n         * @param {Function} pubError The requests error publish function\r\n         * @param {Function} pubSuccess The requests success publish function\r\n         * \r\n         * @return {Promise} Promise of the delete request\r\n         * \r\n         */\r\n        function index(data, indexPath, pubError, pubSuccess) {\r\n        \t\r\n        \tvar options = {};\r\n        \t//prepare index options\r\n        \tif(data.page !== '') {options.page = data.page}\r\n        \tif(data.pagesize) {options.pagesize = data.pagesize}\r\n          \tif(Object.keys(data.parameters).length > 0 ) {options.parameters = data.parameters}\r\n        \tif(Object.keys(data.fields).length > 0 ) {options.fields = data.fields}\r\n        \t\r\n        \tif(options) {\r\n    \t\t\tindexPath += '?' + prepareIndexGetParams(options);\r\n    \t\t}\r\n\r\n        \tvar requestConfig = {\r\n    \t\t\t\turl \t: indexPath,\r\n    \t\t\t\tmethod \t:'GET'\r\n    \t\t};\r\n   \r\n        \treturn request(requestConfig, pubError, pubSuccess);\r\n        };\r\n \r\n        /**\r\n         * prepareIndexGetParams\r\n         * \r\n         * @param {OBJECT} options The index options.\r\n         * \t\t  @key {Integer} page The pagenumber to start\r\n         * \t\t  @key {Integer} pagesize The number of entries per page\r\n         * \r\n        **/\r\n        function prepareIndexGetParams(options) {\r\n        \tvar type = '',\r\n    \t\t\tgetParamsString = '',\r\n    \t\t\tprepaeredParams = '';\r\n        \tconsole.log(options); \r\n        \tif(!options)  { return ''; }\r\n\r\n    \t\t//prepare and set optional params\r\n    \t\tangular.forEach(options, function(value , key) {\r\n    \t\t\tif(key === 'parameters') { type = 'array_key_value'; }\r\n    \t\t\telse if(key === 'fields') { type = 'array'; }\r\n    \t\t\t\r\n    \t\t\tprepaeredParams = prepareGetParams(value, key, type)\r\n    \t\t\tconsole.log(prepaeredParams); \r\n\r\n    \t\t\tgetParamsString += (getParamsString == '')?prepaeredParams:'&'+prepaeredParams;\r\n    \t\t\t\r\n    \t\t\tprepaeredParams = '';\r\n    \t        type = '';\r\n    \t    });\r\n    \t\t\r\n    \t\treturn getParamsString;\r\n        };\r\n        \r\n        /**\r\n         * \r\n         * preparePostData\r\n         * \r\n         * Formats the JSON depending on format param\r\n         * \r\n         * @param {Object} values The value to format\r\n         * @param {String} format The new format of the value param\r\n         * \r\n         * @return {Array} formated data\r\n         */\r\n         function preparePostData(values, format) {\r\n        \t var postData = undefined,\r\n\t            formats = { \r\n\t      \t\t\t 'array_of_keys' : true,\r\n\t      \t\t\t 'array_of_values' : true\r\n\t            };\r\n        \t \r\n        \t//validate format\r\n     \t\tif(!formats[format]) { return '';  }\r\n     \t\t\r\n     \t\t//array\r\n    \t\t//example: [\"3\", \"asfasf\"], \r\n    \t\tif(format === 'array_of_keys' && Object.keys(values).length > 0) {\r\n    \t\t\r\n    \t\t\tvar arrayValues = [];\r\n    \t\t\tangular.forEach(values, function(value, k) {\r\n    \t\t\t\tif(value !== false) { this.push(k); }\r\n    \t\t\t}, arrayValues);\t\r\n    \t\t\tif(arrayValues.length) { postData = arrayValues; }\r\n    \t\t\treturn postData;\r\n    \t\t}\r\n    \t\t\r\n    \t\tif(format === 'array_of_values' && Object.keys(values).length > 0) {\r\n        \t\t\r\n    \t\t\tvar arrayValues = [];\r\n    \t\t\tangular.forEach(values, function(value, k) {\r\n    \t\t\t\tif(value !== false) { this.push(value); }\r\n    \t\t\t}, arrayValues);\t\r\n    \t\t\tif(arrayValues.length) { postData = arrayValues; }\r\n    \t\t\treturn postData;\r\n    \t\t}\r\n \r\n         }\r\n        \r\n        /**\r\n         * \r\n         * prepareGetParam\r\n         * \r\n         * Formats the JSON depending on formata and key param\r\n         * \r\n         * @param {Object} values The value to format\r\n         * @param {String} key The name of key to use in formated output\r\n         * @param {String} format The new format of the value param\r\n         * \r\n         * @return {String} formated data\r\n         */\r\n         function prepareGetParams(values, key, format) {\r\n        \t console.log(values, key, format); \r\n            var getParams = [],\r\n\t            formats = { \r\n\t      \t\t\t  'array' : true,\r\n\t      \t\t\t  'array_keys' : true,\r\n\t      \t\t\t  'array_key_value' : true,\r\n\t      \t\t\t  'json' : true,\r\n\t            };\r\n        \t\r\n    \t\t//validate key\r\n    \t\tif(key) { \r\n    \t\t\tkey = (key)?key:false;\r\n    \t\t\tif(key === false) {return false;}\r\n    \t\t} else { return false; }\r\n    \t\t\r\n    \t\t//validate values\r\n    \t\tvalues = (values || values === 0)?values:false;\r\n    \t\t\r\n    \t\t//validate values\r\n    \t\tif(values === false) {return false;}\r\n    \t\t//if no json or length 0 and no int\r\n    \t\telse if (parseInt(values) === NaN) { \r\n    \t\t\tif(Object.keys(values).length <= 0) {\r\n    \t\t\t\treturn false; \r\n    \t\t\t}\r\n    \t\t}\r\n    \t\t\r\n    \t\t//normal param\r\n    \t\tif(!format) {\r\n    \t\t\tif(values || values === 0) { getParams = key + '=' + values; }\r\n    \t\t\treturn getParams;\r\n    \t\t}\r\n    \t\t\r\n    \t\t//validate format\r\n    \t\tif(!formats[format]) { return '';  }\r\n    \t\t\r\n    \t\t//json\r\n    \t\t//example: exposed_filter=value\r\n    \t\tif(format === 'json') {\r\n    \t\t\tangular.forEach(values, function(value, k) {\r\n    \t\t\t\tif(value) { getParams.push(k + '=' + value) }\r\n    \t\t\t});\r\n    \t\t\treturn getParams.join('&');\r\n    \t\t}\r\n    \t\t//array\r\n    \t\t//example: fields=value1, vaule2, value3, \r\n    \t\tif(format === 'array' && Object.keys(values).length > 0) {\r\n    \t\t\r\n    \t\t\tvar arrayValues = [];\r\n    \t\t\tangular.forEach(values, function(value, k) {\r\n    \t\t\t\tif(value !== false) { this.push(k); }\r\n    \t\t\t}, arrayValues);\t\r\n    \t\t\tif(arrayValues.length) { getParams.push(key + '=' + arrayValues.join(',')); }\r\n    \t\t\treturn getParams.join('&');\r\n    \t\t}\r\n    \t\t//array_keys\r\n    \t\t//example: exposed_filter1=key1\r\n    \t\tif(format === 'array_keys') {\r\n    \t\t\tangular.forEach(values, function(value, k) {\r\n    \t\t\t\tif(value) { getParams.push(key + '=' + k) }\r\n    \t\t\t});\r\n    \t\t\treturn getParams.join('&');\r\n    \t\t}\r\n\r\n    \t\t//array_key_value\r\n    \t\t//example: parameters[key1]=value1\r\n    \t\tif(format === 'array_key_value') {\r\n    \t\t\t\r\n    \t\t\tangular.forEach(values, function(value, k) {\r\n    \t\t\t\tif(value) { getParams.push(key+\"[\"+k+\"]=\"+ value); }\r\n    \t\t\t});\r\n    \t\t\treturn getParams.join('&');\r\n    \t\t}\r\n    \t\t\r\n    \t};\r\n\r\n        \r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n\r\n    angular.module('commons', ['ngDrupal7Services-3_x.commons.accessControl', 'ngDrupal7Services-3_x.commons.authentication', 'ngDrupal7Services-3_x.commons.http', 'ngDrupal7Services-3_x.commons.directives',\r\n                               'ngDrupal7Services-3_x.commons.baseChannel', 'ngDrupal7Services-3_x.commons.baseResource', 'ngDrupal7Services-3_x.commons.configurations', 'ngDrupal7Services-3_x.commons.helperService', 'ngDrupal7Services-3_x.commons.validationConstant']);\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n\r\n    /**\r\n\t *  Constants for Drupal Services 3.x API\r\n\t */\r\n\tvar DrupalApiConstant =  {\r\n\t\t      //\t\t\t\t\t   \r\n\t\t      // Drupal depending settings\r\n\t\t      //\r\n\t\t\t\r\n\t\t\t  // Sites domain\r\n\t\t\t  drupal_instance\t: 'http://your.site.name/',\r\n\t\t\t \r\n\t\t\t  // Service endpoint \r\n\t\t\t  api_endpoint : 'api/',\r\n\t\t\t  \r\n\t\t\t  //response format of a request. possible values are\r\n\t\t\t  //look at https://www.drupal.org/node/1699450\r\n\t\t\t  responseFormat : \"application/json\",\r\n\t\t\t  //- bencode: The encoding used by the BitTorrent file sharing system.\r\n\t\t\t  //- json => JavaScript Object Notation\r\n\t\t\t  //- jsonp: JSON with padding\r\n\t\t\t  //- php: Responses are encoded using the data format emitted by PHPs \"serialize()\" function\r\n\t\t\t  //- rss\r\n\t\t\t  //- xml\r\n\t\t\t  //- yaml\r\n\t\t\t  \r\n\r\n\t\t\t  // By default, Drupal is configured with a session expiration time of 2000000 seconds which is 23 day 3 hr. 33 min. 20 sec\r\n\t\t\t  // To customize this install the session expire module => https://www.drupal.org/project/session_expire\r\n\t\t\t  // and also set same value here\r\n\t\t  \t  session_expiration_time : 2000000,\r\n\t\t  \t  \r\n\t\t\t  // Session Expriation untis (seconds because Drupals default time is in seconds)\r\n\t\t\t  session_expiration_unite : 'seconds',\r\n\t\t\t  \r\n\t\t\t  //path to public folder\r\n\t\t\t  publicFilePath : \"public://\",\r\n\t\t\t  \r\n\t\t\t  //path to public folder\r\n\t\t\t  privateFilePath : \"private://\",\r\n\t\t\t\r\n\t};\r\n    \r\n\t/**\r\n\t *  DrupalApiConstant Module\r\n\t */\r\n\tangular\r\n\t    .module('ngDrupal7Services-3_x.commons.configurations', [])\r\n\t    .constant(\"DrupalApiConstant\", DrupalApiConstant);\r\n\t\r\n\r\n})();\r\n",";(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * helper Module\r\n\t */\r\n\tangular.module('ngDrupal7Services-3_x.commons.helperService', [])\r\n\t\t   .factory('DrupalHelperService', DrupalHelperService);\r\n\r\n\t\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\t//DrupalHelperService.$inject = [];\r\n\t\r\n\t/**\r\n\t * Notification channel for user resource \r\n\t**/\r\n\t\r\n\t/** @ngInject */\r\n\tfunction DrupalHelperService() {\r\n\t\r\n\t\t//setup and return service            \t\r\n        var drupalHelperService = {\r\n        \t\tsprintf \t\t: sprintf,\r\n        \t\tstructureField \t: structureField\r\n        };\r\n        \r\n        return drupalHelperService;\r\n\r\n        ////////////\r\n        \r\n        //\r\n        \r\n        /**\r\n    \t * https://github.com/jbeuckm/drupal-client/blob/master/lib/field.js\r\n    \t * Create the basic field structure for uploading a field.\r\n    \t */\r\n        function structureField(value, _label, language) {\r\n\r\n    \t  // record optional label string or default to \"value\"\r\n    \t  var label = _label || \"value\";\r\n    \t  var language_key = (language)? function() {return language}:function() {return baseResourceConfig.LANGUAGE_NONE};\r\n\r\n    \t  if (angular.isArray(value)) {\r\n\r\n    \t    var field_array = [];\r\n    \t    for (var i= 0, l=value.length; i<l; i++) {\r\n    \t      var item = {};\r\n    \t      item[label] = value[i];\r\n\r\n    \t      field_array.push(item);\r\n    \t    }\r\n    \t    return {\r\n    \t      und: field_array\r\n    \t    };\r\n    \t  }\r\n\r\n    \t  if (value instanceof Date) {\r\n\r\n    \t    var obj = {\r\n    \t      value: {\r\n    \t        date: (value.getMonth()+1)+'/'+value.getDate()+'/'+value.getFullYear()+' - '+value.getHours()+':'+value.getMinutes()+':'+value.getSeconds()\r\n    \t      }\r\n    \t    };\r\n\r\n    \t    return {\r\n    \t    \tund: [\r\n    \t        obj\r\n    \t      ]\r\n    \t    };\r\n    \t  }\r\n        }\r\n        //\r\n        \r\n        // copied from http://phpjs.org/\r\n        function sprintf() {\r\n        \t  //  discuss at: http://phpjs.org/functions/sprintf/\r\n        \t  // original by: Ash Searle (http://hexmen.com/blog/)\r\n        \t  // improved by: Michael White (http://getsprink.com)\r\n        \t  // improved by: Jack\r\n        \t  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\r\n        \t  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\r\n        \t  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\r\n        \t  // improved by: Dj\r\n        \t  // improved by: Allidylls\r\n        \t  //    input by: Paulo Freitas\r\n        \t  //    input by: Brett Zamir (http://brett-zamir.me)\r\n        \t  //   example 1: sprintf(\"%01.2f\", 123.1);\r\n        \t  //   returns 1: 123.10\r\n        \t  //   example 2: sprintf(\"[%10s]\", 'monkey');\r\n        \t  //   returns 2: '[    monkey]'\r\n        \t  //   example 3: sprintf(\"[%'#10s]\", 'monkey');\r\n        \t  //   returns 3: '[####monkey]'\r\n        \t  //   example 4: sprintf(\"%d\", 123456789012345);\r\n        \t  //   returns 4: '123456789012345'\r\n        \t  //   example 5: sprintf('%-03s', 'E');\r\n        \t  //   returns 5: 'E00'\r\n\r\n        \t  var regex = /%%|%(\\d+\\$)?([\\-+\\'#0 ]*)(\\*\\d+\\$|\\*|\\d+)?(?:\\.(\\*\\d+\\$|\\*|\\d+))?([scboxXuideEfFgG])/g;\r\n        \t  var a = arguments;\r\n        \t  var i = 0;\r\n        \t  var format = a[i++];\r\n\r\n        \t  // pad()\r\n        \t  var pad = function(str, len, chr, leftJustify) {\r\n        \t    if (!chr) {\r\n        \t      chr = ' ';\r\n        \t    }\r\n        \t    var padding = (str.length >= len) ? '' : new Array(1 + len - str.length >>> 0)\r\n        \t      .join(chr);\r\n        \t    return leftJustify ? str + padding : padding + str;\r\n        \t  };\r\n\r\n        \t  // justify()\r\n        \t  var justify = function(value, prefix, leftJustify, minWidth, zeroPad, customPadChar) {\r\n        \t    var diff = minWidth - value.length;\r\n        \t    if (diff > 0) {\r\n        \t      if (leftJustify || !zeroPad) {\r\n        \t        value = pad(value, minWidth, customPadChar, leftJustify);\r\n        \t      } else {\r\n        \t        value = value.slice(0, prefix.length) + pad('', diff, '0', true) + value.slice(prefix.length);\r\n        \t      }\r\n        \t    }\r\n        \t    return value;\r\n        \t  };\r\n\r\n        \t  // formatBaseX()\r\n        \t  var formatBaseX = function(value, base, prefix, leftJustify, minWidth, precision, zeroPad) {\r\n        \t    // Note: casts negative numbers to positive ones\r\n        \t    var number = value >>> 0;\r\n        \t    prefix = (prefix && number && {\r\n        \t      '2'  : '0b',\r\n        \t      '8'  : '0',\r\n        \t      '16' : '0x'\r\n        \t    }[base]) || '';\r\n        \t    value = prefix + pad(number.toString(base), precision || 0, '0', false);\r\n        \t    return justify(value, prefix, leftJustify, minWidth, zeroPad);\r\n        \t  };\r\n\r\n        \t  // formatString()\r\n        \t  var formatString = function(value, leftJustify, minWidth, precision, zeroPad, customPadChar) {\r\n        \t    if (precision !== null && precision !== undefined) {\r\n        \t      value = value.slice(0, precision);\r\n        \t    }\r\n        \t    return justify(value, '', leftJustify, minWidth, zeroPad, customPadChar);\r\n        \t  };\r\n\r\n        \t  // doFormat()\r\n        \t  var doFormat = function(substring, valueIndex, flags, minWidth, precision, type) {\r\n        \t    var number, prefix, method, textTransform, value;\r\n\r\n        \t    if (substring === '%%') {\r\n        \t      return '%';\r\n        \t    }\r\n\r\n        \t    // parse flags\r\n        \t    var leftJustify = false;\r\n        \t    var positivePrefix = '';\r\n        \t    var zeroPad = false;\r\n        \t    var prefixBaseX = false;\r\n        \t    var customPadChar = ' ';\r\n        \t    var flagsl = flags.length;\r\n        \t    var j;\r\n        \t    for (j = 0; flags && j < flagsl; j++) {\r\n        \t      switch (flags.charAt(j)) {\r\n        \t      case ' ':\r\n        \t        positivePrefix = ' ';\r\n        \t        break;\r\n        \t      case '+':\r\n        \t        positivePrefix = '+';\r\n        \t        break;\r\n        \t      case '-':\r\n        \t        leftJustify = true;\r\n        \t        break;\r\n        \t      case \"'\":\r\n        \t        customPadChar = flags.charAt(j + 1);\r\n        \t        break;\r\n        \t      case '0':\r\n        \t        zeroPad = true;\r\n        \t        customPadChar = '0';\r\n        \t        break;\r\n        \t      case '#':\r\n        \t        prefixBaseX = true;\r\n        \t        break;\r\n        \t      }\r\n        \t    }\r\n\r\n        \t    // parameters may be null, undefined, empty-string or real valued\r\n        \t    // we want to ignore null, undefined and empty-string values\r\n        \t    if (!minWidth) {\r\n        \t      minWidth = 0;\r\n        \t    } else if (minWidth === '*') {\r\n        \t      minWidth = +a[i++];\r\n        \t    } else if (minWidth.charAt(0) === '*') {\r\n        \t      minWidth = +a[minWidth.slice(1, -1)];\r\n        \t    } else {\r\n        \t      minWidth = +minWidth;\r\n        \t    }\r\n\r\n        \t    // Note: undocumented perl feature:\r\n        \t    if (minWidth < 0) {\r\n        \t      minWidth = -minWidth;\r\n        \t      leftJustify = true;\r\n        \t    }\r\n\r\n        \t    if (!isFinite(minWidth)) {\r\n        \t      throw new Error('sprintf: (minimum-)width must be finite');\r\n        \t    }\r\n\r\n        \t    if (!precision) {\r\n        \t      precision = 'fFeE'.indexOf(type) > -1 ? 6 : (type === 'd') ? 0 : undefined;\r\n        \t    } else if (precision === '*') {\r\n        \t      precision = +a[i++];\r\n        \t    } else if (precision.charAt(0) === '*') {\r\n        \t      precision = +a[precision.slice(1, -1)];\r\n        \t    } else {\r\n        \t      precision = +precision;\r\n        \t    }\r\n\r\n        \t    // grab value using valueIndex if required?\r\n        \t    value = valueIndex ? a[valueIndex.slice(0, -1)] : a[i++];\r\n\r\n        \t    switch (type) {\r\n        \t    case 's':\r\n        \t      return formatString(String(value), leftJustify, minWidth, precision, zeroPad, customPadChar);\r\n        \t    case 'c':\r\n        \t      return formatString(String.fromCharCode(+value), leftJustify, minWidth, precision, zeroPad);\r\n        \t    case 'b':\r\n        \t      return formatBaseX(value, 2, prefixBaseX, leftJustify, minWidth, precision, zeroPad);\r\n        \t    case 'o':\r\n        \t      return formatBaseX(value, 8, prefixBaseX, leftJustify, minWidth, precision, zeroPad);\r\n        \t    case 'x':\r\n        \t      return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad);\r\n        \t    case 'X':\r\n        \t      return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad)\r\n        \t        .toUpperCase();\r\n        \t    case 'u':\r\n        \t      return formatBaseX(value, 10, prefixBaseX, leftJustify, minWidth, precision, zeroPad);\r\n        \t    case 'i':\r\n        \t    case 'd':\r\n        \t      number = +value || 0;\r\n        \t      // Plain Math.round doesn't just truncate\r\n        \t      number = Math.round(number - number % 1);\r\n        \t      prefix = number < 0 ? '-' : positivePrefix;\r\n        \t      value = prefix + pad(String(Math.abs(number)), precision, '0', false);\r\n        \t      return justify(value, prefix, leftJustify, minWidth, zeroPad);\r\n        \t    case 'e':\r\n        \t    case 'E':\r\n        \t    case 'f': // Should handle locales (as per setlocale)\r\n        \t    case 'F':\r\n        \t    case 'g':\r\n        \t    case 'G':\r\n        \t      number = +value;\r\n        \t      prefix = number < 0 ? '-' : positivePrefix;\r\n        \t      method = ['toExponential', 'toFixed', 'toPrecision']['efg'.indexOf(type.toLowerCase())];\r\n        \t      textTransform = ['toString', 'toUpperCase']['eEfFgG'.indexOf(type) % 2];\r\n        \t      value = prefix + Math.abs(number)[method](precision);\r\n        \t      return justify(value, prefix, leftJustify, minWidth, zeroPad)[textTransform]();\r\n        \t    default:\r\n        \t      return substring;\r\n        \t    }\r\n        \t  };\r\n\r\n        \t  return format.replace(regex, doFormat);\r\n        \t};\r\n\r\n    \t\r\n    \t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n\r\n    /**\r\n\t *  Constants for Drupal Services 3.x API\r\n\t */\r\n\tvar ValidationConstant =  {\r\n\t\t    //validation errors\r\n\t\t\t//if data not given\r\n\t    \tisRequired : 'Param %s is required.',\r\n\t    \tisInteger : 'Param %s has to be an integer.'\t\r\n\t};\r\n    \r\n\t/**\r\n\t *  ValidationConstant Module\r\n\t */\r\n\tangular\r\n\t    .module('ngDrupal7Services-3_x.commons.validationConstant', [])\r\n\t    .constant(\"ValidationConstant\", ValidationConstant);\r\n\t\r\n\r\n})();\r\n",";(function() {\r\n    'use strict';\r\n\r\n    angular.module('commons.accessControl', ['ngDrupal7Services-3_x.commons.accessControl.constant']);\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n\r\n    /**\r\n\t *  Constants for access control options\r\n\t */\r\n\tvar accessControlConstant = {\r\n\t\t\t//default drupal roles\r\n\t   \t\troles :[\r\n\t                'anonymous user',\r\n\t                'authenticated user',\r\n\t                'administrator'],\r\n\t        //default access levels\r\n            accessLevels : {\r\n                'public' : \"*\",\r\n                'anon': ['anonymous user'],\r\n                'user' : ['authenticated user'],\r\n                'admin': ['administrator']\r\n            }\r\n\t};\r\n    \r\n\t/**\r\n\t *  AccessControlConstant Module\r\n\t */\r\n\tangular\r\n\t    .module('ngDrupal7Services-3_x.commons.accessControl.constant', [])\r\n\t    .constant(\"accessControlConstant\", accessControlConstant);\r\n\t\r\n\r\n})();","(function() {\r\n    'use strict';\r\n    \r\n\t/**\r\n\t * Authentication modules bundle\r\n\t**/\r\n\tangular\r\n\t    .module('ngDrupal7Services-3_x.commons.authentication', ['ngDrupal7Services-3_x.commons.authentication.serviceConstant', 'ngDrupal7Services-3_x.commons.authentication.channel', 'ngDrupal7Services-3_x.commons.authentication.channelConstant', 'ngDrupal7Services-3_x.commons.authentication.httpIntercepter', 'ngDrupal7Services-3_x.commons.authentication.service']);\r\n\r\n})();","(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * Authentication Channel Module\r\n\t */\r\n\tangular.module('ngDrupal7Services-3_x.commons.authentication.channel', ['ngDrupal7Services-3_x.commons.baseChannel', 'ngDrupal7Services-3_x.commons.authentication.channelConstant'])\r\n\t\t   .factory('AuthenticationChannel', AuthenticationChannel);\r\n\r\n\t\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\tAuthenticationChannel.$inject = [ 'BaseChannel', 'AuthenticationChannelConstant' ];\r\n\t\r\n\t/**\r\n\t * Notification channel for authentication service \r\n\t **/\r\n\t/** @ngInject */\r\n\tfunction AuthenticationChannel(BaseChannel, AuthenticationChannelConstant) {\r\n\t\r\n\t\t//setup and return service            \t\r\n        var authenticationChannelService = {\r\n        \t\t\r\n    \t\t// login request\r\n    \t\tpubAuthenticationLoginConfirmed \t: pubAuthenticationLoginConfirmed,\r\n    \t\tsubAuthenticationLoginConfirmed\t\t: subAuthenticationLoginConfirmed,\r\n    \t\tpubAuthenticationLoginFailed \t\t: pubAuthenticationLoginFailed,\r\n    \t\tsubAuthenticationLoginFailed\t\t: subAuthenticationLoginFailed,\t\r\n        \t\r\n    \t\t// logout request\r\n    \t\tpubAuthenticationLogoutConfirmed \t: pubAuthenticationLogoutConfirmed,\r\n        \tsubAuthenticationLogoutConfirmed\t: subAuthenticationLogoutConfirmed,\r\n        \tpubAuthenticationLogoutFailed \t\t: pubAuthenticationLogoutFailed,\r\n        \tsubAuthenticationLogoutFailed\t\t: subAuthenticationLogoutFailed,\r\n        \t\r\n        \t// refreshConnection request\r\n    \t\tpubAuthenticationRefreshConnectionConfirmed \t: pubAuthenticationRefreshConnectionConfirmed,\r\n        \tsubAuthenticationRefreshConnectionConfirmed\t\t: subAuthenticationRefreshConnectionConfirmed,\r\n        \tpubAuthenticationRefreshConnectionFailed \t\t: pubAuthenticationRefreshConnectionFailed,\r\n        \tsubAuthenticationRefreshConnectionFailed\t\t: subAuthenticationRefreshConnectionFailed,\r\n        \t\r\n        \t// try connect to Drupal\r\n        \tpubAuthenticationTryConnectConfirmed\t: pubAuthenticationTryConnectConfirmed,\r\n        \tsubAuthenticationTryConnectConfirmed \t: subAuthenticationTryConnectConfirmed,\r\n        \tpubAuthenticationTryConnectFailed\t\t: pubAuthenticationTryConnectFailed,\r\n        \tsubAuthenticationTryConnectFailed \t\t: subAuthenticationTryConnectFailed,\r\n    \t\t\r\n        \t// Connection state updated\r\n    \t\tpubAuthenticationConnectionStateUpdated \t: pubAuthenticationConnectionStateUpdated,\r\n    \t\tsubAuthenticationConnectionStateUpdated\t\t: subAuthenticationConnectionStateUpdated,\r\n    \t\t\r\n    \t\t// Current user updated\r\n    \t\tpubAuthenticationCurrentUserUpdated\t\t: pubAuthenticationCurrentUserUpdated,\r\n    \t\tsubAuthenticationCurrentUserUpdated\t\t: subAuthenticationCurrentUserUpdated,\r\n        };\r\n        \r\n        return authenticationChannelService;\r\n\r\n        ////////////\r\n        \r\n        //Authentication login request functions\r\n        \r\n        /**\r\n\t\t * pubAuthenticationLoginConfirmed\r\n\t\t * \r\n\t\t * Publish the AuthenticationLoginConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubAuthenticationLoginConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\t \r\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.authentication_loginConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t /**\r\n\t\t * subAuthenticationLoginConfirmed\r\n\t\t * \r\n\t\t * subscribe for the AuthenticationLoginConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subAuthenticationLoginConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationLoginConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subAuthenticationLoginConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.authentication_loginConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubAuthenticationLoginFailed\r\n\t\t * \r\n\t\t * Publish the AuthenticationLoginConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubAuthenticationLoginFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\t\r\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.authentication_loginFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subAuthenticationLoginFailed\r\n\t\t * \r\n\t\t * subscribe for the AuthenticationLoginFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subAuthenticationLoginFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationLoginFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subAuthenticationLoginFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.authentication_loginFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//Authentication logout request functions\r\n\r\n    \t/**\r\n    \t * pubAuthenticationLogoutConfirmed\r\n    \t * \r\n    \t * Publish the AuthenticationLogoutConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubAuthenticationLogoutConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.authentication_logoutConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subAuthenticationLogoutConfirmed\r\n    \t * \r\n    \t * subscribe for the AuthenticationLogoutConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subAuthenticationLogoutConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for AuthenticationLogoutConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subAuthenticationLogoutConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.authentication_logoutConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubAuthenticationLogoutFailed\r\n    \t * \r\n    \t * Publish the AuthenticationLogoutConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubAuthenticationLogoutFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.authentication_logoutFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subAuthenticationLogoutFailed\r\n    \t * \r\n    \t * subscribe for the AuthenticationLogoutFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subAuthenticationLogoutFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for AuthenticationLogoutFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subAuthenticationLogoutFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.authentication_logoutFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//__________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t\r\n    \t//Authentication refresh connection request functions\r\n        \r\n        /**\r\n\t\t * pubAuthenticationRefreshConnectionConfirmed\r\n\t\t * \r\n\t\t * Publish the AuthenticationRefreshConnectionConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubAuthenticationRefreshConnectionConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\t \r\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.authentication_refreshConnectionConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t /**\r\n\t\t * subAuthenticationRefreshConnectionConfirmed\r\n\t\t * \r\n\t\t * subscribe for the AuthenticationRefreshConnectionConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subAuthenticationRefreshConnectionConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationRefreshConnectionConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subAuthenticationRefreshConnectionConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.authentication_refreshConnectionConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubAuthenticationRefreshConnectionFailed\r\n\t\t * \r\n\t\t * Publish the AuthenticationRefreshConnectionConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubAuthenticationRefreshConnectionFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\t\r\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.authentication_refreshConnectionFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subAuthenticationRefreshConnectionFailed\r\n\t\t * \r\n\t\t * subscribe for the AuthenticationRefreshConnectionFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subAuthenticationRefreshConnectionFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationRefreshConnectionFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subAuthenticationRefreshConnectionFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.authentication_refreshConnectionFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t\r\n    \t//try connect request functions\r\n        \r\n        /**\r\n\t\t * pubAuthenticationTryConnectConfirmed\r\n\t\t * \r\n\t\t * Publish the AuthenticationTryConnectConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubAuthenticationTryConnectConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\t \r\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.authentication_tryConnectConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t /**\r\n\t\t * subAuthenticationTryConnectConfirmed\r\n\t\t * \r\n\t\t * subscribe for the AuthenticationTryConnectConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subAuthenticationTryConnectConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationTryConnectConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subAuthenticationTryConnectConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.authentication_tryConnectConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubAuthenticationTryConnectFailed\r\n\t\t * \r\n\t\t * Publish the AuthenticationTryConnectConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubAuthenticationTryConnectFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\t\r\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.authentication_tryConnectFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subAuthenticationTryConnectFailed\r\n\t\t * \r\n\t\t * subscribe for the AuthenticationTryConnectFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subAuthenticationTryConnectFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationTryConnectFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subAuthenticationTryConnectFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.authentication_tryConnectFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubAuthenticationConnectionStateUpdated\r\n\t\t * \r\n\t\t * Publish the ConnectionStateUpdated updated event with given args\r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubAuthenticationConnectionStateUpdated(args) {\r\n    \t\tvar args = args;\r\n    \t\t\r\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.authentication_connectionStateUpdated, args);\r\n    \t};\r\n    \t\r\n    \t /**\r\n\t\t * subAuthenticationConnectionStateUpdated\r\n\t\t * \r\n\t\t * subscribe for the ConnectionStateUpdated event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subAuthenticationConnectConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationConnectConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subAuthenticationConnectionStateUpdated(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.authentication_connectionStateUpdated, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubAuthenticationCurrentUserUpdated\r\n\t\t * \r\n\t\t * Publish the CurrentUserUpdated event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubAuthenticationCurrentUserUpdated(args) {\r\n    \t\tvar args = args;\r\n\r\n    \t\tBaseChannel.pubRootEmit(AuthenticationChannelConstant.authentication_currentUserUpdated, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subAuthenticationCurrentUserUpdated\r\n\t\t * \r\n\t\t * subscribe for the CurrentUserUpdated event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subAuthenticationConnectFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for AuthenticationConnectFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subAuthenticationCurrentUserUpdated(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( AuthenticationChannelConstant.authentication_currentUserUpdated, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n\t};\r\n\r\n})();","(function() {\r\n    'use strict';\r\n\r\n    /**\r\n\t *  Constants for AuthenticationChannel \r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in your app.js config section\r\n\t**/\r\n\tvar AuthenticationChannelConstant =  {\r\n\t\t\r\n\t\tauthentication_loginConfirmed  \t: 'event:drupal-authService-loginConfirmed',\r\n\t\tauthentication_loginFailed  \t: 'event:drupal-authService-loginFailed',\r\n\t\t\r\n\t\tauthentication_logoutConfirmed  : 'event:drupal-authService-logoutConfirmed',\r\n\t\tauthentication_logoutFailed  \t: 'event:drupal-authService-logoutFailed',\r\n\t\t\r\n\t\tauthentication_refreshConnectionConfirmed  \t: 'event:drupal-authService-refreshConnectionConfirmed',\r\n\t\tauthentication_refreshConnectionFailed  \t: 'event:drupal-authService-refreshConnectionFailed',\r\n\t\t\r\n\t\tauthentication_tryConnectConfirmed \t: 'event:drupal-authService-tryConnectConfirmed',\r\n\t\tauthentication_tryConnectFailed \t: 'event:drupal-authService-tryConnectFailed',\r\n\t\t\r\n\t\tauthentication_connectionStateUpdated  \t: 'event:drupal-authService-connectionStateUpdated',\r\n\t\t\r\n\t\tauthentication_currentUserUpdated\t\t: 'event:drupal-authService-currentUserUpdated'\r\n\t\t\t\r\n\t};\r\n    \r\n\t/**\r\n\t * API authentication channel constant\r\n\t */\r\n\tangular\r\n\t.module('ngDrupal7Services-3_x.commons.authentication.channelConstant', [])\r\n\t    .constant(\"AuthenticationChannelConstant\", AuthenticationChannelConstant);\r\n\r\n})();","(function() {\r\n\t'use strict';\r\n\r\n\t\r\n\t/**\r\n\t * Drupal request intercepter Module for the requests Accept attribute\r\n\t */\r\n\tangular.module('ngDrupal7Services-3_x.commons.authentication.httpIntercepter', ['ngDrupal7Services-3_x.commons.authentication.service'])\r\n\t\t   .factory('AuthenticationHttpInterceptor', AuthenticationHttpInterceptor);\r\n\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\tAuthenticationHttpInterceptor.$inject = [ '$injector'];\r\n\t\r\n\t/**\r\n\t * HTTP Intercepter for Accept attribute of HTTP-Requests\r\n\t **/\r\n\t/** @ngInject */\r\n\tfunction AuthenticationHttpInterceptor($injector) {\r\n\t\t\r\n\t\t//setup and return service            \t\r\n        var intercepter = {\r\n        \trequest \t: doRequestCongiguration,\r\n        };\r\n        \r\n        return intercepter;\r\n\r\n        ////////////\r\n        \r\n        //request function\r\n        \r\n        /**\r\n\t\t * request\r\n\t\t * \r\n\t\t * Intercepts a request and sets the Accept attribute \r\n\t     *\r\n\t\t * @param \t{Object} config The requests config object \r\n\t\t * \r\n\t\t * @return  {Object} The edited config object\r\n\t\t * \r\n\t\t**/\r\n        function doRequestCongiguration (config) {\r\n\t        var tokenHeaders = null;\r\n \r\n\t        // Need to manually retrieve dependencies with $injector.invoke\r\n\t        // because Authentication depends on $http, which doesn't exist during the\r\n\t        // configuration phase (when we are setting up interceptors).\r\n\t        // Using $injector.invoke ensures that we are provided with the\r\n\t        // dependencies after they have been created.\r\n\t        $injector.invoke(['AuthenticationService', function (AuthenticationService) {\r\n\t            tokenHeaders = AuthenticationService.getAuthenticationHeaders();\r\n\t            \r\n\t        }]);\r\n\r\n\t        //add headers___________________________________________________________________\r\n\t        \r\n\t        //add Authorisation and X-CSRF-TOKEN if given\r\n\t        if (tokenHeaders) {\r\n\t            angular.extend(config.headers, tokenHeaders);\r\n\t        }\r\n\t        \r\n\t        //add flags_____________________________________________________________________\r\n\t        \r\n\t        //add withCredentials to every request\r\n\t        //needed because we send cookies in our request headers\r\n\t        config.withCredentials = true;\r\n\r\n\t        return config;\r\n        };\r\n    \t\r\n\t};\r\n\r\n})();","(function() {\r\n    'use strict';\r\n\r\n    /**\r\n     * Drupal API authentication service\r\n    **/\r\n    angular.module('ngDrupal7Services-3_x.commons.authentication.service', \r\n    \t\t[ 'ngDrupal7Services-3_x.commons.configurations'\r\n    \t\t  ,'ngDrupal7Services-3_x.commons.authentication.serviceConstant'\r\n    \t\t  ,'ngDrupal7Services-3_x.commons.authentication.channel'\r\n    \t\t  ,'ngDrupal7Services-3_x.resources.system.resource'\r\n    \t\t  ,'ngDrupal7Services-3_x.resources.user.resource'\r\n    \t\t  ,'ngCookies'\r\n    \t\t ])\r\n    \r\n    /**\r\n\t * AuthenticationService\r\n\t * \r\n\t * This service mirrors the Drupal system resource of the services 3.x module.\r\n\t * To use this you have to set following line in your Drupal CORS module settings\r\n\t * your_api_endpoint/system/*|<mirror>|POST|Content-Type,Authorization|true\r\n\t * \r\n\t**/\r\n    .factory('AuthenticationService', AuthenticationService);\r\n   \r\n    /**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t**/\r\n    AuthenticationService.$inject = ['$rootScope', 'DrupalApiConstant', 'AuthenticationServiceConstant', 'AuthenticationChannel', 'SystemResource', 'UserResource', '$cookies', '$http', '$q'];\r\n    \r\n    /**\r\n     * ApiAuthService\r\n     * \r\n     * This service mirrors the Drupal system resource of the services 3.x module.\r\n     * To use this you have to set following line in your Drupal CORS module settings\r\n     * your_api_endpoint/system/*|<mirror>|POST|Content-Type,Authorization|true\r\n     * \r\n    **/\r\n\t/** @ngInject */\r\n\tfunction AuthenticationService( $rootScope, DrupalApiConstant, AuthenticationServiceConstant, AuthenticationChannel, SystemResource, UserResource, $cookies, $http, $q ) { \r\n\t\r\n\t\tvar userIsConected = false,\r\n\t\t\tcurrentUser\t = AuthenticationServiceConstant.anonymousUser,\r\n\t\t\t// time of last successful connection in ms\r\n\t\t\tlastConnectTime  = 0,\r\n\t\t\t//auth token\r\n\t\t\tauthenticationHeaders = null,\r\n\t\t\t//session data\r\n\t\t\tsessid = null,\r\n\t\t\tsession_name = null,\r\n\t\t\tsessionCookieOptions =  { \t\r\n\t\t\t\tdomain \t\t\t: DrupalApiConstant.drupal_instance,\r\n\t\t\t\tpath\t\t\t: '/',\r\n\t\t\t\t//secure \t\t\t: false,\r\n\t\t\t\t//expires\t\t\t: DrupalApiConstant.session_expiration_time,\r\n\t\t\t\t//expirationUnit \t: DrupalApiConstant.session_expiration_unite,\r\n\t\t\t};\r\n\t\t\r\n\t\t//setup and return service        \r\n        var authenticationService = {\r\n        \t\tisAuthorized \t: isAuthorized,\r\n        \t\tlogin\t\t\t: login,\r\n    \t\t\tlogout\t\t\t: logout,\r\n    \t\t\trefreshConnection\t\t\t: refreshConnection,\r\n    \t\t\tgetLastConnectTime\t\t\t: getLastConnectTime,\r\n    \t\t\tgetConnectionState\t\t\t: getConnectionState,\r\n    \t\t\tgetAuthenticationHeaders \t: getAuthenticationHeaders,\r\n    \t\t\tgetCurrentUser\t\t\t\t: getCurrentUser\r\n        };\r\n        \r\n        return authenticationService;\r\n\r\n        ////////////\r\n        /**\r\n         * isAuthorized\r\n         * \r\n         * @param {Object} accessLevel The access level to check for\r\n         * @param {Object} roles The role to check with. If roles is not gives the users roles will be taken\r\n         * \r\n         * @returns {Boolean} true if authorized false if not\r\n         * \r\n         */\r\n        function isAuthorized(accessLevel, roles) {\r\n\t   \t\t //if no user is given set unauthorized user\r\n\t   \t\t currentUser = getCurrentUser();\r\n\t   \t\t //\r\n\t   \t     if(roles === undefined) {\r\n\t   \t\t\troles = currentUser.roles; \r\n\t            }\r\n\t   \t    \r\n\t   \t     //\r\n\t   \t     if(accessLevel == '*') { return true;}\r\n\t   \t     \r\n\t   \t     var isGranted = false;\r\n\t   \t\t for (var i = 0; i < accessLevel.length; i++) {\r\n\t   \t\t\t for (var prop in roles) {\r\n\t   \t\t\t\tif(accessLevel[i] == currentUser.roles[prop]) {\r\n\t   \t\t\t\t\t isGranted = true;\r\n\t   \t\t\t\t}\r\n\t   \t\t\t }\r\n\t   \t     }\r\n\t         return isGranted;\r\n        };\r\n\t\t\r\n\t\t/**\r\n\t\t * login\r\n\t\t * \r\n\t\t * Uses the login request of the user resource and saves session data on success\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction login(loginData) {\r\n\t\t\t\r\n\t\t\treturn UserResource\r\n\t\t\t\t\t.login(loginData)\r\n\t\t\t\t\t\t.success(function (responseData, status, headers, config) {\r\n\t\t\t\t\t\t\tsetAuthenticationHeaders(responseData.token);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tsetLastConnectTime(Date.now());\r\n\t\t\t\t\t\t\tsetConnectionState((responseData.user.uid === 0)?false:true)\r\n\t\t\t\t\t\t\tsetCookies(responseData.sessid, responseData.session_name);\r\n\t\t\t\t\t\t\tsetCurrentUser(responseData.user);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tAuthenticationChannel.pubAuthenticationLoginConfirmed(responseData);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.error(function (responseError, status, headers, config) {\r\n\t\t\t\t\t\t\tAuthenticationChannel.pubAuthenticationLoginFailed(responseError);\r\n\t\t\t\t\t\t});\r\n\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * logout\r\n\t\t * \r\n\t\t * Uses the logout request of the user resource and deletes session data on success\r\n\t\t * \r\n\t\t * @return {Promise} requests promise\r\n\t\t**/\r\n\t\tfunction logout() {\r\n\t\t\t\r\n\t\t\treturn UserResource\r\n\t\t\t\t\t.logout()\r\n\t\t\t\t\t\t.success(function (responseData, status, headers, config) {\r\n\t\t\t\t\t\t\tdelAuthenticationHeaders();\r\n\t\t\t\t\t\t\tdelCookies();\r\n\t\t\t\t\t\t\tsetConnectionState(false);\r\n\t\t\t\t\t\t\tsetCurrentUser(AuthenticationServiceConstant.anonymousUser);\r\n\r\n\t\t\t\t\t\t\tAuthenticationChannel.pubAuthenticationLogoutConfirmed(responseData);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.error(function (responseError, status, headers, config) {\r\n\t\t\t\t\t\t\tAuthenticationChannel.pubAuthenticationLogoutFailed(responseError);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * refreshConnection\r\n\t\t * \r\n\t\t * @TODO write doc\r\n\t\t * \r\n\t\t * @return {Promise} with new token \r\n\t\t *  \r\n\t\t**/\r\n\t\tfunction refreshConnection() {\r\n\t\t\t\r\n\t\t\t//check token\r\n\t\t\treturn refreshTokenFromServer()\r\n\t\t\t\t\t\t.success( function(responseData, status, headers, config) {\t\r\n\t\t\t\t\t\t\treturn tryConnect()\r\n\t\t\t\t\t\t\t\t\t.success(function(responseData, status, headers, config) { \r\n\t\t\t\t\t\t\t\t\t\tAuthenticationChannel.pubAuthenticationRefreshConnectionConfirmed(responseData);\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.error( function(responseError, status, headers, config) {\r\n\t\t\t\t\t\t\tAuthenticationChannel.pubAuthenticationRefreshConnectionFailed(responseError);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * tryConnect\r\n\t\t * \r\n\t\t * @TODO write doc\r\n\t\t * \r\n\t\t * @returns\r\n\t\t */\r\n\t\tfunction tryConnect() {\r\n\t\t\t\r\n\t\t\t return SystemResource\r\n\t\t\t \t\t\t.connect()\r\n\t\t\t\t \t\t\t.success( function (responseData, status, headers, config) {\r\n\t\t\t\t\t             setLastConnectTime(Date.now());\r\n\t\t\t\t\t             setCookies(responseData.sessid, responseData.session_name);\r\n\t\t\t\t\t             setConnectionState((responseData.user.uid === 0)?false:true)\r\n\t\t\t\t\t             setCurrentUser(responseData.user);\r\n\t\t\t\t\t              \r\n\t\t\t\t\t             AuthenticationChannel.pubAuthenticationTryConnectConfirmed(responseData);  \r\n\t\t\t\t            })\r\n\t\t\t\t            .error(function(responseError, status, headers, config) {\r\n\t\t\t\t            \tAuthenticationChannel.pubAuthenticationTryConnectFailed(responseError);\r\n\t\t\t\t            });\r\n\t\t\t\t\t\t \t\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * refreshTokenFromServer\r\n\t\t * \r\n\t\t * request a new token from server => api_endpoint/user/token\r\n\t\t * \r\n\t\t * @return {Promise} with new token \r\n\t\t *  \r\n\t\t**/\r\n\t\tfunction refreshTokenFromServer() {\r\n\r\n\t\t\treturn UserResource\r\n\t\t\t\t\t.token()\r\n\t\t\t\t\t\t.success(function(responseData, status, headers, config) {\r\n\t\t\t\t\t\t\t\t\tsetAuthenticationHeaders(responseData.token);\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.error(function(responseError) {\r\n\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t});\t\r\n\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * getCurrentUser\r\n\t\t * \r\n\t\t * Returns the current authenticated user\r\n\t\t * \r\n\t\t * @return {Object} user as JSON\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction getCurrentUser() { return currentUser; };\r\n\r\n\t\t/**\r\n\t\t * setCurrentUser\r\n\t\t * \r\n\t\t * Sets the current loggend in user\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction setCurrentUser(newUser) {\r\n\t\t\tif(currentUser != newUser) {\r\n\t        \tcurrentUser = newUser;\r\n\t      \t    AuthenticationChannel.pubAuthenticationCurrentUserUpdated(newUser);\r\n\t        }\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * getConnectionState\r\n\t\t * \r\n\t\t * Returns the current state of connection\r\n\t\t * \r\n\t\t * @return {Boolean} userIsConected\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction getConnectionState() { return (userIsConected)?true:false; };\r\n\t\r\n\t\t/**\r\n\t\t * setConnectionState\r\n\t\t * \r\n\t\t * Sets the current state of connection as boolean\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction setConnectionState(newState) {\r\n\t        if(newState != userIsConected) {\r\n\t          userIsConected = (newState)?true:false;\r\n\t      \t  AuthenticationChannel.pubAuthenticationConnectionStateUpdated(userIsConected);\r\n\t        }\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * getAuthenticationHeaders\r\n\t\t * \r\n\t\t * Returns the saved authentication header obj\r\n\t\t * \r\n\t\t * @return  {Object} authentication header\r\n\t\t * \r\n\t\t**/\t\r\n        function getAuthenticationHeaders() { return authenticationHeaders; };\r\n\r\n\r\n        /**\r\n\t\t * setAuthenticationHeaders\r\n\t\t * \r\n\t\t * Sets the authentication header as obj if different from actual value.\r\n\t\t * After this action the commons.authentication.AuthenticationHeaderInterceptor add's Authorisation and X-CSRF-Token headers to request\r\n\t\t * \r\n\t\t * @param {String} X-CSRF-TOKEN value\r\n\t\t * \r\n\t\t**/\r\n        function setAuthenticationHeaders(newToken) {\r\n       \r\n        \tvar newData = { \r\n\t\t\t\t\t'Authorization' : newToken,\r\n\t\t\t\t\t'X-CSRF-TOKEN'  : newToken\r\n\t\t\t};\r\n        \t\r\n        \t//if header data exist check if they are different.\r\n        \t//if they are different set them\r\n        \tif(authenticationHeaders) {\r\n        \t\tif(authenticationHeaders.Authorization != newToken) {\r\n        \t\t\tauthenticationHeaders = newData;\r\n        \t\t}\r\n        \t} \r\n        \t//if header data not exist set them\r\n        \telse {\r\n        \t\tauthenticationHeaders = newData;\r\n        \t}\r\n        \t\r\n        };\r\n        \r\n        /**\r\n\t\t * delAuthenticationHeaders\r\n\t\t * \r\n\t\t * Deletes the authentication headers from service\r\n\t\t * After this action the http intercepter will not add Authorisation and X-CSRF-Token headers to request\r\n\t\t * \r\n\t\t**/\r\n        function delAuthenticationHeaders() {\r\n        \t authenticationHeaders = null;\r\n        };\r\n        \r\n        /**\r\n\t\t * getCookies\r\n\t\t * \r\n\t\t * Returns the saved cookie data\r\n\t\t * \r\n\t\t * @return  {String} cookie data\r\n\t\t * \r\n\t\t**/\r\n        function getCookies() {\r\n        \treturn session_name+\"=\"+sessid;\r\n        };\r\n\r\n        /**\r\n\t\t * setCookies\r\n\t\t * \r\n\t\t * Saves the session id and name in service and cookies\r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n        function setCookies(newSessid, newSession_name) {\t\r\n        \t//save data in service\r\n        \tsessid = newSessid;\r\n\t\t\tsession_name = newSession_name;\r\n\t\t\t\r\n\t\t\t//store session cookies\r\n\t\t\t//$cookies[data.session_name] = data.sessid;\r\n\t\t\t$cookies.put(newSession_name, newSessid, sessionCookieOptions);\t\r\n        };\r\n        \r\n        /**\r\n\t\t * delCookies\r\n\t\t * \r\n\t\t * Deletes the cookie from service and cookies \r\n\t\t * \r\n\t\t**/\r\n        function delCookies() {\r\n        \t//delete data in service\r\n        \tsessid = null;\r\n\t\t\tsession_name = null;\r\n\t\t\t\r\n        \t//delete session cookies\r\n\t\t\t//$cookies.remove(session_name, sessionCookieOptions.path);\r\n\t\t\t$cookies.remove(session_name, sessionCookieOptions.path);\r\n        };\r\n\t\t\r\n\t\t/**\r\n\t\t * getConnectionState\r\n\t\t * \r\n\t\t * Returns the current authentication state as boolean\r\n\t\t * \r\n\t\t * @return {Boolean} state as boolesan\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction getConnectionState() { return userIsConected; };\r\n\t\t\r\n\t\t/**\r\n\t\t * setConnectionState\r\n\t\t * \r\n\t\t * Sets the current authentication state \r\n\t\t * \r\n\t\t**/\r\n\t\tfunction setConnectionState(newState) {\r\n\t\t\t\r\n\t\t\tnewState = (newState)?true:false;\r\n\t\t\t\r\n\t        if(newState != userIsConected) {\r\n\t          userIsConected = newState;\r\n\t      \t  AuthenticationChannel.pubAuthenticationConnectionStateUpdated(userIsConected);\r\n\t        }\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * getLastConnectTime\r\n\t\t * \r\n\t\t * Returns the time of last successful connection in ms\r\n\t\t * \r\n\t\t * @return time in ms\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction getLastConnectTime() { return lastConnectTime; };\r\n\t\t\r\n\t\t/**\r\n\t\t * setLastConnectTime\r\n\t\t * \r\n\t\t * Sets the time of last successful connection in ms\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction setLastConnectTime(newTimeInMs) {\r\n\t\t\tvar newTimeInMs = parseInt(newTimeInMs);\r\n\t\t\tif(newTimeInMs === NaN || newTimeInMs < 0) return;\r\n\t\t\tlastConnectTime = newTimeInMs;\r\n\t\t};\r\n\t\t\r\n\r\n\t};\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    /**\r\n\t *  Constants for authenticationService \r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in your app.js config section\r\n\t**/\r\n\tvar AuthenticationServiceConstant =  {\r\n\t\t//the drupals guest user obj\r\n\t\tanonymousUser : {\r\n\t\t\t\t\"uid\"\t\t: 0,\r\n\t\t\t\t\"roles\"\t\t: {\r\n\t\t\t\t\t\t\t\t\"1\" : \"anonymous user\"\r\n\t\t\t\t\t\t\t  },\r\n\t\t\t\t\"cache\"\t\t: 0,\r\n\t\t\t\t\"timestamp\"\t: Date.now()\r\n\t\t}\r\n\t\t\t\r\n\t};\r\n\t\r\n\t\r\n    \r\n\t/**\r\n\t * API authentication service constant\r\n\t**/\r\n\tangular\r\n\t    .module('ngDrupal7Services-3_x.commons.authentication.serviceConstant', [])\r\n\t    .constant(\"AuthenticationServiceConstant\", AuthenticationServiceConstant);\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n\r\n    angular.module('ngDrupal7Services-3_x.commons.directives', ['ngDrupal7Services-3_x.commons.directives.toggleByAccesslevel']);\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('ngDrupal7Services-3_x.commons.directives.toggleByAccesslevel', ['ngDrupal7Services-3_x.commons.authentication.channel', 'ngDrupal7Services-3_x.commons.authentication.service'])\r\n        .directive('toggleByAccesslevel', toggleByAccesslevel);\r\n\r\n    /**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n    toggleByAccesslevel.$inject = ['AuthenticationChannel', 'AuthenticationService'];\r\n\r\n    /** @ngInject */\r\n    function toggleByAccesslevel(AuthenticationChannel, AuthenticationService) {\r\n\r\n        return {\r\n        \trestrict: 'A',\r\n        \t\r\n            link: function($scope, element, attrs) {\r\n            \r\n            \t$scope.user = AuthenticationService.getCurrentUser();\r\n            \t\r\n            \tvar prevDisp = element.css('display')\r\n                    , userRoles = $scope.user.roles \r\n                    , accessLevel,\r\n                    toggleAction;\r\n            \t\r\n            \tif(attrs.toggleAction !== 'hide' && attrs.toggleAction !== 'show') {\r\n            \t\ttoggleAction = \"hide\";\r\n            \t} else {\r\n            \t\ttoggleAction = attrs.toggleAction;\r\n            \t}\r\n            \t\r\n            \t\r\n\r\n                AuthenticationChannel.subAuthenticationCurrentUserUpdated($scope, currentUserUpdatedHandler);\r\n\r\n                attrs.$observe('toggleByAccesslevel', function(al) {\r\n                \tvar parsed = [];\r\n                    if(al) \r\n                    {\r\n                    \taccessLevel = $scope.$eval(al);\r\n                \t}\r\n                    \r\n                    updateCSS();\r\n                });\r\n\r\n                ///////////////////////////////////////////////////\r\n                \r\n                //hide or shoe elem by toggleAction\r\n                function updateCSS() {\r\n\r\n                    if(userRoles && accessLevel) {\r\n\r\n                    \tif(toggleAction == 'hide') {\r\n                    \t\t\r\n                    \t\tif(!AuthenticationService.isAuthorized(accessLevel))\r\n                                element.css('display', 'none');\r\n                            else\r\n                                element.css('display', prevDisp);\r\n                    \t} \r\n                    \telse if(toggleAction == 'show') {\r\n                    \t\t\r\n                    \t\tif(!AuthenticationService.isAuthorized(accessLevel))\r\n                    \t\t\telement.css('display', prevDisp);\r\n                            else\r\n                            \telement.css('display', 'none');\r\n                    \t}\r\n                    \t\r\n                        \r\n                    }\r\n                };\r\n                \r\n                function currentUserUpdatedHandler(user){\r\n                \t$scope.user = user;\r\n                    userRoles = $scope.user.roles;\r\n                    updateCSS();\r\n                };\r\n                \r\n            }\r\n        };\r\n        \r\n        \r\n    };\r\n\r\n\r\n})();",";(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * Drupal http module bundle\r\n\t */\r\n\tangular.module('ngDrupal7Services-3_x.commons.http', ['ngDrupal7Services-3_x.commons.http.configurations', 'ngDrupal7Services-3_x.commons.http.intercepter.requestAccept'])\r\n\t\t   .config(hTTPConfigurations);\r\n\t\r\n})();",";(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * Drupal request intercepter Module for the requests Content-Type attribute\r\n\t */\r\n\tangular.module('ngDrupal7Services-3_x.commons.http.configurations', ['ngDrupal7Services-3_x.commons.http.intercepter.requestAccept', 'ngDrupal7Services-3_x.commons.authentication.httpIntercepter'])\r\n\t\t   .config(hTTPConfigurations);\r\n\t\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\thTTPConfigurations.$inject = [ '$httpProvider' ];\r\n\t\r\n\t\r\n\t/**\r\n\t * HTTP Intercepter for Content-Type attribute of HTTP-Requests\r\n\t **/\r\n\t/** @ngInject */\r\n\tfunction hTTPConfigurations( $httpProvider ) {\r\n\t\t//request Content-Type attribute\r\n\t\t$httpProvider.interceptors.push('RequestIntercepterAccept');\r\n\t\t$httpProvider.interceptors.push('AuthenticationHttpInterceptor');\r\n\t};\r\n\r\n})();","(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * Drupal request intercepter Module for the requests Accept attribute\r\n\t */\r\n\tangular.module('ngDrupal7Services-3_x.commons.http.intercepter.requestAccept', ['ngDrupal7Services-3_x.commons.configurations'])\r\n\t\t   .factory('RequestIntercepterAccept', RequestIntercepterAccept);\r\n\r\n\t\r\n\t\r\n\t\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\tRequestIntercepterAccept.$inject = [ '$injector'];\r\n\t\r\n\t/**\r\n\t * HTTP Intercepter for Accept attribute of HTTP-Requests\r\n\t **/\r\n\t/** @ngInject */\r\n\tfunction RequestIntercepterAccept($injector) {\r\n\t\t\r\n\t\t//setup and return service            \t\r\n        var intercepter = {\r\n        \trequest \t: request,\r\n        };\r\n        \r\n        return intercepter;\r\n\r\n        ////////////\r\n        \r\n        //request function\r\n        \r\n        /**\r\n\t\t * request\r\n\t\t * \r\n\t\t * Intercepts a request and sets the request attribute \r\n\t     *\r\n\t\t * @param \t{Object} config The requests config object \r\n\t\t * \r\n\t\t * @return  {Object} The edited config object\r\n\t\t * \r\n\t\t**/\r\n        function request(config){\r\n\r\n        \t$injector.invoke(['DrupalApiConstant', function (DrupalApiConstant) {\r\n \t           config.headers['Accept'] = DrupalApiConstant.responseFormat;\r\n \t           config.headers['Content-Type'] = DrupalApiConstant.responseFormat;\r\n \t         \t\r\n \t        }]);\r\n\r\n\t\t\treturn config;\r\n        };\r\n    \t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n    \r\n\t/**\r\n\t * Authentication modules bundle\r\n\t**/\r\n\tangular.module('ngDrupal7Services-3_x.resources.node', ['ngDrupal7Services-3_x.resources.node.resourceConstant', 'ngDrupal7Services-3_x.resources.node.resource', 'ngDrupal7Services-3_x.resources.node.channelConstant', 'ngDrupal7Services-3_x.resources.node.channel']);\r\n})();",";(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * Node Channel Module\r\n\t */\r\n\tangular.module('ngDrupal7Services-3_x.resources.node.channel', ['ngDrupal7Services-3_x.commons.baseChannel', 'ngDrupal7Services-3_x.resources.node.channelConstant'])\r\n\t\t   .factory('NodeChannel', NodeChannel);\r\n\r\n\t\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\tNodeChannel.$inject = [ 'BaseChannel', 'NodeChannelConstant' ];\r\n\t\r\n\t/**\r\n\t * Notification channel for node resource \r\n\t**/\r\n\t\r\n\t/** @ngInject */\r\n\tfunction NodeChannel(BaseChannel, NodeChannelConstant) {\r\n\t\r\n\t\t//setup and return service            \t\r\n        var nodeChannelService = {\r\n        \t\t\r\n        \t//node retrieve request\r\n    \t\tpubRetrieveConfirmed \t: pubRetrieveConfirmed,\r\n    \t\tsubRetrieveConfirmed\t: subRetrieveConfirmed,\r\n    \t\tpubRetrieveFailed \t\t: pubRetrieveFailed,\r\n    \t\tsubRetrieveFailed\t\t: subRetrieveFailed,\r\n    \t\t\r\n        \t//node create request\r\n        \tpubCreateConfirmed \t\t: pubCreateConfirmed,\r\n        \tsubCreateConfirmed\t\t: subCreateConfirmed,\r\n        \tpubCreateFailed \t\t: pubCreateFailed,\r\n        \tsubCreateFailed\t\t\t: subCreateFailed,\r\n        \t\r\n        \t//node update request\r\n        \tpubUpdateConfirmed \t\t: pubUpdateConfirmed,\r\n        \tsubUpdateConfirmed\t\t: subUpdateConfirmed,\r\n        \tpubUpdateFailed \t\t: pubUpdateFailed,\r\n        \tsubUpdateFailed\t\t\t: subUpdateFailed,\r\n        \t\r\n        \t//node delete request\r\n        \tpubDeleteConfirmed \t\t: pubDeleteConfirmed,\r\n        \tsubDeleteConfirmed\t\t: subDeleteConfirmed,\r\n        \tpubDeleteFailed \t\t: pubDeleteFailed,\r\n        \tsubDeleteFailed\t\t\t: subDeleteFailed,\r\n        \t\r\n        \t//node index request\r\n        \tpubIndexConfirmed \t\t: pubIndexConfirmed,\r\n        \tsubIndexConfirmed\t\t: subIndexConfirmed,\r\n        \tpubIndexFailed \t\t\t: pubIndexFailed,\r\n        \tsubIndexFailed\t\t\t: subIndexFailed,\r\n        \t\r\n        \t// Files action\r\n     \t   \tpubFilesConfirmed\t\t: pubFilesConfirmed,\r\n     \t   \tsubFilesConfirmed\t\t: subFilesConfirmed,\r\n     \t   \tpubFilesFailed\t\t\t: pubFilesFailed,\r\n     \t   \tsubFilesFailed \t\t\t: subFilesFailed,\r\n     \t   \t\r\n     \t   \t// Comments action\r\n     \t   \tpubCommentsConfirmed\t: pubCommentsConfirmed,\r\n     \t   \tsubCommentsConfirmed\t: subCommentsConfirmed,\r\n     \t   \tpubCommentsFailed\t\t: pubCommentsFailed,\r\n     \t   \tsubCommentsFailed \t\t: subCommentsFailed,\r\n     \t   \t\r\n     \t   \t// Attachfile action\r\n     \t   \tpubAttachFileConfirmed\t: pubAttachFileConfirmed,\r\n     \t   \tsubAttachFileConfirmed\t: subAttachFileConfirmed,\r\n     \t   \tpubAttachFileFailed\t\t: pubAttachFileFailed,\r\n     \t   \tsubAttachFileFailed \t: subAttachFileFailed\r\n\r\n        };\r\n        \r\n        return nodeChannelService;\r\n\r\n        ////////////\r\n        \r\n        //Node retrieve request functions\r\n        \r\n        /**\r\n\t\t * pubRetrieveConfirmed\r\n\t\t * \r\n\t\t * Publish the NodeRetrieveConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubRetrieveConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.node_retrieveConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subRetrieveConfirmed\r\n\t\t * \r\n\t\t * subscribe for the NodeRetrieveConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for NodeRetrieveConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subRetrieveConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.node_retrieveConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubRetrieveConfirmed\r\n\t\t * \r\n\t\t * Publish the NodeRetrieveConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubRetrieveFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.node_retrieveFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subRetrieveFailed\r\n\t\t * \r\n\t\t * subscribe for the NodeRetrieveFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for NodeRetrieveFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subRetrieveFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.node_retrieveFailed, _Scope, scopeHandler, prepArgs);\r\n\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//Node create request functions\r\n\r\n    \t/**\r\n    \t * pubCreateConfirmed\r\n    \t * \r\n    \t * Publish the NodeCreateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCreateConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\tconsole.log('channel pubCreateConfirmed'); \r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.node_createConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCreateConfirmed\r\n    \t * \r\n    \t * subscribe for the NodeCreateConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeCreateConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCreateConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.node_createConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubCreateConfirmed\r\n    \t * \r\n    \t * Publish the NodeCreateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCreateFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\tconsole.log('channel pubCreateFailed'); \r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.node_createFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCreateFailed\r\n    \t * \r\n    \t * subscribe for the NodeCreateFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeCreateFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCreateFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.node_createFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//Node update request functions\r\n\r\n    \t/**\r\n    \t * pubUpdateConfirmed\r\n    \t * \r\n    \t * Publish the NodeUpdateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubUpdateConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\tconsole.log('channel pubUpdateConfirmed'); \r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.node_updateConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subUpdateConfirmed\r\n    \t * \r\n    \t * subscribe for the NodeUpdateConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeUpdateConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subUpdateConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.node_updateConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n    \t/**\r\n    \t * pubUpdateConfirmed\r\n    \t * \r\n    \t * Publish the NodeUpdateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubUpdateFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\tconsole.log('channel pubUpdateFailed'); \r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.node_updateFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subUpdateFailed\r\n    \t * \r\n    \t * subscribe for the NodeUpdateFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeUpdateFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subUpdateFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.node_updateFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//Node delete request functions\r\n\r\n    \t/**\r\n    \t * pubDeleteConfirmed\r\n    \t * \r\n    \t * Publish the NodeDeleteConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubDeleteConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\tconsole.log('channel pubDeleteConfirmed'); \r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.node_deleteConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subDeleteConfirmed\r\n    \t * \r\n    \t * subscribe for the NodeDeleteConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeDeleteConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subDeleteConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.node_deleteConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubDeleteConfirmed\r\n    \t * \r\n    \t * Publish the NodeDeleteConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubDeleteFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\tconsole.log('channel pubDeleteFailed'); \r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.node_deleteFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subDeleteFailed\r\n    \t * \r\n    \t * subscribe for the NodeDeleteFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeDeleteFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subDeleteFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.node_deleteFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//Node index request functions\r\n\r\n    \t/**\r\n    \t * pubIndexConfirmed\r\n    \t * \r\n    \t * Publish the NodeIndexConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubIndexConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\tconsole.log('channel pubIndexConfirmed'); \r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.node_indexConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subIndexConfirmed\r\n    \t * \r\n    \t * subscribe for the NodeIndexConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeIndexConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subIndexConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.node_indexConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubIndexConfirmed\r\n    \t * \r\n    \t * Publish the NodeIndexConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubIndexFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\tconsole.log('channel pubIndexFailed'); \r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.node_indexFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subIndexFailed\r\n    \t * \r\n    \t * subscribe for the NodeIndexFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeIndexFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subIndexFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.node_indexFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//Node files request functions\r\n\r\n    \t/**\r\n    \t * pubFilesConfirmed\r\n    \t * \r\n    \t * Publish the NodeFilesConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubFilesConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\tconsole.log('channel pubFilesConfirmed'); \r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.node_filesConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subFilesConfirmed\r\n    \t * \r\n    \t * subscribe for the NodeFilesConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subFilesConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeFilesConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subFilesConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.node_filesConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubFilesConfirmed\r\n    \t * \r\n    \t * Publish the NodeFilesConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubFilesFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\tconsole.log('channel pubFilesFailed'); \r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.node_filesFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subFilesFailed\r\n    \t * \r\n    \t * subscribe for the NodeFilesFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subFilesFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeFilesFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subFilesFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.node_filesFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n\r\n    \t//Node comments request functions\r\n\r\n    \t/**\r\n    \t * pubCommentsConfirmed\r\n    \t * \r\n    \t * Publish the NodeCommentsConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCommentsConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\tconsole.log('channel pubCommentsConfirmed'); \r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.node_commentsConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCommentsConfirmed\r\n    \t * \r\n    \t * subscribe for the NodeCommentsConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCommentsConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeCommentsConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCommentsConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.node_commentsConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubCommentsConfirmed\r\n    \t * \r\n    \t * Publish the NodeCommentsConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCommentsFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\tconsole.log('channel pubCommentsFailed'); \r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.node_commentsFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCommentsFailed\r\n    \t * \r\n    \t * subscribe for the NodeCommentsFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCommentsFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for NodeCommentsFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCommentsFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.node_commentsFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n\r\n\r\n    \t//Node attachFile request functions\r\n\r\n    \t/**\r\n    \t* pubAttachFileConfirmed\r\n    \t* \r\n    \t* Publish the NodeAttachFileConfirmed event with giver args \r\n    \t*\r\n    \t* @param \t{Object} args The events arguments \r\n    \t* \r\n    \t* \r\n    \t**/\r\n    \tfunction pubAttachFileConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\tconsole.log('channel pubAttachFileConfirmed'); \r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.node_attachFileConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t* subAttachFileConfirmed\r\n    \t* \r\n    \t* subscribe for the NodeAttachFileConfirmed event\r\n    \t*\r\n    \t* @param \t{Object} _Scope The scope that calls the channels subAttachFileConfirmed function\r\n    \t* @param \t{function} scopeHandler The callback handler for NodeAttachFileConfirmed event\r\n    \t* \r\n    \t* @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t* \r\n    \t**/\r\n    \tfunction subAttachFileConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.node_attachFileConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t* pubAttachFileConfirmed\r\n    \t* \r\n    \t* Publish the NodeAttachFileConfirmed event with giver args \r\n    \t*\r\n    \t* @param \t{Object} args The events arguments \r\n    \t* \r\n    \t* \r\n    \t**/\r\n    \tfunction pubAttachFileFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\tconsole.log('channel pubAttachFileFailed'); \r\n    \t\tBaseChannel.pubRootEmit(NodeChannelConstant.node_attachFileFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t* subAttachFileFailed\r\n    \t* \r\n    \t* subscribe for the NodeAttachFileFailed event\r\n    \t*\r\n    \t* @param \t{Object} _Scope The scope that calls the channels subAttachFileFailed function\r\n    \t* @param \t{function} scopeHandler The callback handler for NodeAttachFileFailed event\r\n    \t* \r\n    \t* @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t* \r\n    \t**/\r\n    \tfunction subAttachFileFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( NodeChannelConstant.node_attachFileFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n\r\n    /**\r\n\t *  Constants for NodeChannel\r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in a config section of angular\r\n\t */\r\n\tvar NodeChannelConstant =  {\r\n\t \t\t// Retrieve action\r\n \t\t\tnode_retrieveConfirmed \t\t: 'event:drupal-node-retrieveConfirmed',\r\n \t\t\tnode_retrieveFailed  \t\t: 'event:drupal-node-retrieveFailed',\r\n \t\t\t// Create action\r\n \t\t\tnode_createConfirmed\t\t: 'event:drupal-node-createConfirmed',\r\n \t\t\tnode_createFailed  \t\t\t: 'event:drupal-node-createFailed',\r\n \t\t\t// Update action\r\n \t\t\tnode_updateConfirmed\t\t: 'event:drupal-node-updateConfirmed',\r\n \t\t\tnode_updateFailed  \t\t\t: 'event:drupal-node-updateFailed',\r\n \t\t\t// Delete action\t\r\n \t\t\tnode_deleteConfirmed\t\t: 'event:drupal-node-deleteConfirmed',\r\n \t\t\tnode_deleteFailed  \t\t\t: 'event:drupal-node-deleteFailed',\r\n \t\t\t// Index action\r\n \t\t\tnode_indexConfirmed  \t\t: 'event:drupal-node-indexConfirmed',\r\n \t\t\tnode_indexFailed  \t\t\t: 'event:drupal-node-indexFailed',\r\n \t\t\t// Files action\r\n \t\t\tnode_filesConfirmed\t\t\t: 'event:drupal-node-filesConfirmed',\r\n \t\t\tnode_filesFailed  \t\t\t: 'event:drupal-node-filesFailed',\r\n \t\t\t// Comments action\r\n \t\t\tnode_commentsConfirmed\t\t: 'event:drupal-node-commentsConfirmed',\r\n \t\t\tnode_commentsFailed  \t\t: 'event:drupal-node-commentsFailed',\r\n \t\t\t// Attach file action\r\n \t\t\tnode_attachFileConfirmed\t: 'event:drupal-node-attachFileConfirmed',\r\n \t\t\tnode_attachFileFailed  \t\t: 'event:drupal-node-attachFileFailed'\r\n\t \t\t\r\n\t};\r\n    \r\n\t/**\r\n\t * Node Channel Constant\r\n\t */\r\n\tangular\r\n\t    .module('ngDrupal7Services-3_x.resources.node.channelConstant', ['ngDrupal7Services-3_x.commons.configurations'])\r\n\t    .constant(\"NodeChannelConstant\", NodeChannelConstant);\r\n\r\n})();\r\n",";(function() {\r\n    'use strict';\r\n\r\n\t/**\r\n\t * Node Resource Modules\r\n\t * \r\n\t * see sourcecode in services/resources/node_resource.inc\r\n\t**/\r\n    angular.module('ngDrupal7Services-3_x.resources.node.resource', ['ngDrupal7Services-3_x.commons.configurations', 'ngDrupal7Services-3_x.resources.node.resourceConstant', 'ngDrupal7Services-3_x.resources.node.channel', 'ngDrupal7Services-3_x.commons.baseResource'])\r\n    \r\n    /**\r\n\t * NodeResource\r\n\t * \r\n\t * This service mirrors the Drupal node resource of the services 3.x module.\r\n\t * To use this you have to set following line in your Drupal CORS module settings\r\n\t * your_api_endpoint/node/*|<mirror>|POST|Content-Type,Authorization|true\r\n\t * \r\n\t**/\r\n    .factory('NodeResource', NodeResource);\r\n\r\n    /**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t**/\r\n    NodeResource.$inject = ['$http', '$q', 'baseResource', 'DrupalApiConstant', 'NodeResourceConstant', 'NodeChannel'];\r\n    \r\n\t/** @ngInject */\r\n\tfunction NodeResource($http, $q, baseResource, DrupalApiConstant, NodeResourceConstant, NodeChannel) { \r\n\t\t\r\n\t\t//setup and return service            \t\r\n        var nodeResourceService = {\r\n        \t//CRUD operations\r\n        \tretrieve \t: retrieve,\r\n    \t\tcreate \t\t: create,\r\n    \t\tupdate \t\t: update,\r\n    \t\tdelete \t\t: _delete,\r\n    \t    index \t\t: index,\r\n    \t    //Actions\r\n    \t    files\t\t: files,\r\n\t\t\tcomments \t: comments,\r\n\t\t\tattachFile : attachFile\r\n        };\r\n        \r\n        return nodeResourceService;\r\n\r\n        ////////////\r\n        \r\n        /**\r\n\t\t * retrieve\r\n\t\t * \r\n\t\t * Retrieve a node\r\n\t\t * \r\n\t\t * Method: GET \r\n\t\t * Url: http://drupal_instance/api_endpoint/node/{UID}\r\n\t\t * \r\n\t\t * @params  {Object} data The requests data\r\n\t\t * \t\t\t@key \t{Integer} nid UID of the node to be loaded, required:true, source:path\r\n\t\t * \r\n\t\t * @return \t{Promise} A node object\r\n\t\t * \r\n\t\t**/\r\n    \tfunction retrieve(data) {\r\n    \t\tvar retrievePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath + '/' + data.nid;\r\n    \t\treturn baseResource.retrieve( retrievePath, NodeChannel.pubRetrieveFailed, NodeChannel.pubRetrieveConfirmed);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * create\r\n\t     * \r\n\t     * Create a new node.\r\n\t     * This function uses drupal_form_submit() and as such expects all input to match\r\n\t     * the submitting form in question.\r\n\t     * \r\n\t     * Method: POST\r\n\t     * Url: http://drupal_instance/api_endpoint/node\r\n\t     * \r\n\t     * @params  {Object} data The accout of the node to create, required:true, source:post body\r\n\t     * \r\n\t     *  The $account object should contain, at minimum, the following properties:\r\n\t\t *     - {String} name  The node name\r\n\t\t *     - {String} mail  The email address\r\n\t\t *     - {String} pass  The plain text unencrypted password\r\n\t\t *\r\n\t\t *  These properties can be passed but are optional\r\n\t\t *     - {Integer} status Value 0 for blocked, otherwise will be active by default\r\n\t\t *     - {Integer} notify Value 1 to notify node of new account, will not notify by default\r\n\t\t *\r\n\t\t *  Roles can be passed in a roles property which is an associative\r\n\t\t *  array formatted with '<role id>' => '<role id>', not including the authenticated node role, which is given by default.\r\n\t     * \r\n\t     * @return \t{Promise} The node object of the newly created node.\r\n\t     *\r\n\t    **/\r\n\t    function create(data) {\r\n\t    \t\r\n\t    \tvar createPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath;\r\n\r\n    \t\tvar createdata \t= {\r\n\t\t\t\tname : data.name,\r\n\t\t\t\tpass : data.pass,\r\n\t\t\t\tmail : data.mail\r\n\t\t\t}\r\n    \t\t\r\n    \t\t//optional data\r\n    \t\t\r\n    \t\tif(data.status || data.status == 0) {\r\n    \t\t\tcreatedata.status = (data.status)?1:0;\r\n    \t\t}\r\n    \t\t\r\n    \t\tif(data.notify || data.notify == 0) {\r\n    \t\t\tcreatedata.notify = (data.notify)?1:0;\r\n    \t\t}\r\n\r\n    \t\tif (data.roles) {\r\n    \t\t\tcreatedata.roles = baseResource.preparePostData(data.roles, 'array_of_values');\r\n    \t\t}\r\n    \t\t\r\n    \t\treturn baseResource.create( createdata, createPath, NodeChannel.pubCreateFailed, NodeChannel.pubCreateConfirmed);\r\n\r\n\t    };\r\n\t        \r\n\t    /**\r\n\t     * update\r\n\t     * \r\n\t     * Update a node\r\n\t     * \r\n\t     * Method: PUT\r\n\t     * Url: http://drupal_instance/api_endpoint/node/{UID}\r\n\t     * \r\n\t     * @params  {Object} data The requests data\r\n\t     * \t\t\t@key \t{Integer} nid Unique identifier for this node, required:true, source:path\r\n\t     * \t\t\t@key \t{Array}  data The node object with updated information, required:true, source:post body\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function update(data) {\r\n\t    \t\r\n\t    \tvar updatePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath + '/' + data.nid;\r\n\t    \t\r\n    \t\tvar updateData \t= {\r\n\t\t\t\tname : data.name,\r\n\t\t\t\tmail : data.mail\r\n\t\t\t}\r\n    \t\t\r\n    \t\treturn baseResource.update( updateData, updatePath, NodeChannel.pubUpdateFailed, NodeChannel.pubUpdateConfirmed);\r\n\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * delete\r\n\t     * \r\n\t     * Delete a node\r\n\t     * \r\n\t     * Method: DELETE\r\n\t     * Url: http://drupal_instance/api_endpoint/node/{UID}\r\n\t     * \r\n\t     * @params  {Object} data the requests data\r\n\t     * \t\t\t@key \t{Integer} nid The id of the node to delete, required:true, source:path\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function _delete(data) {\r\n\t    \tvar deletePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath + '/' + data.nid\r\n\t    \treturn baseResource.delete(deletePath, NodeChannel.pubDeleteFailed, NodeChannel.pubDeleteConfirmed);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * index\r\n\t     * \r\n\t     * List all nodes\r\n\t     * \r\n\t     * Method: GET\r\n\t\t * Url: http://drupal_instance/api_endpoint/node\r\n\t\t * Headers: Content-Type:application/json\r\n\t\t * \r\n\t\t * @params  {Object} data the requests data\r\n\t\t * \t\t@key \t{Integer} page The zero-based index of the page to get. defaults to 0., required:false, source:param\r\n\t\t * \t\t@key \t{Integer} pagesize Number of records to get per page., required:false, source:param\r\n\t\t * \t\t@key \t{String} fields The fields to get., required:false, source:param\r\n\t\t * \t\t@key \t{Array} parameters Parameters, required:false, source:param\r\n\t\t * \t\t\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function index(data) {\r\n\t    \tvar indexPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath + '/';\r\n\t    \treturn baseResource.index(data, indexPath, NodeChannel.pubIndexFailed, NodeChannel.pubIndexConfirmed);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * files\r\n\t     * \r\n\t     * This method returns files associated with a node.\r\n\t     * \r\n\t     * Method: DELETE\r\n\t     * Url: http://drupal_instance/api_endpoint/node/files\r\n\t     * \r\n\t     * @params  {Object} data the requests data\r\n\t     * \t\t\t @key {Integer} nid The nid of the node whose files we are getting, required:true, source:path\r\n\t\t * \t\t     @key {Integer} file_contents To return file contents or not., required:false, source:path\r\n\t\t * \t\t\t @key {Integer} image_styles To return image styles or not., required:false, source:path\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function files(data) {\r\n\t    \tvar filesPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath + '/' + data.nid\r\n\t    \treturn baseResource.delete(filesPath, NodeChannel.pubDeleteFailed, NodeChannel.pubDeleteConfirmed);\r\n\t    \t\r\n\t    \t//var attachFilePath = drupalApiConfig.drupal_instance + drupalApiConfig.api_endpoint + NodeResourceConfig.resourcePath + '/' + nid + '/' + NodeResourceConfig.actions.files + ((file_contents)?('/'+file_contents):'')+((image_styles)?('/'+image_styles):''),\r\n\t\t\t\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * comments\r\n\t     * \r\n\t     * This method returns the number of new comments on a given node.\r\n\t     * \r\n\t     * Method: DELETE\r\n\t     * Url: http://drupal_instance/api_endpoint/node/files\r\n\t     * \r\n\t     * @params  {Object} data the requests data\r\n\t     * \t\t\t@key {Integer} nid The node id to load comments for., required:true, source:path\r\n\t\t * \t\t\t@key {Integer} count Number of comments to load., required:false, source:param\r\n\t\t * \t\t\t@key {Integer} offset If count is set to non-zero value, you can pass also non-zero value for start. For example to get comments from 5 to 15, pass count=10 and start=5., required:false, source:param\r\n\t\t * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function comments(data) {\r\n\t    \tvar commentsPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath + '/' + data.nid\r\n\t    \treturn baseResource.delete(commentsPath, NodeChannel.pubDeleteFailed, NodeChannel.pubDeleteConfirmed);\r\n\t    \t\r\n\t    \t//var attachFilePath = drupalApiConfig.drupal_instance + drupalApiConfig.api_endpoint + NodeResourceConfig.resourcePath + '/' + nid +'/' + NodeResourceConfig.actions.comments + '/' + ((count != undefined ||  offset != undefined)?'?':'')+ ((count != undefined)?('count='+count+','):'') + ((offset != undefined)?('offset=' + offset):''),\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * attachFile\r\n\t     * \r\n\t     * This method returns the number of new comments on a given node.\r\n\t     * \r\n\t     * Method: DELETE\r\n\t     * Url: http://drupal_instance/api_endpoint/node/files\r\n\t     * \r\n\t     * @params  {Object} data the requests data\r\n\t     * \t\t\t@key {Integer} nid The nid of the node to attach a file to, required:true, source:path\r\n\t\t * \t\t\t@key {Sting} field_name The file field name, required:true, source:post body\r\n\t\t * \t\t\t@key {Integer} attach Attach the file(s) to the node. If FALSE, this clears ALL files attached, and attaches the files, required:false, source:post body\r\n\t\t * \t\t\t@key {Array} field_values The extra field values, required:false, source:post body\r\n\t\t * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function attachFile(data) {\r\n\t    \t//@TODO check how it works\r\n\t    \tvar attachFilePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + NodeResourceConstant.resourcePath + '/' + data.nid\r\n\t    \treturn baseResource.delete(attachFilePath, NodeChannel.pubDeleteFailed, NodeChannel.pubDeleteConfirmed);\r\n\t    \t\r\n\t    \t//var attachFilePath = drupalApiConfig.drupal_instance + drupalApiConfig.api_endpoint + NodeResourceConfig.resourcePath + '/' + nid + '/' + NodeResourceConfig.actions.attachFile\r\n\t    };\r\n\t\t\r\n\t\t\t\t\t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n    \r\n    /**\r\n\t *  Constants for NodeResourceModules\r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in your app.js config section\r\n\t */\r\n\tvar NodeResourceConstant =  {\r\n\r\n\t\t// NOTE: This is the default alias aliases for your system resources defined in Drupal\r\n\t\tresourcePath : 'node',\r\n\t\t//actions of user resource\r\n\t\tactions : {\r\n\t\t\t//following actions are defined over their request method (GET, POST, PUT, DELETE) so they are commented out\r\n\t\t\t//retrieve \t: 'retrieve',\r\n\t\t\t//create \t: 'create',\r\n\t\t\t//update \t: 'update',\r\n\t\t\t//delete \t: 'delete',\r\n\t\t    //index \t: 'index',\r\n\t\t\t//\r\n\t\t\tfiles\t\t: 'files',\r\n\t\t\tcomments \t: 'comments',\r\n\t\t\tattach_file : 'attach_file'\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Node Constant Modules\r\n\t */\r\n\tangular\r\n\t    .module('ngDrupal7Services-3_x.resources.node.resourceConstant', ['ngDrupal7Services-3_x.commons.configurations'])\r\n\t    .constant(\"NodeResourceConstant\", NodeResourceConstant);\r\n\t\r\n})();\r\n","(function() {\r\n    'use strict';\r\n    \r\n\t/**\r\n\t * Authentication modules bundle\r\n\t**/\r\n\tangular\r\n\t    .module('ngDrupal7Services-3_x.resources.system', ['ngDrupal7Services-3_x.resources.system.resourceConstant', 'ngDrupal7Services-3_x.resources.system.resource', 'ngDrupal7Services-3_x.resources.system.channelConstant', 'ngDrupal7Services-3_x.resources.system.channel']);\r\n})();",";(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * User Channel Module\r\n\t */\r\n\tangular.module('ngDrupal7Services-3_x.resources.user.channel', ['ngDrupal7Services-3_x.commons.baseChannel', 'ngDrupal7Services-3_x.resources.user.channelConstant'])\r\n\t\t   .factory('UserChannel', UserChannel);\r\n\r\n\t\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\tUserChannel.$inject = [ 'BaseChannel', 'UserChannelConstant' ];\r\n\t\r\n\t/**\r\n\t * Notification channel for user resource \r\n\t**/\r\n\t\r\n\t/** @ngInject */\r\n\tfunction UserChannel(BaseChannel, UserChannelConstant) {\r\n\t\r\n\t\t//setup and return service            \t\r\n        var userChannelService = {\r\n        \t\t\r\n        \t//user retrieve request\r\n    \t\tpubRetrieveConfirmed \t: pubRetrieveConfirmed,\r\n    \t\tsubRetrieveConfirmed\t: subRetrieveConfirmed,\r\n    \t\tpubRetrieveFailed \t\t: pubRetrieveFailed,\r\n    \t\tsubRetrieveFailed\t\t: subRetrieveFailed,\r\n    \t\t\r\n        \t//user create request\r\n        \tpubCreateConfirmed \t\t: pubCreateConfirmed,\r\n        \tsubCreateConfirmed\t\t: subCreateConfirmed,\r\n        \tpubCreateFailed \t\t: pubCreateFailed,\r\n        \tsubCreateFailed\t\t\t: subCreateFailed,\r\n        \t\r\n        \t//user update request\r\n        \tpubUpdateConfirmed \t\t: pubUpdateConfirmed,\r\n        \tsubUpdateConfirmed\t\t: subUpdateConfirmed,\r\n        \tpubUpdateFailed \t\t: pubUpdateFailed,\r\n        \tsubUpdateFailed\t\t\t: subUpdateFailed,\r\n        \t\r\n        \t//user delete request\r\n        \tpubDeleteConfirmed \t\t: pubDeleteConfirmed,\r\n        \tsubDeleteConfirmed\t\t: subDeleteConfirmed,\r\n        \tpubDeleteFailed \t\t: pubDeleteFailed,\r\n        \tsubDeleteFailed\t\t\t: subDeleteFailed,\r\n        \t\r\n        \t//user index request\r\n        \tpubIndexConfirmed \t\t: pubIndexConfirmed,\r\n        \tsubIndexConfirmed\t\t: subIndexConfirmed,\r\n        \tpubIndexFailed \t\t\t: pubIndexFailed,\r\n        \tsubIndexFailed\t\t\t: subIndexFailed,\r\n        \t\r\n        \t//user token request\r\n        \tpubTokenConfirmed \t\t: pubTokenConfirmed,\r\n        \tsubTokenConfirmed\t\t: subTokenConfirmed,\r\n        \tpubTokenFailed \t\t\t: pubTokenFailed,\r\n        \tsubTokenFailed\t\t\t: subTokenFailed,\r\n        \t\r\n        \t//user register request\r\n    \t\tpubRegisterConfirmed \t: pubRegisterConfirmed,\r\n    \t\tsubRegisterConfirmed\t: subRegisterConfirmed,\r\n    \t\tpubRegisterFailed \t\t: pubRegisterFailed,\r\n    \t\tsubRegisterFailed\t\t: subRegisterFailed,\r\n    \t\t\r\n    \t\t//user register request\r\n    \t\tpubResendWelcomeEmailConfirmed \t: pubResendWelcomeEmailConfirmed,\r\n    \t\tsubResendWelcomeEmailConfirmed\t: subResendWelcomeEmailConfirmed,\r\n    \t\tpubResendWelcomeEmailFailed \t: pubResendWelcomeEmailFailed,\r\n    \t\tsubResendWelcomeEmailFailed\t\t: subResendWelcomeEmailFailed,\r\n    \t\t\r\n    \t\t//user cancel request\r\n    \t\tpubCancelConfirmed \t: pubCancelConfirmed,\r\n    \t\tsubCancelConfirmed\t: subCancelConfirmed,\r\n    \t\tpubCancelFailed \t: pubCancelFailed,\r\n    \t\tsubCancelFailed\t\t: subCancelFailed,\r\n    \t\t\r\n        \t//user login request\r\n    \t\tpubLoginConfirmed \t: pubLoginConfirmed,\r\n    \t\tsubLoginConfirmed\t: subLoginConfirmed,\r\n    \t\tpubLoginFailed \t\t: pubLoginFailed,\r\n    \t\tsubLoginFailed\t\t: subLoginFailed,\r\n    \t\t\r\n    \t\t//user logout request\r\n    \t\tpubLogoutConfirmed \t\t: pubLogoutConfirmed,\r\n        \tsubLogoutConfirmed\t\t: subLogoutConfirmed,\r\n        \tpubLogoutFailed \t\t: pubLogoutFailed,\r\n        \tsubLogoutFailed\t\t\t: subLogoutFailed,\r\n        \t\r\n        \t//user password_reset request\r\n        \tpubPasswordResetConfirmed \t\t: pubPasswordResetConfirmed,\r\n        \tsubPasswordResetConfirmed\t\t: subPasswordResetConfirmed,\r\n        \tpubPasswordResetFailed \t\t\t: pubPasswordResetFailed,\r\n        \tsubPasswordResetFailed\t\t\t: subPasswordResetFailed,\r\n\r\n        \t//user RequestNewPassword request\r\n        \tpubRequestNewPasswordConfirmed \t\t: pubRequestNewPasswordConfirmed,\r\n        \tsubRequestNewPasswordConfirmed\t\t: subRequestNewPasswordConfirmed,\r\n        \tpubRequestNewPasswordFailed \t\t: pubRequestNewPasswordFailed,\r\n        \tsubRequestNewPasswordFailed\t\t\t: subRequestNewPasswordFailed\r\n\r\n        };\r\n        \r\n        return userChannelService;\r\n\r\n        ////////////\r\n        \r\n        //User retrieve request functions\r\n        \r\n        /**\r\n\t\t * pubRetrieveConfirmed\r\n\t\t * \r\n\t\t * Publish the UserRetrieveConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubRetrieveConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_retrieveConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subRetrieveConfirmed\r\n\t\t * \r\n\t\t * subscribe for the UserRetrieveConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for UserRetrieveConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subRetrieveConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_retrieveConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubRetrieveConfirmed\r\n\t\t * \r\n\t\t * Publish the UserRetrieveConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubRetrieveFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_retrieveFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subRetrieveFailed\r\n\t\t * \r\n\t\t * subscribe for the UserRetrieveFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subRetrieveFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for UserRetrieveFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subRetrieveFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_retrieveFailed, _Scope, scopeHandler, prepArgs);\r\n\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//User create request functions\r\n\r\n    \t/**\r\n    \t * pubCreateConfirmed\r\n    \t * \r\n    \t * Publish the UserCreateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCreateConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\tconsole.log('channel pubCreateConfirmed'); \r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_createConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCreateConfirmed\r\n    \t * \r\n    \t * subscribe for the UserCreateConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserCreateConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCreateConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_createConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubCreateConfirmed\r\n    \t * \r\n    \t * Publish the UserCreateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCreateFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\tconsole.log('channel pubCreateFailed'); \r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_createFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCreateFailed\r\n    \t * \r\n    \t * subscribe for the UserCreateFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCreateFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserCreateFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCreateFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_createFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//User update request functions\r\n\r\n    \t/**\r\n    \t * pubUpdateConfirmed\r\n    \t * \r\n    \t * Publish the UserUpdateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubUpdateConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\tconsole.log('channel pubUpdateConfirmed'); \r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_updateConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subUpdateConfirmed\r\n    \t * \r\n    \t * subscribe for the UserUpdateConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserUpdateConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subUpdateConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_updateConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n    \t/**\r\n    \t * pubUpdateConfirmed\r\n    \t * \r\n    \t * Publish the UserUpdateConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubUpdateFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\tconsole.log('channel pubUpdateFailed'); \r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_updateFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subUpdateFailed\r\n    \t * \r\n    \t * subscribe for the UserUpdateFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subUpdateFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserUpdateFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subUpdateFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_updateFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//User delete request functions\r\n\r\n    \t/**\r\n    \t * pubDeleteConfirmed\r\n    \t * \r\n    \t * Publish the UserDeleteConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubDeleteConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\tconsole.log('channel pubDeleteConfirmed'); \r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_deleteConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subDeleteConfirmed\r\n    \t * \r\n    \t * subscribe for the UserDeleteConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserDeleteConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subDeleteConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_deleteConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubDeleteConfirmed\r\n    \t * \r\n    \t * Publish the UserDeleteConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubDeleteFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\tconsole.log('channel pubDeleteFailed'); \r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_deleteFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subDeleteFailed\r\n    \t * \r\n    \t * subscribe for the UserDeleteFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subDeleteFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserDeleteFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subDeleteFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_deleteFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//User index request functions\r\n\r\n    \t/**\r\n    \t * pubIndexConfirmed\r\n    \t * \r\n    \t * Publish the UserIndexConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubIndexConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\tconsole.log('channel pubIndexConfirmed'); \r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_indexConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subIndexConfirmed\r\n    \t * \r\n    \t * subscribe for the UserIndexConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserIndexConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subIndexConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_indexConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubIndexConfirmed\r\n    \t * \r\n    \t * Publish the UserIndexConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubIndexFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\tconsole.log('channel pubIndexFailed'); \r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_indexFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subIndexFailed\r\n    \t * \r\n    \t * subscribe for the UserIndexFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subIndexFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserIndexFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subIndexFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_indexFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//User login request functions\r\n        \r\n        /**\r\n\t\t * pubLoginConfirmed\r\n\t\t * \r\n\t\t * Publish the UserLoginConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubLoginConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\t \r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_loginConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t /**\r\n\t\t * subLoginConfirmed\r\n\t\t * \r\n\t\t * subscribe for the UserLoginConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subLoginConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for UserLoginConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subLoginConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_loginConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubLoginFailed\r\n\t\t * \r\n\t\t * Publish the UserLoginConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubLoginFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\t\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_loginFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subLoginFailed\r\n\t\t * \r\n\t\t * subscribe for the UserLoginFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subLoginFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for UserLoginFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subLoginFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_loginFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//User logout request functions\r\n\r\n    \t/**\r\n    \t * pubLogoutConfirmed\r\n    \t * \r\n    \t * Publish the UserLogoutConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubLogoutConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_logoutConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subLogoutConfirmed\r\n    \t * \r\n    \t * subscribe for the UserLogoutConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subLogoutConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserLogoutConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subLogoutConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_logoutConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubLogoutFailed\r\n    \t * \r\n    \t * Publish the UserLogoutConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubLogoutFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_logoutFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subLogoutFailed\r\n    \t * \r\n    \t * subscribe for the UserLogoutFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subLogoutFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserLogoutFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subLogoutFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_logoutFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//__________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t\r\n    \t//User token request functions\r\n\r\n    \t/**\r\n    \t * pubTokenConfirmed\r\n    \t * \r\n    \t * Publish the UserTokenConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubTokenConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_tokenConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subTokenConfirmed\r\n    \t * \r\n    \t * subscribe for the UserTokenConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subTokenConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserTokenConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subTokenConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_tokenConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubTokenConfirmed\r\n    \t * \r\n    \t * Publish the UserTokenConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubTokenFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_tokenFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subTokenFailed\r\n    \t * \r\n    \t * subscribe for the UserTokenFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subTokenFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserTokenFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subTokenFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_tokenFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//User register request functions\r\n\r\n    \t/**\r\n    \t * pubRegisterConfirmed\r\n    \t * \r\n    \t * Publish the UserRegisterConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubRegisterConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_registerConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subRegisterConfirmed\r\n    \t * \r\n    \t * subscribe for the UserRegisterConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subRegisterConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserRegisterConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subRegisterConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_registerConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubRegisterFailed\r\n    \t * \r\n    \t * Publish the UserRegisterConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubRegisterFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_registerFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subRegisterFailed\r\n    \t * \r\n    \t * subscribe for the UserRegisterFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subRegisterFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserRegisterFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subRegisterFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_registerFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//User resend_welcome_email request functions\r\n\r\n    \t/**\r\n    \t * pubResendWelcomeEmailConfirmed\r\n    \t * \r\n    \t * Publish the UserResendWelcomeEmailConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubResendWelcomeEmailConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_resend_welcome_emailConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subResendWelcomeEmailConfirmed\r\n    \t * \r\n    \t * subscribe for the UserResendWelcomeEmailConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subResendWelcomeEmailConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserResendWelcomeEmailConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subResendWelcomeEmailConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_resend_welcome_emailConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubResendWelcomeEmailFailed\r\n    \t * \r\n    \t * Publish the UserResendWelcomeEmailConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubResendWelcomeEmailFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_resend_welcome_emailFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subResendWelcomeEmailFailed\r\n    \t * \r\n    \t * subscribe for the UserResendWelcomeEmailFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subResendWelcomeEmailFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserResendWelcomeEmailFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subResendWelcomeEmailFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_resend_welcome_emailFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//User cancel request functions\r\n\r\n    \t/**\r\n    \t * pubCancelConfirmed\r\n    \t * \r\n    \t * Publish the UserCancelConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCancelConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_cancelConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCancelConfirmed\r\n    \t * \r\n    \t * subscribe for the UserCancelConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCancelConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserCancelConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCancelConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_cancelConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubCancelFailed\r\n    \t * \r\n    \t * Publish the UserCancelConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubCancelFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_cancelFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subCancelFailed\r\n    \t * \r\n    \t * subscribe for the UserCancelFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subCancelFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserCancelFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subCancelFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_cancelFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n\r\n    \t//User password_reset request functions\r\n\r\n    \t/**\r\n    \t * pubPasswordResetConfirmed\r\n    \t * \r\n    \t * Publish the UserPasswordResetConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubPasswordResetConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\tconsole.log('channel pubPasswordResetConfirmed'); \r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_password_resetConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subPasswordResetConfirmed\r\n    \t * \r\n    \t * subscribe for the UserPasswordResetConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subPasswordResetConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserPasswordResetConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subPasswordResetConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_password_resetConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubPasswordResetConfirmed\r\n    \t * \r\n    \t * Publish the UserPasswordResetConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubPasswordResetFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_password_resetFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subPasswordResetFailed\r\n    \t * \r\n    \t * subscribe for the UserPasswordResetFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subPasswordResetFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserPasswordResetFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subPasswordResetFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_password_resetFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t\r\n    \t//User requestNewPassword request functions\r\n\r\n    \t/**\r\n    \t * pubRequestNewPasswordConfirmed\r\n    \t * \r\n    \t * Publish the UserRequestNewPasswordConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubRequestNewPasswordConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_xxxConfirmed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subRequestNewPasswordConfirmed\r\n    \t * \r\n    \t * subscribe for the UserRequestNewPasswordConfirmed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subRequestNewPasswordConfirmed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserRequestNewPasswordConfirmed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subRequestNewPasswordConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_xxxConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//###############\r\n\r\n\r\n    \t/**\r\n    \t * pubRequestNewPasswordConfirmed\r\n    \t * \r\n    \t * Publish the UserRequestNewPasswordConfirmed event with giver args \r\n    \t *\r\n    \t * @param \t{Object} args The events arguments \r\n    \t * \r\n    \t * \r\n    \t**/\r\n    \tfunction pubRequestNewPasswordFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n    \t\tBaseChannel.pubRootEmit(UserChannelConstant.user_xxxFailed, args);\r\n    \t};\r\n\r\n    \t/**\r\n    \t * subRequestNewPasswordFailed\r\n    \t * \r\n    \t * subscribe for the UserRequestNewPasswordFailed event\r\n    \t *\r\n    \t * @param \t{Object} _Scope The scope that calls the channels subRequestNewPasswordFailed function\r\n    \t * @param \t{function} scopeHandler The callback handler for UserRequestNewPasswordFailed event\r\n    \t * \r\n    \t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n    \t * \r\n    \t**/\r\n    \tfunction subRequestNewPasswordFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( UserChannelConstant.user_requestNewPasswordFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t\r\n    \t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n\r\n    /**\r\n\t *  Constants for UserChannel\r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in a config section of angular\r\n\t */\r\n\tvar UserChannelConstant =  {\r\n\t \t\t// Retrieve action\r\n \t\t\tuser_retrieveConfirmed \t\t\t\t: 'event:drupal-user-retrieveConfirmed',\r\n \t\t\tuser_retrieveFailed  \t\t\t\t: 'event:drupal-user-retrieveFailed',\r\n \t\t\t// Create action\r\n \t\t\tuser_createConfirmed\t\t\t\t: 'event:drupal-user-createConfirmed',\r\n \t\t\tuser_createFailed  \t\t\t\t\t: 'event:drupal-user-createFailed',\r\n \t\t\t// Update action\r\n \t\t\tuser_updateConfirmed\t\t\t\t: 'event:drupal-user-updateConfirmed',\r\n \t\t\tuser_updateFailed  \t\t\t\t\t: 'event:drupal-user-updateFailed',\r\n \t\t\t// Delete action\t\r\n \t\t\tuser_deleteConfirmed\t\t\t\t: 'event:drupal-user-deleteConfirmed',\r\n \t\t\tuser_deleteFailed  \t\t\t\t\t: 'event:drupal-user-deleteFailed',\r\n \t\t\t// Index action\r\n \t\t\tuser_indexConfirmed  \t\t\t\t: 'event:drupal-user-indexConfirmed',\r\n \t\t\tuser_indexFailed  \t\t\t\t\t: 'event:drupal-user-indexFailed',\r\n \t\t\t//Request new password action\r\n \t\t\tuser_requestNewPasswordConfirmed  \t: 'event:drupal-user-requestNewPasswordConfirmed',\r\n \t\t\tuser_requestNewPasswordFailed  \t\t: 'event:drupal-user-requestNewPasswordFailed',\r\n \t\t\t//Cancel action\r\n \t\t\tuser_cancelConfirmed  \t\t\t\t: 'event:drupal-user-cancelConfirmed',\r\n \t\t\tuser_cancelFailed  \t\t\t\t\t: 'event:drupal-user-cancelFailed',\r\n \t\t\t//Password Reset\r\n \t\t\tuser_passwordResetConfirmed  \t\t: 'event:drupal-user-passwordResetConfirmed',\r\n \t\t\tuser_passwordResetFailed  \t\t\t: 'event:drupal-user-passwordResetFailed',\r\n \t\t\t//Resend Welcome Email\r\n \t\t\tuser_resendWelcomeEmailConfirmed  \t: 'event:drupal-user-resendWelcomeEmailConfirmed',\r\n \t\t\tuser_resendWelcomeEmailFailed  \t\t: 'event:drupal-user-resendWelcomeEmailFailed',\r\n \t\t\t// Token action\r\n \t\t\tuser_tokenConfirmed  \t\t\t\t: 'event:drupal-user-tokenConfirmed',\r\n \t\t\tuser_tokenFailed  \t\t\t\t\t: 'event:drupal-user-tokenFailed',\r\n \t\t\t// Register action\r\n \t\t\tuser_registerConfirmed  \t\t\t: 'event:drupal-user-registerConfirmed',\r\n \t\t\tuser_registerFailed  \t\t\t\t: 'event:drupal-user-registerFailed',\r\n \t\t\t// Login action\r\n \t\t\tuser_loginConfirmed  \t\t\t\t: 'event:drupal-user-loginConfirmed',\r\n \t\t\tuser_loginFailed  \t\t\t\t\t: 'event:drupal-user-loginFailed',\r\n \t\t\t// Logout action\r\n \t\t\tuser_logoutConfirmed  \t\t\t\t: 'event:drupal-user-logoutConfirmed',\r\n \t\t\tuser_logoutFailed  \t\t\t\t\t: 'event:drupal-user-logoutFailed'\r\n\t \t\t\r\n\t};\r\n    \r\n\t/**\r\n\t * User Channel Constant\r\n\t */\r\n\tangular\r\n\t    .module('ngDrupal7Services-3_x.resources.user.channelConstant', ['ngDrupal7Services-3_x.commons.configurations'])\r\n\t    .constant(\"UserChannelConstant\", UserChannelConstant);\r\n\r\n})();\r\n",";(function() {\r\n    'use strict';\r\n\r\n\t/**\r\n\t * User Resource Modules\r\n\t * \r\n\t * see sourcecode in services/resources/user_resource.inc\r\n\t**/\r\n    angular.module('ngDrupal7Services-3_x.resources.user.resource', ['ngDrupal7Services-3_x.commons.configurations', 'ngDrupal7Services-3_x.resources.user.resourceConstant', 'ngDrupal7Services-3_x.resources.user.channel', 'ngDrupal7Services-3_x.commons.baseResource'])\r\n    \r\n    /**\r\n\t * UserResource\r\n\t * \r\n\t * This service mirrors the Drupal user resource of the services 3.x module.\r\n\t * To use this you have to set following line in your Drupal CORS module settings\r\n\t * your_api_endpoint/user/*|<mirror>|POST|Content-Type,Authorization|true\r\n\t * \r\n\t**/\r\n    .factory('UserResource', UserResource);\r\n\r\n    /**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t**/\r\n    UserResource.$inject = ['$http', '$q', 'baseResource', 'DrupalApiConstant', 'UserResourceConstant', 'UserChannel'];\r\n    \r\n\t/** @ngInject */\r\n\tfunction UserResource($http, $q, baseResource, DrupalApiConstant, UserResourceConstant, UserChannel) { \r\n\t\t\r\n\t\t//setup and return service            \t\r\n        var userResourceService = {\r\n        \t//CRUD operations\r\n        \tretrieve \t: retrieve,\r\n    \t\tcreate \t\t: create,\r\n    \t\tupdate \t\t: update,\r\n    \t\tdelete \t\t: _delete,\r\n    \t    index \t\t: index,\r\n    \t    //Actions\r\n    \t    token\t\t: token,\r\n    \t\tregister \t: register,\r\n    \t\tresendWelcomeEmail \t: resendWelcomeEmail,\r\n    \t\tcancel \t\t: cancel,\r\n    \t\tlogin \t\t: login,\r\n        \tlogout \t\t: logout,\r\n        \tpasswordReset \t\t: passwordReset,\r\n        \trequestNewPassword \t: requestNewPassword\r\n        \t\r\n        };\r\n        \r\n        return userResourceService;\r\n\r\n        ////////////\r\n        \r\n        /**\r\n\t\t * retrieve\r\n\t\t * \r\n\t\t * Retrieve a user\r\n\t\t * \r\n\t\t * Method: GET \r\n\t\t * Url: http://drupal_instance/api_endpoint/user/{UID}\r\n\t\t * \r\n\t\t * @params  {Object} data The requests data\r\n\t\t * \t\t\t@key \t{Integer} uid UID of the user to be loaded, required:true, source:path\r\n\t\t * \r\n\t\t * @return \t{Promise} A user object\r\n\t\t * \r\n\t\t**/\r\n    \tfunction retrieve(data) {\r\n    \t\tvar retrievePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + data.uid;\r\n    \t\treturn baseResource.retrieve( retrievePath, UserChannel.pubRetrieveFailed, UserChannel.pubRetrieveConfirmed);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * create\r\n\t     * \r\n\t     * Create a new user.\r\n\t     * This function uses drupal_form_submit() and as such expects all input to match\r\n\t     * the submitting form in question.\r\n\t     * \r\n\t     * Method: POST\r\n\t     * Url: http://drupal_instance/api_endpoint/user\r\n\t     * \r\n\t     * @params  {Object} data The accout of the user to create, required:true, source:post body\r\n\t     * \r\n\t     *  The $account object should contain, at minimum, the following properties:\r\n\t\t *     - {String} name  The user name\r\n\t\t *     - {String} mail  The email address\r\n\t\t *     - {String} pass  The plain text unencrypted password\r\n\t\t *\r\n\t\t *  These properties can be passed but are optional\r\n\t\t *     - {Integer} status Value 0 for blocked, otherwise will be active by default\r\n\t\t *     - {Integer} notify Value 1 to notify user of new account, will not notify by default\r\n\t\t *\r\n\t\t *  Roles can be passed in a roles property which is an associative\r\n\t\t *  array formatted with '<role id>' => '<role id>', not including the authenticated user role, which is given by default.\r\n\t     * \r\n\t     * @return \t{Promise} The user object of the newly created user.\r\n\t     *\r\n\t    **/\r\n\t    function create(data) {\r\n\t    \t\r\n\t    \tvar createPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath;\r\n\r\n    \t\tvar createdata \t= {\r\n\t\t\t\tname : data.name,\r\n\t\t\t\tpass : data.pass,\r\n\t\t\t\tmail : data.mail\r\n\t\t\t}\r\n    \t\t\r\n    \t\t//optional data\r\n    \t\t\r\n    \t\tif(data.status || data.status == 0) {\r\n    \t\t\tcreatedata.status = (data.status)?1:0;\r\n    \t\t}\r\n    \t\t\r\n    \t\tif(data.notify || data.notify == 0) {\r\n    \t\t\tcreatedata.notify = (data.notify)?1:0;\r\n    \t\t}\r\n\r\n    \t\tif (data.roles) {\r\n    \t\t\tcreatedata.roles = baseResource.preparePostData(data.roles, 'array_of_values');\r\n    \t\t}\r\n    \t\t\r\n    \t\treturn baseResource.create( createdata, createPath, UserChannel.pubCreateFailed, UserChannel.pubCreateConfirmed);\r\n\r\n\t    };\r\n\t        \r\n\t    /**\r\n\t     * update\r\n\t     * \r\n\t     * Update a user\r\n\t     * \r\n\t     * Method: PUT\r\n\t     * Url: http://drupal_instance/api_endpoint/user/{UID}\r\n\t     * \r\n\t     * @params  {Object} data The requests data\r\n\t     * \t\t\t@key \t{Integer} uid Unique identifier for this user, required:true, source:path\r\n\t     * \t\t\t@key \t{Array}  data The user object with updated information, required:true, source:post body\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function update(data) {\r\n\t    \t\r\n\t    \tvar updatePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + data.uid;\r\n\t    \t\r\n    \t\tvar updateData \t= {\r\n\t\t\t\tname : data.name,\r\n\t\t\t\tmail : data.mail\r\n\t\t\t}\r\n    \t\t\r\n    \t\treturn baseResource.update( updateData, updatePath, UserChannel.pubUpdateFailed, UserChannel.pubUpdateConfirmed);\r\n\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * delete\r\n\t     * \r\n\t     * Delete a user\r\n\t     * \r\n\t     * Method: DELETE\r\n\t     * Url: http://drupal_instance/api_endpoint/user/{UID}\r\n\t     * \r\n\t     * @params  {Object} data the requests data\r\n\t     * \t\t\t@key \t{Integer} uid The id of the user to delete, required:true, source:path\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function _delete(data) {\r\n\t    \tvar deletePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + data.uid\r\n\t    \treturn baseResource.delete(deletePath, UserChannel.pubDeleteFailed, UserChannel.pubDeleteConfirmed);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t     * index\r\n\t     * \r\n\t     * List all users\r\n\t     * \r\n\t     * Method: GET\r\n\t\t * Url: http://drupal_instance/api_endpoint/user\r\n\t\t * Headers: Content-Type:application/json\r\n\t\t * \r\n\t\t * @params  {Object} data the requests data\r\n\t\t * \t\t@key \t{Integer} page The zero-based index of the page to get. defaults to 0., required:false, source:param\r\n\t\t * \t\t@key \t{Integer} pagesize Number of records to get per page., required:false, source:param\r\n\t\t * \t\t@key \t{String} fields The fields to get., required:false, source:param\r\n\t\t * \t\t@key \t{Array} parameters Parameters, required:false, source:param\r\n\t\t * \t\t\r\n\t     * \r\n\t     * @return \t{Promise}\r\n\t     *\r\n\t    **/\r\n\t    function index(data) {\r\n\t    \tvar indexPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/';\r\n\t    \treturn baseResource.index(data, indexPath, UserChannel.pubIndexFailed, UserChannel.pubIndexConfirmed);\r\n\t    };\r\n\t    \r\n\t    /**\r\n\t\t * register\r\n\t\t * \r\n\t\t * register a user\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/user/register\r\n\t\t * \r\n\t\t * @param {Object} data The user object, required:true, source:post body\r\n\t\t * \r\n\t\t * @return {Promise}\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction register(data) {\r\n\t\t\t//undefined check\r\n\t    \tdata = (data)?data:{};\r\n\r\n\t\t\t var registerPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + UserResourceConstant.actions.register,\r\n\t\t\t \t requestConfig = {\r\n\t\t \t\t\tmethod: 'POST',\r\n\t\t\t\t\turl : registerPath,\r\n\t\t\t\t\tdata : data\r\n\t\t \t \t  };\r\n\t\t \r\n\t\t \treturn baseResource.request(requestConfig, UserChannel.pubRegisterFailed, UserChannel.pubRegisterConfirmed);\r\n\t\t};\r\n\t\t\r\n\t\t \r\n\t    /**\r\n\t\t * resendWelcomeEmail\r\n\t\t * \r\n\t\t * Resend the welcome email of a user fetched by uid\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/user/resend_welcome_email\r\n\t\t * \r\n\t\t * @param {Object} data The user object, required:true, source:post body\r\n\t\t * \r\n\t\t * @return {Promise}\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction resendWelcomeEmail(data) {\r\n\t\t\t//undefined check\r\n\t    \tdata = (data)?data:{};\r\n\r\n\t\t\t var resendWelcomeEmailPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + data.uid  + '/' + UserResourceConstant.actions.resend_welcome_email,\r\n\t\t\t \t requestConfig = {\r\n\t\t \t\t\tmethod: 'POST',\r\n\t\t\t\t\turl : resendWelcomeEmailPath\r\n\t\t \t \t  };\r\n\t\t \r\n\t\t \treturn baseResource.request(requestConfig, UserChannel.pubResendWelcomeEmailFailed, UserChannel.pubResendWelcomeEmailConfirmed);\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * cancel\r\n\t\t * \r\n\t\t * Cancel a user\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/user/cancel\r\n\t\t * \r\n\t\t * @param {Object} data The user object, required:true, source:post body\r\n\t\t * \r\n\t\t * @return {Promise}\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction cancel(data) {\r\n\t\t\t//undefined check\r\n\t    \tdata = (data)?data:{};\r\n\r\n\t\t\t var cancelPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + data.uid  + '/' + UserResourceConstant.actions.cancel,\r\n\t\t\t \t requestConfig = {\r\n\t\t \t\t\tmethod: 'POST',\r\n\t\t\t\t\turl : cancelPath\r\n\t\t \t \t  };\r\n\t\t \r\n\t\t \treturn baseResource.request(requestConfig, UserChannel.pubCancelFailed, UserChannel.pubCancelConfirmed);\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * PasswordReset\r\n\t\t * \r\n\t\t * PasswordReset a user\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/user/password_reset\r\n\t\t * \r\n\t\t * @param {Object} data The user object, required:true, source:post body\r\n\t\t * \r\n\t\t * @return {Promise}\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction passwordReset(data) {\r\n\t\t\t//undefined check\r\n\t    \tdata = (data)?data:{};\r\n\r\n\t\t\t var passwordResetPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + data.uid  + '/' + UserResourceConstant.actions.password_reset,\r\n\t\t\t \t requestConfig = {\r\n\t\t \t\t\tmethod: 'POST',\r\n\t\t\t\t\turl : passwordResetPath\r\n\t\t \t \t  };\r\n\t\t \r\n\t\t \treturn baseResource.request(requestConfig, UserChannel.pubPasswordResetFailed, UserChannel.pubPasswordResetConfirmed);\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * requestNewPassword\r\n\t\t * \r\n\t\t * Request a new password, given a user name or e-mail address\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/user/request_new_password\r\n\t\t * \r\n\t\t * @param {Object} data The user object\r\n\t\t * \t\t\t@key {String} name A valid user name or e-mail address, required:true, source:post body\r\n\t\t * \r\n\t\t * \r\n\t\t * @return {Promise}\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction requestNewPassword(data) {\r\n\t\t\t//undefined check\r\n\t    \tdata = (data)?data:{};\r\n\r\n\t\t\t var requestNewPasswordPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + data.uid  + '/' + UserResourceConstant.actions.request_new_password,\r\n\t\t\t \t requestConfig = {\r\n\t\t \t\t\tmethod: 'POST',\r\n\t\t\t\t\turl : requestNewPasswordPath,\r\n\t\t\t\t\tdata : {\r\n\t\t\t\t\t\tname : data.name\r\n\t\t\t\t\t}\r\n\t\t \t \t  };\r\n\t\t \r\n\t\t \treturn baseResource.request(requestConfig, UserChannel.pubRequestNewPasswordFailed, UserChannel.pubRequestNewPasswordConfirmed);\r\n\t\t};\r\n\t    \r\n\t    \r\n\t\t/**\r\n\t\t * login\r\n\t\t * \r\n\t\t * Login a user for a new session\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/user/login\r\n\t\t * \r\n\t\t * @params  {Object} data The requests data\r\n\t\t * \t\t\t@key \t{String} username A valid username, required:true, source:post body\r\n\t\t * \t\t\t@key \t{String} password A valid password, required:true, source:post body\r\n\t\t * \r\n\t\t * @return \t{Promise} \r\n\t\t * \r\n\t\t**/\t\r\n\t    function login( data ) {\r\n\t\t\t//undefined check\r\n\t    \tdata = (data)?data:{};\r\n\r\n\t\t\tvar pathToLogin = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + UserResourceConstant.actions.login,\r\n\t\t\t\trequestConfig = {\r\n\t\t\t\t\t\turl : pathToLogin,\r\n\t\t\t\t\t\tmethod :'POST',\r\n\t\t\t\t\t\tdata : {\r\n\r\n\t\t\t\t\t\t\tusername : data.username,\r\n\t\t\t\t\t\t\tpassword : data.password\r\n\t\t\t\t\t\t},\r\n\t\t\t\t};\r\n\t    \t\r\n\t\t\treturn baseResource.request(requestConfig, UserChannel.pubLoginFailed, UserChannel.pubLoginConfirmed);\r\n\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * logout\r\n\t\t * \r\n\t\t * Logout a user session\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/user/logout\r\n\t\t * \r\n\t\t * @return \t{Promise}\r\n\t\t * \r\n\t\t**/\t\r\n\t\tfunction logout() {\r\n\t\t\t \r\n\t\t\tvar pathToLogout = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + UserResourceConstant.actions.logout,\r\n\t\t\t \trequestConfig = {\r\n\t\t\t \t\t\turl \t: pathToLogout,\r\n\t\t\t \t\t\tmethod\t: 'POST'\r\n\t\t\t\t};\r\n\t\t\t \r\n\t\t\treturn baseResource.request(requestConfig, UserChannel.pubLogoutFailed, UserChannel.pubLogoutConfirmed);\r\n\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * token\r\n\t\t * \r\n\t\t * Returns the CSRF token of the current session.\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/user/token\r\n\t\t * \r\n\t\t * @return \t{Promise}\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction token() {\r\n\t\t\tconsole.log(UserResourceConstant); \r\n\t\t\tvar  pathToToken = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + UserResourceConstant.resourcePath + '/' + UserResourceConstant.actions.token,\r\n\t\t\t\t requestConfig = {\r\n\t\t\t     \turl\t\t: pathToToken,\r\n\t\t\t     \tmethod\t: 'POST'\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\treturn baseResource.request(requestConfig, UserChannel.pubTokenFailed, UserChannel.pubTokenConfirmed);\r\n\r\n\t\t};\r\n\t\t\t\t\t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n    \r\n    /**\r\n\t *  Constants for UserResourceModules\r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in your app.js config section\r\n\t */\r\n\tvar UserResourceConstant =  {\r\n\r\n\t\t// NOTE: This is the default alias aliases for your system resources defined in Drupal\r\n\t\tresourcePath : 'user',\r\n\t\t//actions of user resource\r\n\t\tactions : {\r\n\t\t\t//following actions are defined over their request method (GET, POST, PUT, DELETE) so they are commented out\r\n\t\t\t//retrieve \t\t\t\t: 'retrieve',\r\n\t\t\t//create \t\t\t\t: 'create',\r\n\t\t\t//update \t\t\t\t: 'update',\r\n\t\t\t//delete \t\t\t\t: 'delete',\r\n\t\t    //index \t\t\t\t: 'index',\r\n\t\t\t//\r\n\t\t\tlogin \t\t\t\t\t: 'login',\r\n\t\t\tlogout \t\t\t\t\t: 'logout',\r\n\t\t\ttoken \t\t\t\t\t: 'token',\r\n\t\t\trequest_new_password \t: 'request_new_password',\r\n\t\t\tregister \t\t\t\t: 'register',\r\n\t\t\tcancel \t\t\t\t\t: 'cancel',\r\n\t\t\tpassword_reset \t\t\t: 'password_reset',\r\n\t\t\tresend_welcome_email \t: 'resend_welcome_email'\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * User Constant Modules\r\n\t */\r\n\tangular\r\n\t    .module('ngDrupal7Services-3_x.resources.user.resourceConstant', ['ngDrupal7Services-3_x.commons.configurations'])\r\n\t    .constant(\"UserResourceConstant\", UserResourceConstant);\r\n\t\r\n})();\r\n","(function() {\r\n    'use strict';\r\n    \r\n\t/**\r\n\t * Authentication modules bundle\r\n\t**/\r\n\tangular.module('ngDrupal7Services-3_x.resources.user', ['ngDrupal7Services-3_x.resources.user.resourceConstant', 'ngDrupal7Services-3_x.resources.user.resource', 'ngDrupal7Services-3_x.resources.user.channelConstant', 'ngDrupal7Services-3_x.resources.user.channel']);\r\n})();",";(function() {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * System Channel Module\r\n\t */\r\n\tangular.module('ngDrupal7Services-3_x.resources.system.channel', ['ngDrupal7Services-3_x.commons.baseChannel', 'ngDrupal7Services-3_x.resources.system.channelConstant'])\r\n\t\t   .factory('SystemChannel', SystemChannel);\r\n\r\n\t\r\n\t/**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t **/\r\n\tSystemChannel.$inject = [ 'BaseChannel', 'SystemChannelConstant' ];\r\n\t\r\n\t/**\r\n\t * Notification channel for system resource \r\n\t**/\r\n\t/** @ngInject */\r\n\tfunction SystemChannel(BaseChannel, SystemChannelConstant) {\r\n\t\r\n\t\t//setup and return service            \t\r\n        var systemChannelService = {\r\n        \t\t\r\n    \t\tpubConnectConfirmed \t: pubConnectConfirmed,\r\n    \t\tsubConnectConfirmed\t: subConnectConfirmed,\r\n    \t\tpubConnectFailed \t\t: pubConnectFailed,\r\n    \t\tsubConnectFailed\t\t: subConnectFailed,\r\n    \t\t\r\n    \t\tpubGetVariableConfirmed \t: pubGetVariableConfirmed,\r\n    \t\tsubGetVariableConfirmed\t: subGetVariableConfirmed,\r\n    \t\tpubGetVariableFailed \t\t: pubGetVariableFailed,\r\n    \t\tsubGetVariableFailed\t\t: subGetVariableFailed,\r\n    \t\t\r\n    \t\tpubSetVariableConfirmed \t: pubSetVariableConfirmed,\r\n    \t\tsubSetVariableConfirmed\t: subSetVariableConfirmed,\r\n    \t\tpubSetVariableFailed \t\t: pubSetVariableFailed,\r\n    \t\tsubSetVariableFailed\t\t: subSetVariableFailed,\r\n    \t\t\r\n    \t\tpubDelVariableConfirmed \t: pubDelVariableConfirmed,\r\n    \t\tsubDelVariableConfirmed\t: subDelVariableConfirmed,\r\n    \t\tpubDelVariableFailed \t\t: pubDelVariableFailed,\r\n    \t\tsubDelVariableFailed\t\t: subDelVariableFailed\r\n        };\r\n        \r\n        return systemChannelService;\r\n\r\n        ////////////\r\n        \r\n        //System connect request functions\r\n        \r\n        /**\r\n\t\t * pubConnectConfirmed\r\n\t\t * \r\n\t\t * Publish the SystemConnectConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubConnectConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\t\r\n    \t\tBaseChannel.pubRootEmit(SystemChannelConstant.system_connectConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t /**\r\n\t\t * subConnectConfirmed\r\n\t\t * \r\n\t\t * subscribe for the SystemConnectConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subConnectConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for SystemConnectConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subConnectConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( SystemChannelConstant.system_connectConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubConnectConfirmed\r\n\t\t * \r\n\t\t * Publish the SystemConnectConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubConnectFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n\r\n    \t\tBaseChannel.pubRootEmit(SystemChannelConstant.system_connectFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subConnectFailed\r\n\t\t * \r\n\t\t * subscribe for the SystemConnectFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subConnectFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for SystemConnectFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subConnectFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( SystemChannelConstant.system_connectFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//System get_variable request functions\r\n        \r\n        /**\r\n\t\t * pubGetVariableConfirmed\r\n\t\t * \r\n\t\t * Publish the SystemGetVariableConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubGetVariableConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\t\r\n    \t\tBaseChannel.pubRootEmit(SystemChannelConstant.system_getVariableConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t /**\r\n\t\t * subGetVariableConfirmed\r\n\t\t * \r\n\t\t * subscribe for the SystemGetVariableConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subGetVariableConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for SystemGetVariableConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subGetVariableConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( SystemChannelConstant.system_getVariableConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubGetVariableFailed\r\n\t\t * \r\n\t\t * Publish the SystemGetVariableFailed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubGetVariableFailed(args) {\r\n    \t\tvar args = args;\r\n\r\n    \t\tBaseChannel.pubRootEmit(SystemChannelConstant.system_getVariableFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subGetVariableFailed\r\n\t\t * \r\n\t\t * subscribe for the SystemGetVariableFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subGetVariableFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for SystemGetVariableFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subGetVariableFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( SystemChannelConstant.system_getVariableFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//System set_variable request functions\r\n        \r\n        /**\r\n\t\t * pubSetVariableConfirmed\r\n\t\t * \r\n\t\t * Publish the SystemSetVariableConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubSetVariableConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\t\r\n    \t\tBaseChannel.pubRootEmit(SystemChannelConstant.system_setVariableConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t /**\r\n\t\t * subSetVariableConfirmed\r\n\t\t * \r\n\t\t * subscribe for the SystemSetVariableConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subSetVariableConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for SystemSetVariableConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subSetVariableConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( SystemChannelConstant.system_setVariableConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubSetVariableFailed\r\n\t\t * \r\n\t\t * Publish the SystemSetVariableFailed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubSetVariableFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n\r\n    \t\tBaseChannel.pubRootEmit(SystemChannelConstant.system_setVariableFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subSetVariableFailed\r\n\t\t * \r\n\t\t * subscribe for the SystemSetVariableFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subSetVariableFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for SystemSetVariableFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subSetVariableFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( SystemChannelConstant.system_setVariableFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n    \t//System del_variable request functions\r\n        \r\n        /**\r\n\t\t * pubDelVariableConfirmed\r\n\t\t * \r\n\t\t * Publish the SystemDelVariableConfirmed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubDelVariableConfirmed(args) {\r\n    \t\tvar args = args;\r\n    \t\t\r\n    \t\tBaseChannel.pubRootEmit(SystemChannelConstant.system_delVariableConfirmed, args);\r\n    \t};\r\n    \t\r\n    \t /**\r\n\t\t * subDelVariableConfirmed\r\n\t\t * \r\n\t\t * subscribe for the SystemDelVariableConfirmed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subDelVariableConfirmed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for SystemDelVariableConfirmed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subDelVariableConfirmed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) {\r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( SystemChannelConstant.system_delVariableConfirmed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//###############\r\n    \t\r\n        \r\n        /**\r\n\t\t * pubDelVariableFailed\r\n\t\t * \r\n\t\t * Publish the SystemDelVariableFailed event with giver args \r\n\t     *\r\n\t\t * @param \t{Object} args The events arguments \r\n\t\t * \r\n\t\t * \r\n\t\t**/\r\n    \tfunction pubDelVariableFailed(args) {\r\n    \t\tvar args = {errors: args};\r\n\r\n    \t\tBaseChannel.pubRootEmit(SystemChannelConstant.system_delVariableFailed, args);\r\n    \t};\r\n    \t\r\n    \t/**\r\n\t\t * subDelVariableFailed\r\n\t\t * \r\n\t\t * subscribe for the SystemDelVariableFailed event\r\n\t     *\r\n\t\t * @param \t{Object} _Scope The scope that calls the channels subDelVariableFailed function\r\n\t\t * @param \t{function} scopeHandler The callback handler for SystemDelVariableFailed event\r\n\t\t * \r\n\t\t * @return \t{function} The unsubscribe function from the $rootScope.on() call\r\n\t\t * \r\n\t\t**/\r\n    \tfunction subDelVariableFailed(_Scope, scopeHandler) {\r\n    \t\tvar prepArgs = function (args) { \r\n    \t\t\treturn args; \r\n    \t\t};\r\n    \t\t\r\n    \t\tvar unsubsSopeHandler = BaseChannel.subRootEmit( SystemChannelConstant.system_delVariableFailed, _Scope, scopeHandler, prepArgs);\r\n    \t\t\r\n    \t\treturn unsubsSopeHandler;\r\n    \t};\r\n    \t\r\n    \t//________________________________________________________________________________________________________________________________________\r\n    \t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n\r\n    /**\r\n\t *  Constants for SystemChannel\r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in a config section of angular\r\n\t */\r\n\tvar SystemChannelConstant =  {\r\n \t\t// Connect action\r\n \t\tsystem_connectConfirmed\t: 'event:drupal-system-connectConfirmed',\r\n \t\tsystem_connectFailed  \t: 'event:drupal-system-connectFailed',\r\n \t\t// Get variable action\r\n \t\tsystem_getVariableConfirmed\t: 'event:drupal-system-getVariableConfirmed',\r\n \t\tsystem_getVariableFailed  \t: 'event:drupal-system-getVariableFailed',\r\n \t\t// Set variable action\r\n \t\tsystem_setVariableConfirmed\t: 'event:drupal-system-setVariableConfirmed',\r\n \t\tsystem_setVariableFailed  \t: 'event:drupal-system-setVariableFailed',\r\n \t\t// Del variable action\r\n \t\tsystem_delVariableConfirmed\t: 'event:drupal-system-delVariableConfirmed',\r\n \t\tsystem_delVariableFailed  \t: 'event:drupal-system-delVariableFailed'\r\n\t};\r\n    \r\n\t/**\r\n\t * System Channel Constant\r\n\t */\r\n\tangular\r\n\t    .module('ngDrupal7Services-3_x.resources.system.channelConstant', ['ngDrupal7Services-3_x.commons.configurations'])\r\n\t    .constant(\"SystemChannelConstant\", SystemChannelConstant);\r\n\r\n})();\r\n",";(function() {\r\n    'use strict';\r\n\r\n\t/**\r\n\t * System Resource Modules\r\n\t * \r\n\t * see sourcecode in services/resources/system_resource.inc\r\n\t * \r\n\t**/\r\n    angular.module('ngDrupal7Services-3_x.resources.system.resource', ['ngDrupal7Services-3_x.commons.configurations', 'ngDrupal7Services-3_x.commons.baseResource', 'ngDrupal7Services-3_x.resources.system.resourceConstant', 'ngDrupal7Services-3_x.resources.system.channel'])\r\n    \r\n\r\n    /**\r\n\t * SystemResource\r\n\t * \r\n\t * This service mirrors the Drupal system resource of the services 3.x module.\r\n\t * To use this you have to set following line in your Drupal CORS module settings\r\n\t * \r\n\t**/\r\n    .factory('SystemResource', SystemResource);\r\n\r\n    /**\r\n\t * Manually identify dependencies for minification-safe code\r\n\t * \r\n\t**/\r\n    SystemResource.$inject = ['$http', '$q', 'DrupalApiConstant', 'baseResource', 'SystemResourceConstant', 'SystemChannel'];\r\n    \r\n\t/** @ngInject */\r\n\tfunction SystemResource($http, $q, DrupalApiConstant, baseResource, SystemResourceConstant, SystemChannel) { \r\n\t\t\r\n\t\t//setup and return service            \t\r\n        var systemResourceService = {\r\n\t\t\tconnect \t\t: connect,\r\n\t\t\tget_variable \t: get_variable,\r\n\t\t\tset_variable \t: set_variable,\r\n\t\t\tdel_variable \t: del_variable\r\n        };\r\n        \r\n        return systemResourceService;\r\n\r\n        ////////////\r\n        \r\n        /**\r\n\t\t * connect\r\n\t\t * \r\n\t\t * Returns the details of currently logged in user.\r\n\t\t * \r\n\t\t * Method: POST \r\n\t\t * Url: http://drupal_instance/api_endpoint/system/connect\r\n\t\t * \r\n\t\t * @return \t{Promise} Object with session id, session name and a user object.\r\n\t\t * \r\n\t\t**/\r\n        function connect() {\r\n\t\t\t\r\n\t\t\t//undefined check\r\n\t    \t//data = (data)?data:{};\r\n\t    \t\r\n\t\t\t//validation of params\r\n\t    \tvar errors = [];\r\n\t    \t\r\n\t\t\tvar connectPath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + SystemResourceConstant.resourcePath + '/' + SystemResourceConstant.actions.connect,\r\n\t\t\t\trequestConfig = {\r\n\t\t\t\t\t\tmethod :'POST',\r\n\t\t\t\t\t\turl : connectPath\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\treturn baseResource.request(requestConfig, SystemChannel.pubConnectFailed, SystemChannel.pubConnectConfirmed);\r\n\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * get_variable\r\n\t\t * \r\n\t\t * Returns a persistent variable.\r\n\t\t * Case-sensitivity of the variable_* functions depends on the database collation used. To avoid problems, always use lower case for persistent variable names.\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/system/get_variable\r\n\t\t * \r\n\t\t * @params  {Object} data the requests data\r\n\t\t * \t\t\t@key \t{String} name The name of the variable to return, required:true, source:post body\r\n\t\t * \t\t\t@key \t{String} _default The default value to use if this variable has never been set, required:false, source:post body\r\n\t\t * \r\n\t\t * @return \t{Promise} The value of the variable. Unserialization is taken care of as necessary.\r\n\t\t *\r\n\t\t**/\r\n\t\tfunction get_variable(data){\r\n\t\t\t\r\n\t\t\t//undefined check\r\n\t    \tdata = (data)?data:{};\r\n\t\t\t\r\n\t\t\tvar getVariablePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + SystemResourceConstant.resourcePath + '/' + SystemResourceConstant.actions.get_variable,\r\n\t\t\t\trequestConfig = {\r\n\t\t\t\t\t\tmethod \t:'POST',\r\n\t\t\t\t\t\turl \t: getVariablePath,\r\n\t\t\t\t\t\tdata \t: {\r\n\t\t\t\t\t\t\tname : data.name,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\treturn baseResource.request(requestConfig, SystemChannel.pubGetVariableFailed, SystemChannel.pubGetVariableConfirmed);\r\n\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * set_variable\r\n\t\t * \r\n\t\t * Sets a persistent variable.\r\n\t\t * Case-sensitivity of the variable_* functions depends on the database collation used. To avoid problems, always use lower case for persistent variable names.\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/system/set_variable\r\n\t\t * \r\n\t\t * @params  {Object} data the requests data\r\n\t\t * \t\t\t@key \t{String} name The name of the variable to set, required:true, source:post body\r\n\t\t * \t\t\t@key \t{String} value The value to set. This can be any PHP data type; these functions take care of serialization as necessary, required:true, source:post body\r\n\t\t * \r\n\t\t * @return \t{Promise} True if successful false if not\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction set_variable(data){\r\n\t\t\t\r\n\t\t\t//undefined check\r\n\t    \tdata = (data)?data:{};\r\n\t\r\n\t\t\tvar setVariablePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + SystemResourceConstant.resourcePath + '/' + SystemResourceConstant.actions.set_variable,\r\n\t\t\t\tdefer = $q.defer(),\r\n\t\t\t\trequestConfig = {\r\n\t\t\t\t\t\tmethod \t:'POST',\r\n\t\t\t\t\t\turl \t: setVariablePath,\r\n\t\t\t\t\t\tdata \t: {\r\n\t\t\t\t\t\t\tname \t: data.name,\r\n\t\t\t\t\t\t\tvalue \t: data.value\r\n\t\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\treturn baseResource.request(requestConfig, SystemChannel.pubSetVariableFailed, SystemChannel.pubSetVariableConfirmed);\r\n\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * del_variable\r\n\t\t * \r\n\t\t * Unsets a persistent variable.\r\n\t\t * Case-sensitivity of the variable_* functions depends on the database collation used. To avoid problems, always use lower case for persistent variable names.\r\n\t\t * \r\n\t\t * Method: POST\r\n\t\t * Url: http://drupal_instance/api_endpoint/system/del_variable\r\n\t\t * \r\n\t\t * @params  {Object} data the requests data\r\n\t\t * \t\t\t@key \t{String} name The name of the variable to undefine, required:true, source:post body\r\n\t\t * \r\n\t\t * @return \t{Promise}\r\n\t\t * \r\n\t\t**/\r\n\t\tfunction del_variable(data){\r\n\t\t\t\r\n\t\t\t//undefined check\r\n\t    \tdata = (data)?data:{};\r\n\t    \t\r\n\t\t\tvar delVariablePath = DrupalApiConstant.drupal_instance + DrupalApiConstant.api_endpoint + SystemResourceConstant.resourcePath + '/' + SystemResourceConstant.actions.del_variable,\r\n\t\t\t\trequestConfig = {\r\n\t\t\t\t\t\tmethod \t:'POST',\r\n\t\t\t\t\t\turl \t: delVariablePath,\r\n\t\t\t\t\t\tdata \t: {\r\n\t\t\t\t\t\t\tname : data.name\r\n\t\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\treturn baseResource.request(requestConfig, SystemChannel.pubDelVariableFailed, SystemChannel.pubDelVariableConfirmed);\r\n\r\n\t\t};\r\n\t\r\n\t};\r\n\r\n})();",";(function() {\r\n    'use strict';\r\n    \r\n    /**\r\n\t *  Constants for SystemResourceModules \r\n\t *  \r\n\t *  NOTE: if you want to change this constant do this in your app.js config section\r\n\t */\r\n\tvar SystemResourceConstant =  {\r\n\r\n\t \t\t// NOTE: This is the default alias aliases for your system resources defined in Drupal\r\n\t \t\tresourcePath : 'system',\r\n\t \t\t//actions of system resource\r\n\t \t\tactions : {\r\n\t \t\t\tconnect \t : 'connect',\r\n\t \t\t\tget_variable : 'get_variable',\r\n\t \t\t\tset_variable : 'set_variable',\r\n\t \t\t\tdel_variable : 'del_variable'\r\n\t \t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * System Constant Modules\r\n\t */\r\n\tangular\r\n\t    .module('ngDrupal7Services-3_x.resources.system.resourceConstant', ['ngDrupal7Services-3_x.commons.configurations'])\r\n\t    .constant(\"SystemResourceConstant\", SystemResourceConstant);\r\n\t\r\n})();\r\n","/*\n AngularJS v1.4.7\n (c) 2010-2015 Google, Inc. http://angularjs.org\n License: MIT\n*/\n(function(p,c,n){'use strict';function l(b,a,g){var d=g.baseHref(),k=b[0];return function(b,e,f){var g,h;f=f||{};h=f.expires;g=c.isDefined(f.path)?f.path:d;c.isUndefined(e)&&(h=\"Thu, 01 Jan 1970 00:00:00 GMT\",e=\"\");c.isString(h)&&(h=new Date(h));e=encodeURIComponent(b)+\"=\"+encodeURIComponent(e);e=e+(g?\";path=\"+g:\"\")+(f.domain?\";domain=\"+f.domain:\"\");e+=h?\";expires=\"+h.toUTCString():\"\";e+=f.secure?\";secure\":\"\";f=e.length+1;4096<f&&a.warn(\"Cookie '\"+b+\"' possibly not set or overflowed because it was too large (\"+\nf+\" > 4096 bytes)!\");k.cookie=e}}c.module(\"ngCookies\",[\"ng\"]).provider(\"$cookies\",[function(){var b=this.defaults={};this.$get=[\"$$cookieReader\",\"$$cookieWriter\",function(a,g){return{get:function(d){return a()[d]},getObject:function(d){return(d=this.get(d))?c.fromJson(d):d},getAll:function(){return a()},put:function(d,a,m){g(d,a,m?c.extend({},b,m):b)},putObject:function(d,b,a){this.put(d,c.toJson(b),a)},remove:function(a,k){g(a,n,k?c.extend({},b,k):b)}}}]}]);c.module(\"ngCookies\").factory(\"$cookieStore\",\n[\"$cookies\",function(b){return{get:function(a){return b.getObject(a)},put:function(a,c){b.putObject(a,c)},remove:function(a){b.remove(a)}}}]);l.$inject=[\"$document\",\"$log\",\"$browser\"];c.module(\"ngCookies\").provider(\"$$cookieWriter\",function(){this.$get=l})})(window,window.angular);\n//# sourceMappingURL=angular-cookies.min.js.map\n","/**\n * @license AngularJS v1.4.7\n * (c) 2010-2015 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\n/**\n * @ngdoc module\n * @name ngCookies\n * @description\n *\n * # ngCookies\n *\n * The `ngCookies` module provides a convenient wrapper for reading and writing browser cookies.\n *\n *\n * <div doc-module-components=\"ngCookies\"></div>\n *\n * See {@link ngCookies.$cookies `$cookies`} for usage.\n */\n\n\nangular.module('ngCookies', ['ng']).\n  /**\n   * @ngdoc provider\n   * @name $cookiesProvider\n   * @description\n   * Use `$cookiesProvider` to change the default behavior of the {@link ngCookies.$cookies $cookies} service.\n   * */\n   provider('$cookies', [function $CookiesProvider() {\n    /**\n     * @ngdoc property\n     * @name $cookiesProvider#defaults\n     * @description\n     *\n     * Object containing default options to pass when setting cookies.\n     *\n     * The object may have following properties:\n     *\n     * - **path** - `{string}` - The cookie will be available only for this path and its\n     *   sub-paths. By default, this would be the URL that appears in your base tag.\n     * - **domain** - `{string}` - The cookie will be available only for this domain and\n     *   its sub-domains. For obvious security reasons the user agent will not accept the\n     *   cookie if the current domain is not a sub domain or equals to the requested domain.\n     * - **expires** - `{string|Date}` - String of the form \"Wdy, DD Mon YYYY HH:MM:SS GMT\"\n     *   or a Date object indicating the exact date/time this cookie will expire.\n     * - **secure** - `{boolean}` - The cookie will be available only in secured connection.\n     *\n     * Note: by default the address that appears in your `<base>` tag will be used as path.\n     * This is important so that cookies will be visible for all routes in case html5mode is enabled\n     *\n     **/\n    var defaults = this.defaults = {};\n\n    function calcOptions(options) {\n      return options ? angular.extend({}, defaults, options) : defaults;\n    }\n\n    /**\n     * @ngdoc service\n     * @name $cookies\n     *\n     * @description\n     * Provides read/write access to browser's cookies.\n     *\n     * <div class=\"alert alert-info\">\n     * Up until Angular 1.3, `$cookies` exposed properties that represented the\n     * current browser cookie values. In version 1.4, this behavior has changed, and\n     * `$cookies` now provides a standard api of getters, setters etc.\n     * </div>\n     *\n     * Requires the {@link ngCookies `ngCookies`} module to be installed.\n     *\n     * @example\n     *\n     * ```js\n     * angular.module('cookiesExample', ['ngCookies'])\n     *   .controller('ExampleController', ['$cookies', function($cookies) {\n     *     // Retrieving a cookie\n     *     var favoriteCookie = $cookies.get('myFavorite');\n     *     // Setting a cookie\n     *     $cookies.put('myFavorite', 'oatmeal');\n     *   }]);\n     * ```\n     */\n    this.$get = ['$$cookieReader', '$$cookieWriter', function($$cookieReader, $$cookieWriter) {\n      return {\n        /**\n         * @ngdoc method\n         * @name $cookies#get\n         *\n         * @description\n         * Returns the value of given cookie key\n         *\n         * @param {string} key Id to use for lookup.\n         * @returns {string} Raw cookie value.\n         */\n        get: function(key) {\n          return $$cookieReader()[key];\n        },\n\n        /**\n         * @ngdoc method\n         * @name $cookies#getObject\n         *\n         * @description\n         * Returns the deserialized value of given cookie key\n         *\n         * @param {string} key Id to use for lookup.\n         * @returns {Object} Deserialized cookie value.\n         */\n        getObject: function(key) {\n          var value = this.get(key);\n          return value ? angular.fromJson(value) : value;\n        },\n\n        /**\n         * @ngdoc method\n         * @name $cookies#getAll\n         *\n         * @description\n         * Returns a key value object with all the cookies\n         *\n         * @returns {Object} All cookies\n         */\n        getAll: function() {\n          return $$cookieReader();\n        },\n\n        /**\n         * @ngdoc method\n         * @name $cookies#put\n         *\n         * @description\n         * Sets a value for given cookie key\n         *\n         * @param {string} key Id for the `value`.\n         * @param {string} value Raw value to be stored.\n         * @param {Object=} options Options object.\n         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}\n         */\n        put: function(key, value, options) {\n          $$cookieWriter(key, value, calcOptions(options));\n        },\n\n        /**\n         * @ngdoc method\n         * @name $cookies#putObject\n         *\n         * @description\n         * Serializes and sets a value for given cookie key\n         *\n         * @param {string} key Id for the `value`.\n         * @param {Object} value Value to be stored.\n         * @param {Object=} options Options object.\n         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}\n         */\n        putObject: function(key, value, options) {\n          this.put(key, angular.toJson(value), options);\n        },\n\n        /**\n         * @ngdoc method\n         * @name $cookies#remove\n         *\n         * @description\n         * Remove given cookie\n         *\n         * @param {string} key Id of the key-value pair to delete.\n         * @param {Object=} options Options object.\n         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}\n         */\n        remove: function(key, options) {\n          $$cookieWriter(key, undefined, calcOptions(options));\n        }\n      };\n    }];\n  }]);\n\nangular.module('ngCookies').\n/**\n * @ngdoc service\n * @name $cookieStore\n * @deprecated\n * @requires $cookies\n *\n * @description\n * Provides a key-value (string-object) storage, that is backed by session cookies.\n * Objects put or retrieved from this storage are automatically serialized or\n * deserialized by angular's toJson/fromJson.\n *\n * Requires the {@link ngCookies `ngCookies`} module to be installed.\n *\n * <div class=\"alert alert-danger\">\n * **Note:** The $cookieStore service is **deprecated**.\n * Please use the {@link ngCookies.$cookies `$cookies`} service instead.\n * </div>\n *\n * @example\n *\n * ```js\n * angular.module('cookieStoreExample', ['ngCookies'])\n *   .controller('ExampleController', ['$cookieStore', function($cookieStore) {\n *     // Put cookie\n *     $cookieStore.put('myFavorite','oatmeal');\n *     // Get cookie\n *     var favoriteCookie = $cookieStore.get('myFavorite');\n *     // Removing a cookie\n *     $cookieStore.remove('myFavorite');\n *   }]);\n * ```\n */\n factory('$cookieStore', ['$cookies', function($cookies) {\n\n    return {\n      /**\n       * @ngdoc method\n       * @name $cookieStore#get\n       *\n       * @description\n       * Returns the value of given cookie key\n       *\n       * @param {string} key Id to use for lookup.\n       * @returns {Object} Deserialized cookie value, undefined if the cookie does not exist.\n       */\n      get: function(key) {\n        return $cookies.getObject(key);\n      },\n\n      /**\n       * @ngdoc method\n       * @name $cookieStore#put\n       *\n       * @description\n       * Sets a value for given cookie key\n       *\n       * @param {string} key Id for the `value`.\n       * @param {Object} value Value to be stored.\n       */\n      put: function(key, value) {\n        $cookies.putObject(key, value);\n      },\n\n      /**\n       * @ngdoc method\n       * @name $cookieStore#remove\n       *\n       * @description\n       * Remove given cookie\n       *\n       * @param {string} key Id of the key-value pair to delete.\n       */\n      remove: function(key) {\n        $cookies.remove(key);\n      }\n    };\n\n  }]);\n\n/**\n * @name $$cookieWriter\n * @requires $document\n *\n * @description\n * This is a private service for writing cookies\n *\n * @param {string} name Cookie name\n * @param {string=} value Cookie value (if undefined, cookie will be deleted)\n * @param {Object=} options Object with options that need to be stored for the cookie.\n */\nfunction $$CookieWriter($document, $log, $browser) {\n  var cookiePath = $browser.baseHref();\n  var rawDocument = $document[0];\n\n  function buildCookieString(name, value, options) {\n    var path, expires;\n    options = options || {};\n    expires = options.expires;\n    path = angular.isDefined(options.path) ? options.path : cookiePath;\n    if (angular.isUndefined(value)) {\n      expires = 'Thu, 01 Jan 1970 00:00:00 GMT';\n      value = '';\n    }\n    if (angular.isString(expires)) {\n      expires = new Date(expires);\n    }\n\n    var str = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n    str += path ? ';path=' + path : '';\n    str += options.domain ? ';domain=' + options.domain : '';\n    str += expires ? ';expires=' + expires.toUTCString() : '';\n    str += options.secure ? ';secure' : '';\n\n    // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:\n    // - 300 cookies\n    // - 20 cookies per unique domain\n    // - 4096 bytes per cookie\n    var cookieLength = str.length + 1;\n    if (cookieLength > 4096) {\n      $log.warn(\"Cookie '\" + name +\n        \"' possibly not set or overflowed because it was too large (\" +\n        cookieLength + \" > 4096 bytes)!\");\n    }\n\n    return str;\n  }\n\n  return function(name, value, options) {\n    rawDocument.cookie = buildCookieString(name, value, options);\n  };\n}\n\n$$CookieWriter.$inject = ['$document', '$log', '$browser'];\n\nangular.module('ngCookies').provider('$$cookieWriter', function $$CookieWriterProvider() {\n  this.$get = $$CookieWriter;\n});\n\n\n})(window, window.angular);\n","/*! ngstorage 0.3.9 | Copyright (c) 2015 Gias Kay Lee | MIT License */!function(a,b){\"use strict\";\"function\"==typeof define&&define.amd?define([\"angular\"],b):\"object\"==typeof exports?module.exports=b(require(\"angular\")):b(a.angular)}(this,function(a){\"use strict\";function b(b){return function(){var c=\"ngStorage-\";this.setKeyPrefix=function(a){if(\"string\"!=typeof a)throw new TypeError(\"[ngStorage] - \"+b+\"Provider.setKeyPrefix() expects a String.\");c=a};var d=a.toJson,e=a.fromJson;this.setSerializer=function(a){if(\"function\"!=typeof a)throw new TypeError(\"[ngStorage] - \"+b+\"Provider.setSerializer expects a function.\");d=a},this.setDeserializer=function(a){if(\"function\"!=typeof a)throw new TypeError(\"[ngStorage] - \"+b+\"Provider.setDeserializer expects a function.\");e=a},this.get=function(a){return e(window[b].getItem(c+a))},this.set=function(a,e){return window[b].setItem(c+a,d(e))},this.$get=[\"$rootScope\",\"$window\",\"$log\",\"$timeout\",function(f,g,h,i){function j(a){var b;try{b=g[a]}catch(c){b=!1}if(b&&\"localStorage\"===a){var d=\"__\"+Math.round(1e7*Math.random());try{localStorage.setItem(d,d),localStorage.removeItem(d)}catch(c){b=!1}}return b}var k,l,m=c.length,n=j(b)||(h.warn(\"This browser does not support Web Storage!\"),{setItem:a.noop,getItem:a.noop}),o={$default:function(b){for(var c in b)a.isDefined(o[c])||(o[c]=b[c]);return o.$sync(),o},$reset:function(a){for(var b in o)\"$\"===b[0]||delete o[b]&&n.removeItem(c+b);return o.$default(a)},$sync:function(){for(var a,b=0,d=n.length;d>b;b++)(a=n.key(b))&&c===a.slice(0,m)&&(o[a.slice(m)]=e(n.getItem(a)))},$apply:function(){var b;if(l=null,!a.equals(o,k)){b=a.copy(k),a.forEach(o,function(e,f){a.isDefined(e)&&\"$\"!==f[0]&&(n.setItem(c+f,d(e)),delete b[f])});for(var e in b)n.removeItem(c+e);k=a.copy(o)}}};return o.$sync(),k=a.copy(o),f.$watch(function(){l||(l=i(o.$apply,100,!1))}),g.addEventListener&&g.addEventListener(\"storage\",function(b){c===b.key.slice(0,m)&&(b.newValue?o[b.key.slice(m)]=e(b.newValue):delete o[b.key.slice(m)],k=a.copy(o),f.$apply())}),g.addEventListener&&g.addEventListener(\"beforeunload\",function(){o.$apply()}),o}]}}return a=a&&a.module?a:window.angular,a.module(\"ngStorage\",[]).provider(\"$localStorage\",b(\"localStorage\")).provider(\"$sessionStorage\",b(\"sessionStorage\"))});"],"sourceRoot":"/source/"}